Write a program to add two numbers in base 14 - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Write a program to add two numbers in base 14 Asked by Anshya. Below are the different ways to add base 14 numbers. Method 1 Thanks to Raj for suggesting this method. 
  1. Convert both i/p base 14 numbers to base 10.
  2. Add numbers.
  3. Convert the result back to base 14.
 Method 2 Just add the numbers in base 14 in same way we add in base 10. Add numerals of both numbers one by one from right to left. If there is a carry while adding two numerals, consider the carry for adding next numerals. Let us consider the presentation of base 14 numbers same as hexadecimal numbers 
   A --> 10
   B --> 11
   C --> 12
   D --> 13
 
Example:
   num1 =       1  2  A
   num2 =       C  D  3   

   1. Add A and 3, we get 13(D). Since 13 is smaller than 
14, carry becomes 0 and resultant numeral becomes D         

  2. Add 2, D and carry(0). we get 15. Since 15 is greater 
than 13, carry becomes 1 and resultant numeral is 15 - 14 = 1

  3. Add 1, C and carry(1). we get 14. Since 14 is greater 
than 13, carry becomes 1 and resultant numeral is 14 - 14 = 0

Finally, there is a carry, so 1 is added as leftmost numeral and the result becomes 
101D 
 Implementation of Method 2 
# include <stdio.h>
# include <stdlib.h>
# define bool int

int getNumeralValue(char );
char getNumeral(int );

/* Function to add two numbers in base 14 */
char *sumBase14(char *num1,  char *num2)
{
   int l1 = strlen(num1);
   int l2 = strlen(num2);  
   char *res; 
   int i;
   int nml1, nml2, res_nml;   
   bool carry = 0;
   
   if(l1 != l2)
   {
     printf("Function doesn't support numbers of different"
            " lengths. If you want to add such numbers then"
            " prefix smaller number with required no. of zeroes"); 
     getchar();         
     assert(0);
   }      

   /* Note the size of the allocated memory is one 
     more than i/p lenghts for the cases where we 
     have carry at the last like adding D1 and A1 */   
   res = (char *)malloc(sizeof(char)*(l1 + 1));
      
   /* Add all numerals from right to left */
   for(i = l1-1; i >= 0; i--)
   {
     /* Get decimal values of the numerals of 
       i/p numbers*/          
     nml1 = getNumeralValue(num1[i]);
     nml2 = getNumeralValue(num2[i]);
     
     /* Add decimal values of numerals and carry */
     res_nml = carry + nml1 + nml2;
     
     /* Check if we have carry for next addition 
        of numerals */
     if(res_nml >= 14)
     {
       carry = 1;
       res_nml -= 14;
     }   
     else 
     {
       carry = 0;     
     }       
     res[i+1] = getNumeral(res_nml);
   }
      
   /* if there is no carry after last iteration 
      then result should not include 0th character 
      of the resultant string */
   if(carry == 0)
     return (res + 1);   

   /* if we have carry after last iteration then 
     result should include 0th character */
   res[0] = '1';
   return res;
}

/* Function to get value of a numeral 
  For example it returns 10 for input 'A' 
  1 for '1', etc */
int getNumeralValue(char num)
{
  if( num >= '0' && num <= '9')
    return (num - '0');
  if( num >= 'A' && num <= 'D')  
    return (num - 'A' + 10);
        
  /* If we reach this line caller is giving 
    invalid character so we assert and fail*/  
  assert(0);
}

/* Function to get numeral for a value.   
  For example it returns 'A' for input 10 
  '1' for 1, etc */
char getNumeral(int val)
{
  if( val >= 0 && val <= 9)
    return (val + '0');
  if( val >= 10 && val <= 14)  
    return (val + 'A' - 10);
    
  /* If we reach this line caller is giving 
    invalid no. so we assert and fail*/      
  assert(0);
}

/*Driver program to test above functions*/
int main()
{
    char *num1 = "DC2";
    char *num2 = "0A3";

    printf("Result is %s", sumBase14(num1, num2));     
    getchar();
    return 0;
}
 Notes: Above approach can be used to add numbers in any base. We don’t have to do string operations if base is smaller than 10. You can try extending the above program for numbers of different lengths. Please comment if you find any bug in the program or a better approach to do the same.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. EOF Can add two numbers of different lengths.  
/**
 *
 * @author EOF
 * Please Note that the program can add base-14 numbers of length < 100.
 * You may observe unpredictable behavior for length > 100.
 */
 
#include <iostream>
#define MAX_SIZ 100
 
using namespace std;

//Add three digits d1, d2 and d3 and store the sum in "sum"
//and carry in "carry"
void digitSum(char d1, char d2, char d3, char *sum, char *carry){
	int x, y, z, s, c;

	x = d1 - '0';
	y = d2 - '0';
	z = d3 - '0';

	if(d1 >= 'A' && d1 <= 'D')
		x = d1 - 'A' + 10;
	if(d2 >= 'A' && d2 <= 'D')
		y = d2 - 'A' + 10;
	if(d3 >= 'A' && d3 <= 'D')
		z = d3 - 'A' + 10;

	s = (x+y+z)%14;
	c = (x+y+z)/14;

	if(s<=9) *sum = s + '0';
	else *sum = s + 'A' - 10;

	if(c<=9) *carry = c + '0';
	else *carry = c + 'A' - 10;
}

//Add two base-14 numbers in a[] and b[] and store the result in r[]
//and return the pointer to first number in the result.
char* add(char *a, char *b, char *r){
	int len1, len2, i, j, k;
	char carry, sum;

	len1 = strlen(a);
	len2 = strlen(b);
	k = (len1>len2)?len1:len2;
	k += 5;

	i=len1-1;
	j=len2-1;

	r[k--] = '\0';
	carry = '0';
	while(i>=0 && j>=0){
		digitSum(a[i], b[j], carry, &sum, &carry);
		r[k] = sum;
		i--; j--; k--;
	}
	while(i>=0){
		digitSum(a[i], '0', carry, &sum, &carry);
		r[k] = sum;
		i--; k--;
	}
	while(j>=0){
		digitSum('0', b[j], carry, &sum, &carry);
		r[k] = sum;
		j--; k--;
	}
	if(carry!='0')
		r[k--] = carry;
	return &r[k+1];
}

int main(){
	int i;
	char a[] = "AD2"; //"1DC2343AA23C";
	char b[] = "12"; //"34BB34CCD2";
	char r[MAX_SIZ+10];
	
	cout<<add(a,b,r)<<endl;

	return 0;
}

 Dreamer I think NULL or terminating character is missing for res string?? Dreamer if( val >= 10 && val = 10 && val <= 13) Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
