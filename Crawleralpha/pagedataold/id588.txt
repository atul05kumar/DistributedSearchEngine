Implement Stack using Queues - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Implement Stack using Queues The problem is opposite of this post. We are given a Queue data structure that supports standard operations like enqueue() and dequeue(). We need to implement a Stack data structure using only instances of Queue. A stack can be implemented using two queues. Let stack to be implemented be ‘s’ and queues used to implement be ‘q1′ and ‘q2′. Stack ‘s’ can be implemented in two ways: Method 1 (By making push operation costly) This method makes sure that newly entered element is always at the front of ‘q1′, so that pop operation just dequeues from ‘q1′. ‘q2′ is used to put every new element at front of ‘q1′. 
push(s, x) // x is the element to be pushed and s is stack
  1) Enqueue x to q2
  2) One by one dequeue everything from q1 and enqueue to q2.
  3) Swap the names of q1 and q2 
// Swapping of names is done to avoid one more movement of all elements 
// from q2 to q1. 

pop(s)
  1) Dequeue an item from q1 and return it.
 Method 2 (By making pop operation costly) In push operation, the new element is always enqueued to q1. In pop() operation, if q2 is empty then all the elements except the last, are moved to q2. Finally the last element is dequeued from q1 and returned. 
push(s,  x)
  1) Enqueue x to q1 (assuming size of q1 is unlimited).

pop(s)  
  1) One by one dequeue everything except the last element from q1 and enqueue to q2.
  2) Dequeue the last item of q1, the dequeued item is result, store it.
  3) Swap the names of q1 and q2
  4) Return the item stored in step 2.
// Swapping of names is done to avoid one more movement of all elements 
// from q2 to q1.
 References: Implement Stack using Two Queues This article is compiled by Sumit Jain and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: Queue, stack Tweet Writing code in comment? Please use ideone.com and share the link here. gaurav_sharma_17 #include #include #include #include #include #include class S { public : void push(std::queue&enqueue, int x) { enqueue.push(x); } int pop(std::queue &dequeue) { int x, res; if(dequeue.empty()) { printf(“Q is empty”); getchar(); exit(0); } else if(dequeue.size() == 1) { x=dequeue.front(); dequeue.pop(); return x; } else { /* pop an item from the stack1 */ x=dequeue.front(); dequeue.pop(); /* store the last dequeued item */ res =pop(dequeue); /* push everything back to stack1 */ dequeue.push(x); return res; } } }; int main() { std::queue q1; S d; d.push(q1,7); d.push(q1,71); d.push(q1,17); d.push(q1,47); d.push(q1,74); d.push(q1,741); cout<<d.pop(q1); cout<<endl<<"rest of the queue :n"; while (!q1.empty()) { std::cout<<' '<< q1.front(); q1.pop(); } getchar(); } surbhi #include #define MAX 200 struct queue { int front; int rear; int a[MAX]; }q1={-1,-1},q2={-1,-1}; /*struct stack { struct queue q1; struct queue q2; int top; }s;*/ void push(int); int pop(); void enqueue(int,struct queue ); int dequeue(struct queue ); int isEmpty(struct queue ); void main() { //s.q1=q1; //s.q2=q2; push(10); push(40); push(30); printf(“%d”,pop()); } int isEmpty(struct queue q) { if(q.front==-1||q.front==q.rear+1) return 1; else return 0; } void enqueue(int x,struct queue q) { if(q.front==-1){ q.front=0; } if(q.rear==MAX-1) printf(“Overflow”); q.rear++; q.a[q.rear]=x; // printf(“%dn”, q.a[q.rear]); } int dequeue(struct queue q) { int c; // printf(“%d”,q.a[q.front]) ; if(isEmpty(q)) { printf(“Underflow”); return 0 ; } else{ c=q.a[q.front]; q.front++; //q.rear–; return c; } } void push(int x) { struct queue temp; if(q2.rear==MAX-1) { printf(“Overflow”); return; } enqueue(x,q2); while(!isEmpty(q1)) enqueue(dequeue(q1),q2); temp=q1; q1=q2; q2=temp; } int pop(){ return(dequeue(q1)); } It isn’t working. gaurav_sharma_17 hi i added c++ code using recursion …. spheroid Code using single queue #include<iostream> #include<queue> using namespace std; int main() { queue<int> q; int opt; int size,element; do { cout<<"\n Enter 1 for Push \n Enter 2 for Pop \n Enter 3 to exit :"; cin>>opt; switch(opt) { case 1: cout<<" Enter Element :"<<endl; cin>>element; q.push(element); size=q.size(); while(size!=1) { q.push(q.front()); q.pop(); size–; } break; case 2: if(q.size()==0) { cout<<" Element Cant be Popped \n"; } else { cout<<" Popped Out Element is :"<<q.front(); q.pop(); } break; default: cout<<" Enter Valid Option \n"; } }while(opt!=3); getchar(); } spheroid Solution having Push operation Costly #include<iostream> #include<queue> using namespace std; int main() { queue<int> q,r,temp; int opt; int size; int element; do { cout<<"\n Enter 1 for Push \n Enter 2 for Pop \n Enter 3 to exit : "; cin>>opt; switch(opt) { case 1: cout<<" Enter Element :"<<endl; cin>>element; r.push(element); while(!q.empty()) { r.push(q.front()); q.pop(); } temp=q; q=r; r=temp; break; case 2: if(q.size()==0) { cout<<" Element Cant be popped Out \n"; } else { cout<<" Popped Element is :"<<q.front(); q.pop(); } break; default: cout<<" Enter Valid Option \n"; } }while(opt!=3); getchar(); } spheroid Solution by making Pop operation costly #include<iostream> #include<queue> using namespace std; int main() { queue<int> q,r,temp; int opt; int size; int element; do { cout<<" Enter 1 for Push \n Enter 2 for Pop \n Enter 3 to exit:"; cin>>opt; switch(opt) { case 1: cout<<" Enter Element"<<endl; cin>>element; q.push(element); break; case 2: size=q.size(); while(size>1) { r.push(q.front()); q.pop(); size–; } if(q.size()==0) { cout<<" Element cant be Popped Out \n"; } else { cout<<" Popped element is :"<<q.front()<<endl; q.pop(); temp=q; q=r; r=temp; } break; default: cout<<"Enter Valid Option \n"; } }while(opt!=3); getchar(); } suresh  
/* Paste your code here (You may delete these lines if not writing code) */
 struct stack { struct Queue *Q1; struct Queue *Q2; }; //for push psuh(struct *S, int data) { if(isEmptyQueue(S->Q1) EnQueue(S->Q2, data); else Enqueue(S->Q1, data); } //pop int pop(struct Stack *S) { int i,size; if(isIemptyQueue(S->Q2) { size = size(s->Q1); i = 0; while(iQ2, DeQueue(S->Q1)); i++; } return Dequeue(s->Q1); else { size = size(S->Q2); while(iQ1, DeQueue(S->Q2)); i++; } return DeQueue(S->Q2); } } chandan we can also do it using a single queue. here is my code. revQ(queue *q) function reverses contents of a queue recursively.  
void revQ(queue *q) {
    int t = dequeue(q);
    if(!isEmpty(q)) revQ(q);
    enqueue(q, t);
}

void push(queue *s, int x) {
    enqueue(s, x);
}

int pop(queue *s) {
    int t;
    revQ(s);
    t = dequeue(s);
    revQ(s);    
    return t;
}

 Kartik @chandan: Thanks for suggesting a new method. The method uses recursion call stack, and it can be used if recursion call stack is allowed. We will add this to the original post. Arindam Pal can you please provide the dequeue function also? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
