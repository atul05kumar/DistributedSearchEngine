Linked List vs Array - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Linked List vs Array Difficulty Level: Rookie Both Arrays and Linked List can be used to store linear data of similar types, but they both have some advantages and disadvantages over each other. Following are the points in favour of Linked Lists. (1) The size of the arrays is fixed: So we must know the upper limit on the number of elements in advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage, and in practical uses, upper limit is rarely reached. (2) Inserting a new element in an array of elements is expensive, because room has to be created for the new elements and to create room existing elements have to shifted. For example, suppose we maintain a sorted list of IDs in an array id[]. id[] = [1000, 1010, 1050, 2000, 2040, …..]. And if we want to insert a new ID 1005, then to maintain the sorted order, we have to move all the elements after 1000 (excluding 1000). Deletion is also expensive with arrays until unless some special techniques are used. For example, to delete 1010 in id[], everything after 1010 has to be moved. So Linked list provides following two advantages over arrays 1) Dynamic size 2) Ease of insertion/deletion Linked lists have following drawbacks: 1) Random access is not allowed. We have to access elements sequentially starting from the first node. So we cannot do binary search with linked lists. 2) Extra memory space for a pointer is required with each element of the list. 3) Arrays have better cache locality that can make a pretty big difference in performance. Please also see this thread. References: http://cslibrary.stanford.edu/103/LinkedListBasics.pdf Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. nohappy singh Arrays have better cache locality that can make a pretty big difference in performance. .. what does this mean?? kx I think it means that arrays have better performance compared to linked lists, because the elements are co-located in memory. Elements in a linked list might be scattered around, and thus, fetching them won’t be as efficient. Rahul Sundar This is the only easy post of all…lol  
/* Paste your code here (You may delete these lines if not writing code) */
 LoneShadow Arrays have better cache locality that can make a pretty big difference in performance. http://geeksforgeeks.org/ Sandeep Thanks for suggesting this point. We have added this to the original post. gaurav can you please make this cache locality point clear. http://www.linkedin.com/in/ramanawithu Venki The line “Inserting a new element in an array of elements is expensive” is misleading. Add the word “sort” to the sentence. Array is preferred when random access is more frequent than sorted insertions and deletions. Sandeep @venki: Insertion is in general costly with arrays until unless we are inserting new element at the last position. For example, given a big filled array and we want to inset a new element at 5th position, then we have to move all filled elements after 5th position. ASHU @sandeep——-u r right….. http://www.ahmetalpbalkan.com Ahmet Alp Balkan This wasn’t a geeky post though. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
