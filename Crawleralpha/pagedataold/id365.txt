Swap bits in a given number - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Swap bits in a given number Given a number x and two positions (from right side) in binary representation of x, write a function that swaps n bits at given two positions and returns the result. It is also given that the two sets of bits do not overlap. Examples: 
Let p1 and p2 be the two given positions.

Example 1
Input:
x = 47 (00101111)
p1 = 1 (Start from second bit from right side)
p2 = 5 (Start from 6th bit from right side)
n = 3 (No of bits to be swapped)
Output:
227 (11100011)
The 3 bits starting from the second bit (from right side) are 
swapped with 3 bits starting from 6th position (from right side) 


Example 2
Input:
x = 28 (11100)
p1 = 0 (Start from first bit from right side)
p2 = 3 (Start from 4th bit from right side)
n = 2 (No of bits to be swapped)
Output:
7 (00111)
The 2 bits starting from 0th postion (from right side) are
swapped with 2 bits starting from 4th position (from right side) 
 Solution We need to swap two sets of bits. XOR can be used in a similar way as it is used to swap 2 numbers. Following is the algorithm. 
1) Move all bits of first set to rightmost side
   set1 =  (x >> p1) & ((1U << n) - 1)
Here the expression (1U << n) - 1 gives a number that 
contains last n bits set and other bits as 0. We do & 
with this expression so that bits other than the last 
n bits become 0.
2) Move all bits of second set to rightmost side
   set2 =  (x >> p2) & ((1U << n) - 1)
3) XOR the two sets of bits
   xor = (set1 ^ set2) 
4) Put the xor bits back to their original positions. 
   xor = (xor << p1) | (xor << p2)
5) Finally, XOR the xor with original number so 
   that the two sets are swapped.
   result = x ^ xor
 Implementation: 
#include<stdio.h>

int swapBits(unsigned int x, unsigned int p1, unsigned int p2, unsigned int n)
{
    /* Move all bits of first set to rightmost side */
    unsigned int set1 =  (x >> p1) & ((1U << n) - 1);

    /* Moce all bits of second set to rightmost side */
    unsigned int set2 =  (x >> p2) & ((1U << n) - 1);

    /* XOR the two sets */
    unsigned int xor = (set1 ^ set2);

    /* Put the xor bits back to their original positions */
    xor = (xor << p1) | (xor << p2);

    /* XOR the 'xor' with the original number so that the 
       two sets are swapped */
    unsigned int result = x ^ xor;

    return result;
}

/* Drier program to test above function*/
int main()
{
    int res =  swapBits(28, 0, 3, 2);
    printf("\nResult = %d ", res);
    return 0;
}
 Output: 
 Result = 7
 Following is a shorter implementation of the same logic 
int swapBits(unsigned int x, unsigned int p1, unsigned int p2, unsigned int n)
{
    /* xor contains xor of two sets */
    unsigned int xor = ((x >> p1) ^ (x >> p2)) & ((1U << n) - 1);

    /* To swap two sets, we need to again XOR the xor with original sets */
    return x ^ ((xor << p1) | (xor << p2));
}
 References: Swapping individual bits with XOR Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Check if binary representation of a number is palindrome Swap two nibbles in a byte How to turn off a particular bit in a number? Check if a number is multiple of 9 using bitwise operators How to swap two numbers without using a temporary variable? Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) Find position of the only set bit Swap all odd and even bits Tweet Writing code in comment? Please use ideone.com and share the link here. Rawat This solution works fine, I first copied the n-bits from p1 position to p2 and than from the original number n-bits from p2 to p1 position. Basic swap Algorithm !  
#include <iostream>
using namespace std;
int main()
{
    int val,p1,p2,n,org,orgN,newVal=0,ntNum=0;
    cin>>val>>p1>>p2>>n;
    org=val;orgN=n;
    while(n--)
        newVal|=(val&(1<<(p1+n)))>0?(1<<(p1+n)):0;
    newVal<<=(p2-p1);
    n=orgN;
    while(n--)
        ntNum|=1<<(p2+n);
    val&=~ntNum;
    val|=newVal;
    newVal=ntNum=0;
    n=orgN;
    while(n--)
        newVal|=(org&(1<<(p2+n)))>0?(1<<(p2+n)):0;
    newVal>>=(p2-p1);
    n=orgN;
    while(n--)
        ntNum|=1<<(p1+n);
    val&=~ntNum;
    val|=newVal;
    cout<<val<<endl;
}
 kavish could you please explain the role of (1U<<n)-1 in detail? Ram Kavish, Here n signifies the number of bits to be swapped. consider n=2 1U<<2 mean it gives 0100 (ignoring the other nibbles on MSB side) now when you substract 1 from it, it will become 0011 Ideas is to have only those n bits rest of them are masked to zero. akshayjohri89 How about just Create a mask of all 1s for 1st set by  
/* Paste your code here (You may delete these lines if not writing code) */

unsigned int swapbits(unsigned int x,int p1,int p2, int n){
unsigned int mask1,mask2,temp;
mask1=1<<p1;

//Create mask1
for(i=0;i<n-1;i++)
    mask1=mask1|(mask1<<1);

//Keeping a copy of mask1 in temp
temp=mask1;

//Create mask2 by shifting mask1 by p2-p1
mask2=mask1<<(p2-p1);

//Get the value of x in mask1
mask1=mask1&x;

//Clear bits in x(which were copied in mask1)
x=x&(~temp);

//Move the bits to new position
mask1=mask1<<(p2-p1);

//Copy value of mask2 in temp
temp=mask2;

//Get the value of n bits from p2 in mask2
mask2=mask2&x;

//Clear n bits from p2 in x
x=x&(~temp);

//Move bits in mask2 to new position
mask2=mask2>>(p2-p1);

x=x|mask1|mask2;
return x;
}



 http://www.geeksforgeeks.org/archives/18977 Tushar_Pucsd If any one explain (1U << n) how it exucute? ish7 Awesome Venki I guess the positions should not overlap. GeeksforGeeks Thanks Venki. This point has been added to the problem statement. Pavan In the example given, if x =47, n=3, p1=1, p2=3, the positions overlap. I feel that the solution given works currently here as well. Please let me know why does this does not work even if the positions does not overlap.  
/* Paste your code here (You may delete these lines if not writing code) */
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
