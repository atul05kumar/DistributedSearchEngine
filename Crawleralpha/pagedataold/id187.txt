Dynamic Programming | Set 18 (Partition problem) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Dynamic Programming | Set 18 (Partition problem) Partition problem is to determine whether a given set can be partitioned into two subsets such that the sum of elements in both subsets is same. Examples 
arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.
 Following are the two main steps to solve this problem: 1) Calculate sum of the array. If sum is odd, there can not be two subsets with equal sum, so return false. 2) If sum of array elements is even, calculate sum/2 and find a subset of array with sum equal to sum/2. The first step is simple. The second step is crucial, it can be solved either using recursion or Dynamic Programming. Recursive Solution Following is the recursive property of the second step mentioned above. 
Let isSubsetSum(arr, n, sum/2) be the function that returns true if 
there is a subset of arr[0..n-1] with sum equal to sum/2

The isSubsetSum problem can be divided into two subproblems
 a) isSubsetSum() without considering last element 
    (reducing n to n-1)
 b) isSubsetSum considering the last element 
    (reducing sum/2 by arr[n-1] and n to n-1)
If any of the above the above subproblems return true, then return true. 
isSubsetSum (arr, n, sum/2) = isSubsetSum (arr, n-1, sum/2) ||
                              isSubsetSum (arr, n-1, sum/2 - arr[n-1])
 
// A recursive solution for partition problem
#include <stdio.h>

// A utility function that returns true if there is a subset of arr[]
// with sun equal to given sum
bool isSubsetSum (int arr[], int n, int sum)
{
   // Base Cases
   if (sum == 0)
     return true;
   if (n == 0 && sum != 0)
     return false;

   // If last element is greater than sum, then ignore it
   if (arr[n-1] > sum)
     return isSubsetSum (arr, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element
   */
   return isSubsetSum (arr, n-1, sum) || isSubsetSum (arr, n-1, sum-arr[n-1]);
}

// Returns true if arr[] can be partitioned in two subsets of
// equal sum, otherwise false
bool findPartiion (int arr[], int n)
{
    // Calculate sum of the elements in array
    int sum = 0;
    for (int i = 0; i < n; i++)
       sum += arr[i];

    // If sum is odd, there cannot be two subsets with equal sum
    if (sum%2 != 0)
       return false;

    // Find if there is subset with sum equal to half of total sum
    return isSubsetSum (arr, n, sum/2);
}

// Driver program to test above function
int main()
{
  int arr[] = {3, 1, 5, 9, 12};
  int n = sizeof(arr)/sizeof(arr[0]);
  if (findPartiion(arr, n) == true)
     printf("Can be divided into two subsets of equal sum");
  else
     printf("Can not be divided into two subsets of equal sum");
  getchar();
  return 0;
}
 Output: Can be divided into two subsets of equal sum Time Complexity: O(2^n) In worst case, this solution tries two possibilities (whether to include or exclude) for every element. Dynamic Programming Solution The problem can be solved using dynamic programming when the sum of the elements is not too big. We can create a 2D array part[][] of size (sum/2)*(n+1). And we can construct the solution in bottom up manner such that every filled entry has following property 
part[i][j] = true if a subset of {arr[0], arr[1], ..arr[j-1]} has sum 
             equal to i, otherwise false
 
// A Dynamic Programming solution to partition problem
#include <stdio.h>

// Returns true if arr[] can be partitioned in two subsets of
// equal sum, otherwise false
bool findPartiion (int arr[], int n)
{
    int sum = 0;
    int i, j;
  
    // Caculcate sun of all elements
    for (i = 0; i < n; i++)
      sum += arr[i];
    
    if (sum%2 != 0)  
       return false;
  
    bool part[sum/2+1][n+1];
    
    // initialize top row as true
    for (i = 0; i <= n; i++)
      part[0][i] = true;
      
    // initialize leftmost column, except part[0][0], as 0
    for (i = 1; i <= sum/2; i++)
      part[i][0] = false;     
     
     // Fill the partition table in botton up manner 
     for (i = 1; i <= sum/2; i++)  
     {
       for (j = 1; j <= n; j++)  
       {
         part[i][j] = part[i][j-1];
         if (i >= arr[j-1])
           part[i][j] = part[i][j] || part[i - arr[j-1]][j-1];
       }        
     }    
     
    /* // uncomment this part to print table 
     for (i = 0; i <= sum/2; i++)  
     {
       for (j = 0; j <= n; j++)  
          printf ("%4d", part[i][j]);
       printf("\n");
     } */ 
     
     return part[sum/2][n];
}     

// Driver program to test above funtion
int main()
{
  int arr[] = {3, 1, 1, 2, 2, 1};
  int n = sizeof(arr)/sizeof(arr[0]);
  if (findPartiion(arr, n) == true)
     printf("Can be divided into two subsets of equal sum");
  else
     printf("Can not be divided into two subsets of equal sum");
  getchar();
  return 0;
}
 Output: Can be divided into two subsets of equal sum Following diagram shows the values in partition table. The diagram is taken form the wiki page of partition problem. Time Complexity: O(sum*n) Auxiliary Space: O(sum*n) Please note that this solution will not be feasible for arrays with big sum. References: http://en.wikipedia.org/wiki/Partition_problem Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tags: Dynamic Programming Tweet Writing code in comment? Please use ideone.com and share the link here. Rohit Sharma here is the code with time complexity-0(nlog(n)) ================================== algorithm— 1-find sum of array. if odd return false; sum=sum/2; 2.sort array by using any method(quick_sort). 3.apply knapsack or greedy algorithm similar to find sub array with given sum. here is code !! ============== #include #include bool sub_array_sum(int [],int); int main() { int a[100],n,i,sum; printf(“nEnter the value of n :”); scanf(“%d”,&n); printf(“nEnter the elements :n”); for(i=0;i<n;i++) scanf("%d",&a[i]); if(sub_array_sum(a,n) == true) printf("nPartition possible !!"); else printf("nNo partition is possible !!"); return 0; } int compare(const void *a,int const void *b) { return (*(int *)a – *(int *)b); } int findSubArray(int a[], int n, int sum) { /* Initialize curr_sum as value of first element and starting point as 0 */ int curr_sum = a[0], start = 0, i; /* Add elements one by one to curr_sum and if the curr_sum exceeds the sum, then remove starting element */ for (i = 1; i sum && start < i-1) { curr_sum = curr_sum – a[start]; start++; } // If curr_sum becomes equal to sum, then return true if (curr_sum == sum) { printf ("Sum found between indexes %d and %d", start, i-1); return 1; } // Add this element to curr_sum if (i < n) curr_sum = curr_sum + a[i]; } // If we reach here, then no subarray printf("No subarray found"); return 0; } bool sub_array_sum(int a[],int n) { int i,sum=0; for(i=0;i<n;i++) sum += a[i]; if(sum % 2 == 1) return false; qsort(a,n,sizeof(int),compare); printf("nThe array after sorting !!"); for(i=0;i<n;i++) printf("%d ",a[i]); return findSubArray(a,n,sum/2); } prashant here is the naive recursive approach which returns the min differnece detween two partiotins /* int min(int a,int b) { return a>b?b:a; } int fun(int arr[],int low,int high,int s1,int s2) { if(low>high) return s1>s2?(s1-s2):(s2-s1); return min(fun(arr,low+1,high,s1+arr[low],s2),fun(arr,low+1,high,s1,s2+arr[low])); } int main() { int arr[]={3, 1, 5, 9, 12}; int n=sizeof(arr)/sizeof(arr[0]); cout<<fun(arr,0,n-1,0,0)<<" is the min parttiotion,n"; return 0; } */ Aja Huang There is a much faster and simpler solution using STL bitset. https://github.com/swem/UVa-Online-Judge/blob/master/10664.cpp sumit dey Here is the java version of the same problem, it will also print the solution of the subset which has leads to the solution. No need of sorted input and it works for negative solution. The printed solution will print the one of the subset, other subset will be the excluded element.  
/**
 * 
 */


import java.util.LinkedHashMap;
import java.util.Map;

public class PartitionSumSubsetProblem {

	public static class CachedDataAttr {
		int sum;
		int indexOfArray;
		int bfrSumDiff;

		CachedDataAttr(int pSum, int pIndexOfArry, int pAfterSumDiff) {
			this.sum = pSum;
			this.indexOfArray = pIndexOfArry;
			this.bfrSumDiff = pAfterSumDiff;
		}

		@Override
		public boolean equals(Object o) {

			if (o instanceof CachedDataAttr) {
				CachedDataAttr arg = (CachedDataAttr) o;
				this.sum = arg.sum;
				this.indexOfArray = arg.indexOfArray;
			}
			return false;
		}

		public String toString() {
			return "sum =" + this.sum + " :: index = " + (this.indexOfArray + 1)
					+ " :: bfrSumDiff= " + this.bfrSumDiff + "\t";
		}
	}


	/**
	 * @param args
	 */
	public static void main(String[] args) {

		int arr[] = { 5,5,4,3,3};//{ 11, 1, 5, 11, 5, -11, 0, 2 }

		System.out
				.println(sumOfSubsetIsPossible(arr) ? "Solution is possible" : "No subset exists");

	}

	private static boolean sumOfSubsetIsPossible(int[] arr) {

		if (arr == null || arr.length == 0)
			return false;
		int size = arr.length;
		int sum = 0;
		for (int i = 0; i < size; i++)
			sum = sum + arr[i];
		if (sum % 2 == 1)
			return false;
		Map<PartitionSumSubsetProblem.CachedDataAttr, Boolean> CachedData = new LinkedHashMap<PartitionSumSubsetProblem.CachedDataAttr, Boolean>();

		boolean result = mainLogisOfSumOfSubsetIsPossible(arr, sum / 2, size - 1, CachedData);

		System.out.println(CachedData);
		printSolution(CachedData, arr);
		return result;

	}

	private static void printSolution(Map<CachedDataAttr, Boolean> cachedData, int[] arr) {

		int sum = 0;

		for (Map.Entry<CachedDataAttr, Boolean> cachedMap : cachedData.entrySet()) {

			if (sum == cachedMap.getKey().sum && cachedMap.getValue()) {
				// find the next sum value
				if (sum + arr[cachedMap.getKey().indexOfArray] == cachedMap.getKey().bfrSumDiff) {
					sum = sum + arr[cachedMap.getKey().indexOfArray];
					System.out.print(arr[cachedMap.getKey().indexOfArray] + ",");
				}
			}
		}

		System.out.println("\b");

	}

	/**
	 *  This methods contain the main logic for the problem
	 * @param arr
	 * @param sum
	 * @param size
	 * @param cachedData
	 * @return
	 */
	private static boolean mainLogisOfSumOfSubsetIsPossible(int[] arr, int sum, int size,
			Map<CachedDataAttr, Boolean> cachedData) {

		// base cases , when sum==0, we found the solution
		if (sum == 0)
			return true;
		// base case if size <0 && sum!=0, we have not include few elements that
		if (size < 0 && sum != 0)
			return false;
		// base case, if the solution is already computed, return the solution
		PartitionSumSubsetProblem.CachedDataAttr exData = new PartitionSumSubsetProblem.CachedDataAttr(
				sum, size, sum);// excluded
		PartitionSumSubsetProblem.CachedDataAttr inData = new PartitionSumSubsetProblem.CachedDataAttr(
				sum - arr[size], size, sum);// include
		if (cachedData.containsKey(exData))
			return cachedData.get(exData);
		if (cachedData.containsKey(inData))
			return cachedData.get(inData);

		boolean includeSolution = mainLogisOfSumOfSubsetIsPossible(arr, sum - arr[size], size - 1,
				cachedData);
		boolean excludeSolution = includeSolution
				|| mainLogisOfSumOfSubsetIsPossible(arr, sum, size - 1, cachedData);
		cachedData.put(inData, includeSolution);
		if (!includeSolution)
			cachedData.put(exData, excludeSolution);
		return excludeSolution;
	}

}

 Aman Jain if array contain -ve elements too, then this code can work for it too.. sum can be any value.. #include<iostream> using namespace std; int func(int *arr,int n,int sum) { int x=0; int y=0; int i,j; for(i=1;i<=n;i++) { if(arr[i]>=0) { x+=arr[i]; } else { y-=arr[i]; } } if(sum>x||sum<(-y)) { return 0; } int dp[n+1][x+y+1]; for(i=0;i<=n;i++) { for(j= -y+y; j-y<=x ;j++) { if(i==0 && (j-y)==0) { dp[i][j]=1; } else if(i==0 &&(j-y)!=0) { dp[i][j]=0; } else if(i!=0&& (j-y)==0) { dp[i][j]=1; } else { if((j-y)-arr[i]<=x && (j-y)-arr[i]>=(-y)) { dp[i][j]= dp[i-1][j] | dp[i-1][j-arr[i]]; } else { dp[i][j]= dp[i-1][j]; } } } } return(dp[n][sum+y]); } int main() { int t; cin>>t; while(t–) { int n,sum,i; cin>>n; int arr[n+1]; for(i=1;i<=n;i++) { cin>>arr[i]; } cin>>sum; cout<<func(arr,n,sum)<<"\n"; } } anonymous if sum1 = sum2, then what to do? add to which sum? anonymous for this {5, 5, 4, 3, 3} .. ?? abhishek08aug Intelligent  
/* Paste your code here (You may delete these lines if not writing code) */
 googlybhai Solution will work only for +ve numbers. So either we should change the problem statement or change the solution. Siddhartha’s Father What are you son? Blind! Your Array contains 3 elements. anand  

public class PartitionProblem {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int A[] =  {5, 5, 4, 3, 3};
		System.out.println(isSubSet(A, A.length));
	}

	private static boolean isSubSet(int[] A, int length) {
		int i,partialSum,sum = 0;
		
		for(i=0;i<length;i++){
			sum +=A[i];
		}
		if(sum%2 == 1)return false;
		partialSum = sum/2;
		
		qSort(A,length);
		for(i = 0; i < length; i++){
			partialSum -= A[i];
			if(partialSum < 0)
				return false;
			else if(partialSum == 0)
				return true;
		}
		return false;
	}
}
 Patrick nice solution…. thanks kT @ anand, I think your solution will fail for i/p : 3,4,8,9. Please check and sorry if my observation is incorrect. Thanks. Patrick @KT: I modified anand’s code and now it’s working for all cases.  
bool subPartition(int *A, int len){
	int sum=0,partitionSum;
	for(int i=0; i<len;i++){
		sum=sum+A[i];
	}
	if(sum%2==1)
		return false;
	else{
		partitionSum=sum/2;
		qsort(A,len); //sort in decreasing order
		for(int i=0; i<len;i++){
			while(partitionSum<A[i] && i<len){
				i++;
            }
			partitionSum=partitionSum-A[i];
			if(partitionSum<0)
				return false;
			else if(partitionSum==0)
				return true;
		}
		if(partitionSum!=0)
		    return false;   
	}
	
}
 Rahul Singh Patrick, what you are suggesting is a greedy approach. It won’t work for the following test case {2,3,4,5,7,9}. Raja Hi, I would like to know In what cases sum is less than an array element(it might happen if the array contains -ve numbers). // If last element is greater than sum, then ignore it if (arr[n-1] > sum) return isSubsetSum (arr, n-1, sum); Nikhil // If last element is greater than sum, then ignore it if (arr[n-1] > sum) return isSubsetSum (arr, n-1, sum); Regarding this code,I think we should return false as question says we need to divide it into two subsets.If we are ignoring any element,the we will create more than 2 subsets. Please correct me if I am wrong!!! Nikhil // If last element is greater than sum, then ignore it if (arr[n-1] > sum) return isSubsetSum (arr, n-1, sum); Regarding this code,I think we should return false as question says we need to divide it into two subsets.If we are ignoring any element,the we will create more than 2 subsets. Please correct me if I am wrong!!!  
/* Paste your code here (You may delete these lines if not writing code) */
 http://facebook.com Nishant Mittal *can be done by recursion with O(n^2). int32_t check_sum ( int32_t array[] , int32_t i , int32_t sum ) { if (i<max) { check_sum ( array , i+1 , sum ); sum=sum-array[i]; if ( sum ==0 ) return ans=1; check_sum ( array , i+1 , sum ); } } Anonymous im wondering if the condition should be:        
if (i >= arr[j-1])
           part[i][j] = part[i][j-1] || part[i - arr[j-1]][j-1];
 Mayautobot “Please note that this solution will not be feasible for arrays with big sum.” —>What can be the approach for finding solution with large sum? Simpson #include #include #include int compare(const void * a, const void * b) { return ( *(int*)a – *(int*)b ); } int main() { int a[7]; int sum_even ,sum,m,n,i,flag; sum_even=sum=m=flag=0; n=6; for( i=0;i<7;i++) { scanf("%d",&a[i]); } qsort(a,7,sizeof(int),compare); for( i=0;i<7;i++) { printf("%d",a[i]); } for(i=0;i<7;i++) { sum_even+=a[i]; } if(sum_even%2==0) { sum=(sum_even/2); while(m<=n) { if((a[m]+a[n])==sum) { flag=1; break; } if((a[m]+a[n])<sum) m++; else n–; } if(flag==1) printf("possible"); } else printf("not possible"); getch(); return 0; } keshav Plz clearify ur method.  
/* Paste your code here (You may delete these lines if not writing code) */
 Abhinav Priyadarshi i think there is a error in explanation of part[i][j], it should be part[i][j] = true if a subset of {arr[0], arr[1], ..arr[j-1]} has sum equal to **** i *****, otherwise false ‘ Abhinav Priyadarshi ***** are used to highlight. GeeksforGeeks @Abhinav Priyadarshi: Thanks for pointing this out. We have corrected the explanation. Keep it up! Ankit Gupta Hi, I am using a top-down recursive memoization to populate the cache array below. I want to know : 1. Whether following solution is correctly implemented. 2. I don’t see the sub-problems being reused in the cache array so a bottom up approach may be having most of the entries unused (and populated nonethless).  
int arr[] = {3, 1, 1, 2, 2, 1};
int N, S;
int cache[MAXN][MAXSUM];

bool partition(int pos, int sum)
{
    if (sum == S>>1) {
        return true;
    }

    if (pos == N || sum > S>>1) {
        return false;
    }

    if (cache[pos][sum] != -1) {
        return cache[pos][sum];
    }

    cache[pos][sum] = partition(pos+1, sum+arr[pos]) || partition(pos+1, sum);
    return cache[pos][sum];
}

 Ankit Gupta I have initialized cache to -1 and S to total Sum. atul space optimized DP approach :-  

part[0]=1;
for(i=0;i<n;i++)
{
   for(j=sum;j>=arr[i];j--)
   {
        part[j]=part[j] | part[j-arr[i]]
   }
}
if(part[sum])
   printf("\nsubset exists\n");
 atul here sum=Total_Sum/2; penhaunt aap god hain penhaunt aap to chaa gye sir Wayne Condn- sum should be divisible by 2; We know the “sum” right !!! sum = sum of all the elements in array Cant we use sum of subset problem (knapsack) to find out the subset which has “sum/2″ value. it would become so easy because we know that the rest of elements sum is “sum/2″,  
/* Paste your code here (You may delete these lines if not writing code) */
 sonal I think that is what the given DP code is doing Wayne Oops .. My Bad … But why are they using 2D array …. I guess 1D array of SUM/2 is enough. ???  
/* Paste your code here (You may delete these lines if not writing code) */
 sindabad  
Sort the data in descending order
for(i=1 to n)
{
if(sum(set1) > sum(set2))
include the number in set2
else
if(sum(set2) > sum(set1))
include the number in set1
else
return 1;
}
retunr 0;
 kartik this will not work for {5, 5, 4, 3, 3} Venki How is different from fair work load problem? http://topcoder.bgcoder.com/print.php?id=383 Reference: The Algorithm Design Manual by Skiena. Ankit Gupta Hi, thanks for sharing the problem. I can think of a recursive backtracking solution (do not know if it’s right) :  
If workers == 0
    return 0
else
    calculate all possible partition(folders, N, sum/N) say newfolders
    // sum is total count of the elements in folders and N is #workers.
    foreach newfolders
        max = maximum of (sum(folders)-sum(newfolders), getMostWork(newfolders, workers-1))
                and max
    return max
 Can you hint at a solution ? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
