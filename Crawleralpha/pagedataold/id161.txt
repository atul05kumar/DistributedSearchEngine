Dynamic Programming | Set 2 (Optimal Substructure Property) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Dynamic Programming | Set 2 (Optimal Substructure Property) As we discussed in Set 1, following are the two main properties of a problem that suggest that the given problem can be solved using Dynamic programming. 1) Overlapping Subproblems 2) Optimal Substructure We have already discussed Overlapping Subproblem property in the Set 1. Let us discuss Optimal Substructure property here. 2) Optimal Substructure: A given problems has Optimal Substructure Property if optimal solution of the given problem can be obtained by using optimal solutions of its subproblems. For example the shortest path problem has following optimal substructure property: If a node x lies in the shortest path from a source node u to destination node v then the shortest path from u to v is combination of shortest path from u to x and shortest path from x to v. The standard All Pair Shortest Path algorithms like Floyd–Warshall and Bellman–Ford are typical examples of Dynamic Programming. On the other hand the Longest path problem doesn’t have the Optimal Substructure property. Here by Longest Path we mean longest simple path (path without cycle) between two nodes. Consider the following unweighted graph given in the CLRS book. There are two longest paths from q to t: q -> r ->t and q ->s->t. Unlike shortest paths, these longest paths do not have the optimal substructure property. For example, the longest path q->r->t is not a combination of longest path from q to r and longest path from r to t, because the longest path from q to r is q->s->t->r. We will be covering some example problems in future posts on Dynamic Programming. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. References: http://en.wikipedia.org/wiki/Optimal_substructure CLRS book           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: Dynamic Programming Tweet Writing code in comment? Please use ideone.com and share the link here. shiwakant.bharti Example from wiki where the substructure may not be optimal. http://en.wikipedia.org/wiki/Optimal_substructure Least-cost airline fare. (Using on online flight search, we will frequently find that the cheapest flight from airport A to airport B involves a single connection through airport C, but the cheapest flight from airport A to airport C involves a connection through some other airport D.) SDK Please can somebody clarify the difference between Greedy and Dp..solutions.. i.e how to decide which technique to use when by providing examples. I think that would be nice post Thank u Anand Here is blog that has all solved DP problem frequently asked in interviews. http://anandtechblog.blogspot.com/2011/01/amazon-question-dynamic-programming.html tk As far as I know, most of the optimization problems have optimal substructure property. It is mainly Overlapping subproblem property that helps us in deciding to choose DP. Does anyone know any example optimization problem – other than the longest path – that doesn’t have the optimal substructure property? shiwakant.bharti Example from wiki where the substructure may not be optimal. http://en.wikipedia.org/wiki/Optimal_substructure Least-cost airline fare. (Using on online flight search, we will frequently find that the cheapest flight from airport A to airport B involves a single connection through airport C, but the cheapest flight from airport A to airport C involves a connection through some other airport D.) http://www.linkedin.com/in/ramanawithu Venki The “Optimal Substructure Property” also called as “principle of optimality”. In order to apply DP, solution to the problem should satisfy principle of optimality. However, determining the Principle of Optimality is little difficult task, hope some of the upcoming examples will clarify. For example finding optimal solution to one sub-instance may prevent choosing optimal solution to another instance, i.e. the optimal instances are not independent. rocky Nice Post! What about the Dijekstra Algorithm. Dijekstra also follow optimal substructure property. Isn’t it a DP algo? Shiraj Pokharel No its greedy my dear. Jagat In case of Disjkstra, you evaluate a specific decision that moves you directly towards the optimal solution, and that is the property of a greedy algorithm. On the other hand, when using DP, you’ve no idea what the optimal solution is till you’ve evaluated the optimal solution to all the possible sub problems. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
