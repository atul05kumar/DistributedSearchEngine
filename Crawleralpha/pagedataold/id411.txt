Find position of the only set bit - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find position of the only set bit Given a number having only one ‘1’ and all other ’0’s in its binary representation, find position of the only set bit. Source: Microsoft Interview | 18 The idea is to start from rightmost bit and one by one check value of every bit. Following is detailed algorithm. 1) If number is power of two then and then only its binary representation contains only one ‘1’. That’s why check whether given number is power of 2 or not. If given number is not power of 2, then print error message and exit. 2) Initialize two variables; i = 1 (for looping) and pos = 1 (to find position of set bit) 3) Inside loop, do bitwise AND of i and number ‘N’. If value of this operation is true, then “pos” bit is set, so break the loop and return position. Otherwise, increment “pos” by 1 and left shift i by 1 and repeat the procedure. 
// C program to find position of only set bit in a given number
#include <stdio.h>

// A utility function to check whether n is power of 2 or not. See http://goo.gl/17Arj
int isPowerOfTwo(unsigned n)
{  return n && (! (n & (n-1)) ); }

// Returns position of the only set bit in 'n'
int findPosition(unsigned n)
{
    if (!isPowerOfTwo(n))
        return -1;

    unsigned i = 1, pos = 1;

    // Iterate through bits of n till we find a set bit
    // i&n will be non-zero only when 'i' and 'n' have a set bit
    // at same position
    while (!(i & n))
    {
        // Unset current bit and set the next bit in 'i'
        i = i << 1;

        // increment position
        ++pos;
    }

    return pos;
}

// Driver program to test above function
int main(void)
{
    int n = 16;
    int pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 12;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 128;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    return 0;
}
 Output: n = 16, Position 5
n = 12, Invalid number
n = 128, Position 8 Following is another method for this problem. The idea is to one by one right shift the set bit of given number ‘n’ until ‘n’ becomes 0. Count how many times we shifted to make ‘n’ zero. The final count is position of the set bit. 
// C program to find position of only set bit in a given number
#include <stdio.h>

// A utility function to check whether n is power of 2 or not
int isPowerOfTwo(unsigned n)
{  return n && (! (n & (n-1)) ); }

// Returns position of the only set bit in 'n'
int findPosition(unsigned n)
{
    if (!isPowerOfTwo(n))
        return -1;

    unsigned count = 0;

    // One by one move the only set bit to right till it reaches end
    while (n)
    {
        n = n >> 1;

        // increment count of shifts
        ++count;
    }

    return count;
}

// Driver program to test above function
int main(void)
{
    int n = 0;
    int pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 12;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 128;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    return 0;
}
 Output: n = 0, Invalid number
n = 12, Invalid number
n = 128, Position 8 We can also use log base 2 to find the position. Thanks to Arunkumar for suggesting this solution. 
#include <stdio.h>

unsigned int Log2n(unsigned int n)
{
   return (n > 1)? 1 + Log2n(n/2): 0;
}

int isPowerOfTwo(unsigned n)
{
	return n && (! (n & (n-1)) );
}

int findPosition(unsigned n)
{
	if (!isPowerOfTwo(n))
		return -1;
	return Log2n(n) + 1;
}

// Driver program to test above function
int main(void)
{
    int n = 0;
    int pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 12;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    n = 128;
    pos = findPosition(n);
    (pos == -1)? printf("n = %d, Invalid number\n", n):
                 printf("n = %d, Position %d \n", n, pos);

    return 0;
}
 Output: n = 0, Invalid number
n = 12, Invalid number
n = 128, Position 8 This article is compiled by Narendra Kangralkar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Check if binary representation of a number is palindrome Swap two nibbles in a byte How to turn off a particular bit in a number? Check if a number is multiple of 9 using bitwise operators How to swap two numbers without using a temporary variable? Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) Swap all odd and even bits Add two bit strings Tweet Writing code in comment? Please use ideone.com and share the link here. Ravi Kumar this question is same as finding whether number of multiple of 2 or not check(int n) { return n&!(n&(n-1)) ; } Hardhik Mallipeddi Are you sure whether it was for finding whether a number is a multiple of 2 or not, because to find whether a number is a multiple of 2 or not you can just do n%2 and check if it’s 0 or 1. If it were for finding whether a number is a power of 2, you can do n&(n-1) and check if it were 0 or not, if it were 0 it implies it is a power of two and not otherwise. Prashanth S cout<<x&-x ; asunel This problem is equivalent to finding the rightmost set bit…. maruti kutre Check for this value int n =1048576;// (int) Math.pow(2, 20); binary way fails but other one still works atiqwhiz I couldn’t find any use of last method as Finding Log is inefficient … so i did it by using Binary Search…. Here is my program. #include using namespace std; int PowerofTwo(long int n) { return n&&(!(n&n-1)); } int setBit(long int n) { if(!PowerofTwo(n)) return -1; long int mid,left,right; left=0,right=31; long int k=1; int temp=1; while(k) { mid=(left+right)/2; k=1< if(k { left=mid; } else if(k>n) { right=mid; } else { return mid+1; } } return 0; } int main(void) { long int N=3; cout< return 0; } Robin40 this is a O(1) solution:  
#include <stdio.h>

inline bool isPowerOfTwo(unsigned int x)
{
    return x &&! (x & (x - 1));
}

int findPosition(unsigned int x)
{
    static const int hashPos[37] = {0, 0, 1, 26, 2, 23, 27, 0, 3, 16, 24, 30, 28, 11, 0, 13, 4, 7, 17, 0, 25, 22, 31, 15, 29, 10, 12, 6, 0, 21, 14, 9, 5, 20, 8, 19, 18};

    if (isPowerOfTwo(x))
        return hashPos[x % 37];

    return -1;
}

// TEST
int main()
{
    for (int i = 0; i < 32; i++)
        printf("%d\n", findPosition((unsigned)(1 << i)));

    printf("%d\n", findPosition(40));
}
 Akil how to get the hashpos[] array value punjabi kudi  
/* 
// check out this sol....no recursive call

#include<stdio.h>
#include<math.h>

int findpos(int n){
    if(n&&(n&(n-1)))
    return -1;

    return log2(n);
}
int main(){
    int a=31;
    a=findpos(a);
    if(a==-1)
    printf("not possible\n");
    else
    printf("%d\n",a);
}

 */
 abhishek08aug And here comes the recursive solution.  
#include<stdio.h>
int find_position(int num, int pos) {
  if(num%2!=0 && num!=1) {
    return -1;
  }
  if(num==1) {
    return pos;
  } else {
    return find_position(num>>1, ++pos);
  }
}

int main() {
  printf("set bit position in %d is %d\n", 13, find_position(13,1));
  printf("set bit position in %d is %d\n", 1, find_position(1,1));
  printf("set bit position in %d is %d\n", 8, find_position(8,1));
  printf("set bit position in %d is %d\n", 16, find_position(16,1));
  return 0;
}
 set bit position in 13 is -1 set bit position in 1 is 1 set bit position in 8 is 4 set bit position in 16 is 5 arena_zp Your algorithm can be improved to be O(log log N ). In short, the successful of x|(2^1), x|(2^2), x|(2^3),….. is monotone! http://avidullu.wordpress.com Avi You can skip counting a lot of 1s by using the fact that the number is a power of 2. The code below takes 6 steps to do it with just one if condition in the function.  
#include<iostream>
using namespace std;
bool CheckIfMoreThanAndReduce(unsigned long long int* n, int shift) {
  if ((1UL<<shift) <= *n) {
    (*n) >>= shift;
    return true;
  } else {
    return false;
  }
}
int main() {
  unsigned long long int n;
  cin >> n;
  int count = 0;
  for (unsigned int i = 32; i > 0 ; i/=2) {
    if (CheckIfMoreThanAndReduce(&n, i)) {
      count += i;
    }
  }
  cout << count << "th bit is set." << endl;
  return 0;
}
 ammy i think,a better solution is possible The given solutions are o(logn) and i think the below solution may work in log(logn)  
/* Paste your code here (You may delete these lines if not writing code) */
#include<stdio.h>
int main()
{
    unsigned int n,i,j;
    printf("enter the number::\n");
    scanf("%u",&n);
    i=16,j=8;
    if(n&(n-1))
    {
        printf("number has more than one sit bit\n");
        return 0;
    }
    while(j>0)
    {
        if(n>(1<<(i-1)))
        i+=j;
        else if(n<(1<<(i-1)))
        i-=j;
        else
        break;
        j/=2;
    }
    printf("reqd position=%d\n",i-1);
    return 0;
}

 jordan I did not get the question. Please clarify the question, I needed to open this page and to look at the answer. atul @geeksforgeeks: you below previous post will solve this problem after checking power of 2 condition http://www.geeksforgeeks.org/position-of-rightmost-set-bit/  
/* Paste your code here (You may delete these lines if not writing code) */
 Sreenivas Doosa Nice approaches duude.. I am adding one point here if n is singed integer. findPosition() method will be as follows…  
int findPosition(int n) 
{
	
	if(n == INT_MIN)
		return true;
		
	if(!isPowerOfTwo(n))
		return false;
		
	...
	...
}

// And the powerOfTwo() will change like
bool powerOfTwo(int n)
{
	if(n <= 0)
		return false;
		
	return (n & (n - 1)) == 0 ? true : false;
}
   

 Rupesh Log(x)/Log(2)  
/* Paste your code here (You may delete these lines if not writing code) */
 arunkumar267 Hi.I have an another solution for this problem.First check if the number is power of two or not,if it is a power then return then log value of the number(base 2) it will give the correct answer Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
