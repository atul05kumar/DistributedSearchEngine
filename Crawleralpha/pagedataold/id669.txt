Tree Isomorphism Problem - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Tree Isomorphism Problem Write a function to detect if two trees are isomorphic. Two trees are called isomorphic if one of them can be obtained from other by a series of flips, i.e. by swapping left and right children of a number of nodes. Any number of nodes at any level can have their children swapped. Two empty trees are isomorphic. For example, following two trees are isomorphic with following sub-trees flipped: 2 and 3, NULL and 6, 7 and 8. We simultaneously traverse both trees. Let the current internal nodes of two trees being traversed be n1 and n2 respectively. There are following two conditions for subtrees rooted with n1 and n2 to be isomorphic. 1) Data of n1 and n2 is same. 2) One of the following two is true for children of n1 and n2 ……a) Left child of n1 is isomorphic to left child of n2 and right child of n1 is isomorphic to right child of n2. ……b) Left child of n1 is isomorphic to right child of n2 and right child of n1 is isomorphic to left child of n2. 
// A C++ program to check if two given trees are isomorphic
#include <iostream>
using namespace std;

/* A binary tree node has data, pointer to left and right children */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/* Given a binary tree, print its nodes in reverse level order */
bool isIsomorphic(node* n1, node *n2)
{
 // Both roots are NULL, trees isomorphic by definition
 if (n1 == NULL && n2 == NULL)
    return true;

 // Exactly one of the n1 and n2 is NULL, trees not isomorphic
 if (n1 == NULL || n2 == NULL)
    return false;

 if (n1->data != n2->data)
    return false;

 // There are two possible cases for n1 and n2 to be isomorphic
 // Case 1: The subtrees rooted at these nodes have NOT been "Flipped".
 // Both of these subtrees have to be isomorphic, hence the &&
 // Case 2: The subtrees rooted at these nodes have been "Flipped"
 return 
 (isIsomorphic(n1->left,n2->left) && isIsomorphic(n1->right,n2->right))||
 (isIsomorphic(n1->left,n2->right) && isIsomorphic(n1->right,n2->left));
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
node* newNode(int data)
{
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;

    return (temp);
}

/* Driver program to test above functions*/
int main()
{
    // Let us create trees shown in above diagram
    struct node *n1 = newNode(1);
    n1->left        = newNode(2);
    n1->right       = newNode(3);
    n1->left->left  = newNode(4);
    n1->left->right = newNode(5);
    n1->right->left  = newNode(6);
    n1->left->right->left = newNode(7);
    n1->left->right->right = newNode(8);

    struct node *n2 = newNode(1);
    n2->left         = newNode(3);
    n2->right        = newNode(2);
    n2->right->left   = newNode(4);
    n2->right->right   = newNode(5);
    n2->left->right   = newNode(6);
    n2->right->right->left = newNode(8);
    n2->right->right->right = newNode(7);

    if (isIsomorphic(n1, n2) == true)
       cout << "Yes";
    else
      cout << "No";

    return 0;
}
 Output: Yes Time Complexity: The above solution does a traversal of both trees. So time complexity is O(m + n) where m and n are number of nodes in given trees. This article is contributed by Ciphe. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. curiousCoder @geeksforgeeks:disqus i am not sure abt its complexity but , how abt 1) A level order traversal of both the trees followed by 2)sorting of each level’s nodes, for both the trees, if yields same result implies, trees are isomorphic.. In shaa Allah.. and dis wud take O(N) time for level order, followed by O(h*xlogx) for each level sorting, (h=number of levels, x=max no. of nodes in any level) it will use auxiliary space of O(m+n) sumit how the time complexity of above solution is O(m+n) in worst case… ? we traverse tree for every possible combination sumit plz someone explain about its time complexity … thanks… GeometryMonkey I need to check this, but I think the algorithm is O(n^2), not O(n+m). Let T(n) be the recurrence for the time complexity on a tree with n nodes. Assume the trees are complete and both have n nodes. The three if statements require O(1) time and the return statement calls isIsomorphic four times, each on a tree of size n/2. Thus T(n) = 4 T(n/2) + O(1). This recurrence is equal to Sum_{i=1}^{log n} 4^i, which is roughly 4^{log n}, which is equal to n^2 and thus T(n) = O(n^2). prakash well said.this exactly what i think. annonymoe or if taking into the account the number of comparisons, each node will be compared with all its siblings so if n!=m return false else it will be 2^(logn-1) 2^(log n – 1) comparisons in the worst case the whole breath for the last level which is approximately O(n^2) smrite complexity of the code is o(m+n) .. can you tell me a case where two tress are isomorphic with different number of elements ? GeometryMonkey Two trees cannot be isomorphic with a different number of elements. Amit Bgl wow code http://. santosh cant we do it using traversals algo! i mean, call traversal for each node(recursive), it will start from leaf node, then store the traversal into an array excluding the root i.e. call on 5, then store 7,8 in array instead of 7,5,8 and do same for other tree, if they are same, it is isomorph! Dijil This print codes “YES” even if the tree is not isomorphic GeometryMonkey Example? Name Looks like good solution.  
/* Paste your code here (You may delete these lines if not writing code) */
 rohit There is an another efficient way of doing it. I solved this problem by array representation. Store both the trees in two different arrays (following the rules). Then start searching from back of the array. i—> /* Iterator of array1 */ j—> /* iterator of array2 */ First check if array2[j]==array1[i] anywhere theres a hit! then check if array1[i/2] has to be equal in case of array2[j/2]. Basic idea is that root node has to be equal.  
/* Paste your code here (You may delete these lines if not writing code) */
  
/* Paste your code here (You may delete these lines if not writing code) */
 http://piyush.co.nf kk i don’t think it is O(n+m)… it is O(2^(m+n)) because at each node you have to choices (l-l ,r-r) or (l-r, r-l) l-l means in both the tree we go to left. Rahul @kk But the code covers this case of (l-l && r-r ) || (l-r && r-l) in a single pass Look carefully at this line : return (isIsomorphic(n1->left,n2->left) && isIsomorphic(n1->right,n2->right))|| (isIsomorphic(n1->left,n2->right) && isIsomorphic(n1->right,n2->left)); its a single return covering the two possibilities Maddy it still calls the recursion twice .. even i think it’ll be O(2^(m+n)) .. at every node you have a choice whether to compare its child with the same orientation or flip it. I think it be optimized to O(m+n) but this one runs in exponential abhishek08aug Intelligent GeometryMonkey Apparently one of the most important applications is natural language processing. A sentence (say in English) is parsed into a tree structure, and tree isomorphism is used to figure out what type of sentence it is and what parts of speech its words are. Ref: http://stackoverflow.com/questions/10489495/graph-how-do-i-use-tree-isomorphic-to-solve-language-pattern-matching GeometryMonkey Apparently one of the most important applications is natural language processing. A sentence (say in English) is parsed into a tree structure, and tree isomorphism is used to figure out what type of sentence it is and what parts of speech its words are. Ref: http://stackoverflow.com/questions/10489495/graph-how-do-i-use-tree-isomorphic-to-solve-language-pattern-matching Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
