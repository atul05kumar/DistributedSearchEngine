Program for Fibonacci numbers - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Program for Fibonacci numbers The Fibonacci numbers are the numbers in the following integer sequence. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 141, …….. In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation with seed values Write a function int fib(int n) that returns . For example, if n = 0, then fib() should return 0. If n = 1, then it should return 1. For n > 1, it should return Following are different methods to get the nth Fibonacci number. Method 1 ( Use recursion ) A simple method that is a direct recusrive implementation mathematical recurance relation given above. 
#include<stdio.h>
int fib(int n)
{
   if (n <= 1)
      return n;
   return fib(n-1) + fib(n-2);
}

int main ()
{
  int n = 9;
  printf("%d", fib(n));
  getchar();
  return 0;
}
 Time Complexity: T(n) = T(n-1) + T(n-2) which is exponential. We can observe that this implementation does a lot of repeated work (see the following recursion tree). So this is a bad implementation for nth Fibonacci number. 
                         fib(5)   
                     /             \     
               fib(4)                fib(3)   
             /      \                /     \
         fib(3)      fib(2)         fib(2)    fib(1)
        /     \        /    \       /    \  
  fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)
  /    \
fib(1) fib(0)
 Extra Space: O(n) if we consider the fuinction call stack size, otherwise O(1). Method 2 ( Use Dynamic Programming ) We can avoid the repeated work done is the method 1 by storing the Fibonacci numbers calculated so far. 
#include<stdio.h>

int fib(int n)
{
  /* Declare an array to store fibonacci numbers. */
  int f[n+1];
  int i;

  /* 0th and 1st number of the series are 0 and 1*/
  f[0] = 0;
  f[1] = 1;

  for (i = 2; i <= n; i++)
  {
      /* Add the previous 2 numbers in the series
         and store it */
      f[i] = f[i-1] + f[i-2];
  }

  return f[n];
}

int main ()
{
  int n = 9;
  printf("%d", fib(n));
  getchar();
  return 0;
}
 Time Complexity: O(n) Extra Space: O(n) Method 3 ( Space Otimized Method 2 ) We can optimize the space used in method 2 by storing the previous two numbers only because that is all we need to get the next Fibannaci number in series. 
#include<stdio.h>
int fib(int n)
{
  int a = 0, b = 1, c, i;
  if( n == 0)
    return a;
  for (i = 2; i <= n; i++)
  {
     c = a + b;
     a = b;
     b = c;
  }
  return b;
}

int main ()
{
  int n = 9;
  printf("%d", fib(n));
  getchar();
  return 0;
}
 Time Complexity: O(n) Extra Space: O(1) Method 4 ( Using power of the matrix {{1,1},{1,0}} ) This another O(n) which relies on the fact that if we n times multiply the matrix M = {{1,1},{1,0}} to itself (in other words calculate power(M, n )), then we get the (n+1)th Fibonacci number as the element at row and column (0, 0) in the resultant matrix. The matrix representation gives the following closed expression for the Fibonacci numbers: 
#include <stdio.h>

/* Helper function that multiplies 2 matricies F and M of size 2*2, and
  puts the multiplication result back to F[][] */
void multiply(int F[2][2], int M[2][2]);

/* Helper function that calculates F[][] raise to the power n and puts the
  result in F[][]
  Note that this function is desinged only for fib() and won't work as general
  power function */
void power(int F[2][2], int n);

int fib(int n)
{
  int F[2][2] = {{1,1},{1,0}};
  if (n == 0)
      return 0;
  power(F, n-1);

  return F[0][0];
}

void multiply(int F[2][2], int M[2][2])
{
  int x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  int y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  int z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  int w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];

  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

void power(int F[2][2], int n)
{
  int i;
  int M[2][2] = {{1,1},{1,0}};

  // n - 1 times multiply the matrix to {{1,0},{0,1}}
  for (i = 2; i <= n; i++)
      multiply(F, M);
}

/* Driver program to test above function */
int main()
{
  int n = 9;
  printf("%d", fib(n));
  getchar();
  return 0;
}
 Time Complexity: O(n) Extra Space: O(1) Method 5 ( Optimized Method 4 ) The method 4 can be optimized to work in O(Logn) time complexity. We can do recursive multiplication to get power(M, n) in the prevous method (Similar to the optimization done in this post) 
#include <stdio.h>

void multiply(int F[2][2], int M[2][2]);

void power(int F[2][2], int n);

/* function that returns nth Fibonacci number */
int fib(int n)
{
  int F[2][2] = {{1,1},{1,0}};
  if (n == 0)
    return 0;
  power(F, n-1);
  return F[0][0];
}

/* Optimized version of power() in method 4 */
void power(int F[2][2], int n)
{
  if( n == 0 || n == 1)
      return;
  int M[2][2] = {{1,1},{1,0}};

  power(F, n/2);
  multiply(F, F);

  if (n%2 != 0)
     multiply(F, M);
}

void multiply(int F[2][2], int M[2][2])
{
  int x =  F[0][0]*M[0][0] + F[0][1]*M[1][0];
  int y =  F[0][0]*M[0][1] + F[0][1]*M[1][1];
  int z =  F[1][0]*M[0][0] + F[1][1]*M[1][0];
  int w =  F[1][0]*M[0][1] + F[1][1]*M[1][1];

  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

/* Driver program to test above function */
int main()
{
  int n = 9;
  printf("%d", fib(9));
  getchar();
  return 0;
}
 Time Complexity: O(Logn) Extra Space: O(Logn) if we consider the function call stack size, otherwise O(1). Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem. References: http://en.wikipedia.org/wiki/Fibonacci_number http://www.ics.uci.edu/~eppstein/161/960109.html           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: Dynamic Programming, MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. Pegasi The 12th fib number is 144 apparently s.a. can the last method be used to print the fibonacci series i.e. in (log n) time ? if so, how? Pegasi Yes the recursion does it in O(log n) time. Here is an iterative power function: void power(int F[2][2], int n) { int P[2][2] = {{1,1},{1,0}}; if (n % 2 != 0) multiply(P, F); while (n > 0) { n /= 2; multiply(F, F); } } s.a. can the last method be used to print the fibonacci series i.e. in (nlog n) time ? if so, how? J Reyes In Java public static long fib(int n) { if(n == 0) { return n; } n = n – 1; BigDecimal eigen1 = new BigDecimal(“-.61803398875″); BigDecimal eigen2 = new BigDecimal(“1.61803398875″); BigDecimal det = new BigDecimal(“-.4472135955″ ); BigDecimal fib = eigen1.pow(n+1).subtract(eigen2.pow(n+1)).multiply(det); return fib.longValue(); } A Friend from hiddle leaf comment section sucks cant write while loop A Friend from hiddle leaf Comment section sucks concept- int t0=1; it t1=1; cout<<t0<<endl; while(t1<20000) { cout<<t1<<endl; int temp = t1; t1=to+t1; t0=t1; } A Friend from hiddle leaf //Take this losers, will run directly in Dev C++ without any change //THIS-IS-NOOB #include #include using namespace std; int main() { int maxRange; cout<>endl; cout<>maxRange; int to = 1; int t1= 1; cout<<t0<<endl; while(t1 < maxRange) { cout<<t1<<endl; int temp = t1; t1= t0 + t1; t0 = temp; } getch(); return 0; } A Friend from hiddle leaf #include #include using namespace std; int main() { int maxRange; cout<<"Hi there!"<<endl; cout<>maxRange; int t0 = 1; int t1 = 1; cout<<t0<<endl; while(t1 < maxRange) { cout<<t1<<endl; int temp = t1; t1 = t0 + t1; t0 = temp; } getch(); return 0; } //There was a problem with website text formatting A Friend from hiddle leaf //Take this losers, will run without any change in Dev C++ //THIS-IS-NOOB #include #include using namespace std; int main() { int maxRange; cout<<"Hi there!"<<endl; cout<>maxRange; int t0 = 1; int t1 = 1; cout<<t0<<endl; while(t1 < maxRange) { cout<<t1<<endl; int temp = t1; t1 = t0 + t1; t0 = temp; } getch(); return 0; } Karim well there is another way, is to find where do we use fibonnaci, in the golden number. so here is the code. phi=(1+sqrt(5))/2 fib(n) = floor( phi^n/sqrt(5) +1/2) Sidhant Phi is irrational…so while coding u cant get it accurate enough..due to which you cant generate Fibonacci numbers accurately aditya plz sum1 post the solution of making program of fibonacci series using golden ratio and it should not be recrsive. Ronny @GeeksforGeeks In method 4 statement and its description the fibonacci matrix is expressed as {{1,1},{0,1}}, whereas in the program follwing the description and the method 5 uses fibonacci matrix as {{1,1},{1,0}}. there is a typo kindly update the post GeeksforGeeks Thanks for pointing this out. We have corrected the typo. Ronny @GeeksforGeeks There is still a typo in the description of the method 4.(only header has been corrected, description still needs to be corrected) GeeksforGeeks Thanks Ronny, we have corrected it now. Priyanka What’s the use of extra matrix M here when it’s same as F. We can use F only.  
/* Paste your code here (You may delete these lines if not writing code) */
 bohemia void multiply(int F[2][2], int M[2][2]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } Maybe because in the above function , The Matrix F might have been modified by multiplication e.g power(F,n/2) , and obviously we need F*{{1,1},{1,0}} IF n doesn’t happen to be even . Hence need for seperate {{1,1},{1,0}} as M ..Isn’t it? http://www.fansonnote.com Rio Eduardo How about this one? http://www.fansonnote.com/2012/01/fibonacci-in-c/ Hope it will help pratheba // source code c++ double fib1(int n) { double Phi = 1.618f; double f = (std::pow(double(Phi),double(n)) – ( std::pow(double(-Phi),double(-n)))) / sqrt(double(5)); int d = std::fmod(f,(double)1)* 10; if( d >=5) return std::ceil(f); else return std::floor(f); } int main() { int f1 = fib1(8); std::cout << f1 << std::endl; } pratheba Fib(n) = (Phi^n – (-(Phi))^(-n))/(sqrt(5)) Phi = 1.618 … (golden ratio ) http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibformproof.html Sameer023 Program making use of the below observation runs in O(log n) time (Concept given in RG Droney’s book) f(2n) = f(n)*f(n)+f(n+1)*f(n+1) f(2n+1) = 2f(n)*f(n+1)+ f(n+1)*f(n+1) Below C code is tested successfully. Notation: f(1) = 0; f(2) = 1; f(3) = 1; …. and so on  

#include<stdio.h>
#include<math.h>

main() {


int n, bit_seq, set_bit, f1, f2, f3,f4, count=0;

printf("Assuming the fibbonoci numbers start at index 1 \n");
printf("Enter a number: ");
scanf("%d", &n);

bit_seq = 0;
set_bit = 1;


while(n>1) {

count += 1;
    
    if(n%2) {
            bit_seq = bit_seq ^ set_bit;            
            }       
        
     n = n/2;
     
          
  if(n>1)   set_bit =  set_bit << 1;
  
    }
   
  f3 = 0;
  f4 = 1;
  
 while (count > 0) {
 
  f1 = f3;
  f2 = f4;
             
if(bit_seq & set_bit) {
     
     f3 = 2 * f1 * f2 + f2 * f2;
     f4 = f2 * f2 + ((f1 + f2) * (f1 + f2));

     
     } else {
            
     f3 = f1*f1 + f2*f2;
     f4 = 2*f1*f2 + f2*f2;       
            
            }
            
        

  set_bit =  set_bit >> 1;
  count--;
  
  }
  
  printf("\n The fibbonoci number is: %d", f3);
  
getch();

}

 Nishant there is a typo at the second line 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 141.. the last number should be 144. atul please correct the description. you hav used m[][]={{1,0},{0,1}); in the explantion. but code is using m[][]={{1,1},{1,0}}  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks @atul: Thanks for pointing this out. We have corrected the matrix in explanation. iceman you didn’t need temp  
#include <stdio.h>
int power(int n,int m){
	if(m==0)
		return 1;
	else if(m&1){
		return power(n*n,(m-1)/2)*n;
	}
	else
		return power(n*n, m/2);
}
int main(int argc, char *argv[]){
	int n,m;
	while (scanf("%d%d", &n,&m)!=EOF) {
		printf("%d\n", power(n, m));
	}
	return 0;
}
 GeeksforGeeks @Bhaskar: Thanks for suggesting a new method. We will test this method and add it to the original post. Bhaskar O(logn) code for computing fib(n)  

#include <stdio.h>


long int fib(long int n) {

	long int a=1, b=0, p=0, q=1, prev_a, prev_p = 0;
	while(n>0) {
		if (n%2 == 0) {
			prev_p = p;
			p = p*p + q*q;
			q = 2*prev_p*q + q*q;
			n /= 2;
		} else {
			prev_a = a;
			a = b*q + a*q + a*p;
			b = b*p + prev_a*q;
			n -= 1;
		}
	}
	return b;
}
int main(int argc, char **argv) {

	long int n;

	scanf("%ld", &n);
	printf("%ld", fib(n));
        return 0;

}
 Reference: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19 Bhaskar Another O(logn) :  

#include <stdio.h>

long int fib(long int n) {
	
	long int a=1, b=0, p=0, q=1, prev_a, prev_p = 0;
	while(n>0) {
		if (n%2 == 0) {
			prev_p = p;
			p = p*p + q*q;
			q = 2*prev_p*q + q*q;
			n /= 2;
		} else {
			prev_a = a;
			a = b*q + a*q + a*p;
			b = b*p + prev_a*q;
			n -= 1;
		}
	}
	return b;
}
int main(int argc, char **argv) {
	long int n;
	scanf("%ld", &n);
	printf("%ld", fib(n));
        return 0;
}

 Reference: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19 jia In Method 3 : one variable can be reduced in following way…… int fib(int n) { int a = 0, b = 1, i; if( n == 0) return a; for (i = 2; i <= n; i++) { b=a+b; a=b-a; } return b; } int main () { int n = 4; printf("%d", fib(n)); getchar(); return 0; } mohan f(2n) = f(n-1)*f(n)+f(n)*f(n+1) f(2n+1) = f(n)*f(n)+f(n+1)*f(n+1) so we can do this by log n with out any matrix multiplication Algoseekar @geksforgeeks, venki can you prove mathematically that 5th method is Log(N) Algoseekar i mean time complexity is O(logn)..how its comes Algoseekar @sandeep,@ vanki,geeksforgeek..guys can you explain how complexity of 5th last methos is O(logn) Sandeep @Algoseeker: Following is the recurrance relation for method 5. T(n) = T(n/2) + O(1) O(1) is there in the above expression because matrix multiplication for 2×2 matricies takes constant time. This is a standard Binary Search Recurrance and solution of this recurrance is O(Logn) Algoseekar @sandeep can u explain what actual optimization we are doing & wher whets the need to optimization at which point..???? http://androidshashank.blogspot.com wgpshashank @AlgoSeekar , Dear Algoseekar Please Have Close Look How Complexity is Log(n) & Why we are doing the optimization ..this approach will struck in ur mind how to approach for such question We all know the Fibonacci recurrence as F(n+1) = F(n) + F(n-1) but we can represent this in the form a matrix as shown below: Look at the matrix A = [ [ 1 1 ] [ 1 0 ] ] . Multiplying A with [ F(n) F(n-1) ] gives us [ F(n+1) F(n) ] , so we say that A* [ F(n) F(n-1) ] = [ F(n+1) F(n) ] start with [ F(1) F(0) ] , multiplying it with A gives us [ F(2) F(1) ]; again multiplying [ F(2) F(1) ] with A gives us [ F(3) F(2) ] and so on… A* [ F(1) F(0) ] = [ F(2) F(1) ] A* [ F(2) F(1) ] = [ F(3) F(2) ] = A^2 * [ F(1) F(0) ] A* [ F(1) F(0) ] = [ F(4) F(3) ] = A^3 * [ F(1) F(0) ] .. .. .. .. A* [ F(n) F(n-1) ] = [ F(n+1) F(n) ] = A^n * [ F(1) F(0) ] So all that is left is finding the nth power of the matrix A. Well, this can be computed in O(log n) time, by recursive doubling. The idea is, to find A^n , we can do R = A^(n/2) * A^(n/2) and if n is odd, we need do multiply with an A at the end. The following pseudo code shows the same. 
void power(int F[2][2], int n)
{
  if( n == 0 || n == 1)
      return;
  int M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, M);
 
  if( n%2 != 0 )
     multiply(F, M);
}
 Complexity is already explained by Sandeep let me know if you still facing problem Thank WgpShashank Algoseekar @sandeep can u explain here nth means if n=0 is then ans is 0 so its the 1st Fibonacci number or zeroth Fibonacci number..?? Sandeep It’s the 0th Fibonacci number. geek4u A good related lecture. http://www.youtube.com/watch?v=ZKBUu_ahSR4&feature=relmfu Priyanka Thanks.Good lecture. Can u please explain how the time complexity is 0(logn) for 5th solution?  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.linkedin.com/in/ramanawithu Venki 2. Yes, Thank you. At maximum there will be O(n) calls active on stack frame. Earlier I calculated total number of calls (which is obviously exponential) rather than active calls on stack. The following program tests the depth of recursion.  

#include<stdio.h>
int fib(int n, int *pStackDepth)
{
    int ret;

    (*pStackDepth)++;
    
    if ( n <= 1 )
    {
        // We are at base case, see the depth
        printf("Depth %d\n", *pStackDepth);

        (*pStackDepth)--;
        return n;
    }

    ret = fib(n-1, pStackDepth) + fib(n-2, pStackDepth);

    (*pStackDepth)--;

    return ret;
}

int getFib(int n)
{
    int stackDepth = 0;

    return fib(n, &stackDepth);
}

int main ()
{
    int n = 10;
    printf("%d", getFib(n));

    return 0;
}
 7. Given below is generating polynomial of Fibonacci series, F(n) = F(n-1) + F(n-2) where n > 1 F(n) – F(n-1) – F(n-2) = 0 Corresponding characteristic equation (generating polynomial) can be written as, x^2 – x – 1 = 0 Whose roots are (1+sqrt(5))/2 and (1-sqrt(5))/2. The constant (1+sqrt(5))/2 is called golden ratio (phi). Substituting them back, we will get F(n) as, F(n) = (1/sqrt(5))*[phi^n – 1/phi^n] – rounded to nearest integer. Now I guess the question is raising phi to n-th power. Sorry for math. I wasn’t able to avoid them. http://www.linkedin.com/in/ramanawithu Venki Assuming n represents 0, 1, 2, 3, 4, …. n. For mathematical reasons we start the Fibonacci sequence at 0. Ideally it should start at 1. There are few observations… 1. Method 2, there is an error in declaring the array. We can’t create dynamic arrays, atleast as per ANSI. The array size declarator must be constant literal or const qualified definition (C++). If we qualify the parameter with const, it will still be declaration not definition. 2. Method 2, considering stack, space complexity is not O(n), it is also exponential. Approximately 1.618 ^ (n+1). 3. An interesting fact, there will be exactly F(n+1) leaves in the recursion tree of F(n). We can check it with the given tree. It is because the new branch will contribute f(n) leaves apart from the f(n-1) leaves, overall contributing to f(n+1) leaves. 4. Little optimization Sometimes it is costly to move data (other better approach is to use reference or pointer rather than moving data). The following idea will avoid exchanging the variables. fib[3] – An array that stores latest three Fibonacci numbers. // Keep updating the active array index actIndex = actIndex % 3 fib[actIndex] = fib[ (actIndex + 1) %3 ] + fib[ (actIndex + 2) %3 ] return the value of actIndex. % – is costly operation. Only when data movement outweighs we should opt the above method. 5. Method 4, multiple declaration of multiply() function. Though not wrong, better remove one. 6. Method 4, the matrix representation is not conveying exact meaning. It would be intuitive to include the following matrix, {F2, F1} = {{1, 1}, {0, 1}} * {F0, F1} {Fn, Fn-1} = {{1, 1}, {0, 1}}^n * {F0, F1} – after generalizing 7. There is another log(n) approach. Find the roots of characteristic equation representing the Fibonacci sequence and raise the roots to n-th power. F(n) = (1/sqrt(5)[(phi)^n] where ‘phi’ is golden ratio. GeeksforGeeks 1) As per the C99 standard, we can create variable size arrays. See this G-Fact 2) Please take a closer look at the recursive program. At any point of time in excecution, there are not more than O(n) function call entries in function call stack. 3) & 4) We will take another look and get back. 5) There was typo, we have removed extra declaration. 6) Sounds good, we will add these. 7) Could you please provide the algorithm/code. vipulkv In method 5, there is a problem. Program will go to infinite recursion if we call fib(1) which eventually will call power(f, 0). In power function there is no basis condition when n is 0. GeeksforGeeks @vipulkv: Thanks for pointing out this case. We have modified the if condition to handle the same. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
