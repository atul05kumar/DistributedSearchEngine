Implement LRU Cache - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Implement LRU Cache How to implement LRU caching scheme? What data structures should be used? We are given total possible page numbers that can be referred. We are also given cache (or memory) size (Number of page frames that cache can hold at a time). The LRU caching scheme is to remove the least recently used frame when the cache is full and a new page is referenced which is not there in cache. Please see the Galvin book for more details (see the LRU page replacement slide here). We use two data structures to implement an LRU Cache. 1. A Queue which is implemented using a doubly linked list. The maximum size of the queue will be equal to the total number of frames available (cache size). The most recently used pages will be near front end and least recently pages will be near rear end. 2. A Hash with page number as key and address of the corresponding queue node as value. When a page is referenced, the required page may be in the memory. If it is in the memory, we need to detach the node of the list and bring it to the front of the queue. If the required page is not in the memory, we bring that in memory. In simple words, we add a new node to the front of the queue and update the corresponding node address in the hash. If the queue is full, i.e. all the frames are full, we remove a node from the rear of queue, and add the new node to the front of queue. Note: Initially no page is in the memory. Below is C implementation: 
// A C program to show implementation of LRU cache
#include <stdio.h>
#include <stdlib.h>

// A Queue Node (Queue is implemented using Doubly Linked List)
typedef struct QNode
{
    struct QNode *prev, *next;
    unsigned pageNumber;  // the page number stored in this QNode
} QNode;

// A Queue (A FIFO collection of Queue Nodes)
typedef struct Queue
{
    unsigned count;  // Number of filled frames
    unsigned numberOfFrames; // total number of frames
    QNode *front, *rear;
} Queue;

// A hash (Collection of pointers to Queue Nodes)
typedef struct Hash
{
    int capacity; // how many pages can be there
    QNode* *array; // an array of queue nodes
} Hash;

// A utility function to create a new Queue Node. The queue Node
// will store the given 'pageNumber'
QNode* newQNode( unsigned pageNumber )
{
    // Allocate memory and assign 'pageNumber'
    QNode* temp = (QNode *)malloc( sizeof( QNode ) );
    temp->pageNumber = pageNumber;

    // Initialize prev and next as NULL
    temp->prev = temp->next = NULL;

    return temp;
}

// A utility function to create an empty Queue.
// The queue can have at most 'numberOfFrames' nodes
Queue* createQueue( int numberOfFrames )
{
    Queue* queue = (Queue *)malloc( sizeof( Queue ) );

    // The queue is empty
    queue->count = 0;
    queue->front = queue->rear = NULL;

    // Number of frames that can be stored in memory
    queue->numberOfFrames = numberOfFrames;

    return queue;
}

// A utility function to create an empty Hash of given capacity
Hash* createHash( int capacity )
{
    // Allocate memory for hash
    Hash* hash = (Hash *) malloc( sizeof( Hash ) );
    hash->capacity = capacity;

    // Create an array of pointers for refering queue nodes
    hash->array = (QNode **) malloc( hash->capacity * sizeof( QNode* ) );

    // Initialize all hash entries as empty
    int i;
    for( i = 0; i < hash->capacity; ++i )
        hash->array[i] = NULL;

    return hash;
}

// A function to check if there is slot available in memory
int AreAllFramesFull( Queue* queue )
{
    return queue->count == queue->numberOfFrames;
}

// A utility function to check if queue is empty
int isQueueEmpty( Queue* queue )
{
    return queue->rear == NULL;
}

// A utility function to delete a frame from queue
void deQueue( Queue* queue )
{
    if( isQueueEmpty( queue ) )
        return;

    // If this is the only node in list, then change front
    if (queue->front == queue->rear)
        queue->front = NULL;

    // Change rear and remove the previous rear
    QNode* temp = queue->rear;
    queue->rear = queue->rear->prev;

    if (queue->rear)
        queue->rear->next = NULL;

    free( temp );

    // decrement the number of full frames by 1
    queue->count--;
}

// A function to add a page with given 'pageNumber' to both queue
// and hash
void Enqueue( Queue* queue, Hash* hash, unsigned pageNumber )
{
    // If all frames are full, remove the page at the rear
    if ( AreAllFramesFull ( queue ) )
    {
        // remove page from hash
        hash->array[ queue->rear->pageNumber ] = NULL;
        deQueue( queue );
    }

    // Create a new node with given page number,
    // And add the new node to the front of queue
    QNode* temp = newQNode( pageNumber );
    temp->next = queue->front;

    // If queue is empty, change both front and rear pointers
    if ( isQueueEmpty( queue ) )
        queue->rear = queue->front = temp;
    else  // Else change the front
    {
        queue->front->prev = temp;
        queue->front = temp;
    }

    // Add page entry to hash also
    hash->array[ pageNumber ] = temp;

    // increment number of full frames
    queue->count++;
}

// This function is called when a page with given 'pageNumber' is referenced
// from cache (or memory). There are two cases:
// 1. Frame is not there in memory, we bring it in memory and add to the front
//    of queue
// 2. Frame is there in memory, we move the frame to front of queue
void ReferencePage( Queue* queue, Hash* hash, unsigned pageNumber )
{
    QNode* reqPage = hash->array[ pageNumber ];

    // the page is not in cache, bring it
    if ( reqPage == NULL )
        Enqueue( queue, hash, pageNumber );

    // page is there and not at front, change pointer
    else if (reqPage != queue->front)
    {
        // Unlink rquested page from its current location
        // in queue.
        reqPage->prev->next = reqPage->next;
        if (reqPage->next)
           reqPage->next->prev = reqPage->prev;

        // If the requested page is rear, then change rear
        // as this node will be moved to front
        if (reqPage == queue->rear)
        {
           queue->rear = reqPage->prev;
           queue->rear->next = NULL;
        }

        // Put the requested page before current front
        reqPage->next = queue->front;
        reqPage->prev = NULL;

        // Change prev of current front
        reqPage->next->prev = reqPage;

        // Change front to the requested page
        queue->front = reqPage;
    }
}

// Driver program to test above functions
int main()
{
    // Let cache can hold 4 pages
    Queue* q = createQueue( 4 );

    // Let 10 different pages can be requested (pages to be
    // referenced are numbered from 0 to 9
    Hash* hash = createHash( 10 );

    // Let us refer pages 1, 2, 3, 1, 4, 5
    ReferencePage( q, hash, 1);
    ReferencePage( q, hash, 2);
    ReferencePage( q, hash, 3);
    ReferencePage( q, hash, 1);
    ReferencePage( q, hash, 4);
    ReferencePage( q, hash, 5);

    // Let us print cache frames after the above referenced pages
    printf ("%d ", q->front->pageNumber);
    printf ("%d ", q->front->next->pageNumber);
    printf ("%d ", q->front->next->next->pageNumber);
    printf ("%d ", q->front->next->next->next->pageNumber);

    return 0;
}
 Output: 5 4 1 3 This article is compiled by Aashish Barnwal and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Given a linked list, reverse alternate nodes and append at the end Pairwise swap elements of a given linked list by changing links Self Organizing List | Set 1 (Introduction) Merge a linked list into another linked list at alternate positions QuickSort on Singly Linked List Delete N nodes after M nodes of a linked list Design a stack with operations on middle element Swap Kth node from beginning with Kth node from end in a Linked List Tags: Advance Data Structures, Advanced Data Structures, Queue Tweet Writing code in comment? Please use ideone.com and share the link here. danny typedef struct Queue { unsigned count; // Number of filled frames unsigned numberOfFrames; // total number of frames QNode *front, *rear; } Queue; I think it should be Queue *front, *rear instead of Qnode *front,*rear in above implementation…. Please correct me if I am wrong or misunderstanding the concept. Manish Gupta Here, front and rear in themselves are pointers to particular nodes of the queue, which are of type Qnode*, where as Queue is a collection of various Qnode* type of nodes. So, they need to be Qnode*, not Queue *. I hope things are clear now. danny That means we are having 4 pointers associated to each Qnode prev,next,front and rear right…. In the above implementation we are putting the MRU used page in front of queue and least recently used(LRU) on the rear end of queue. So, we need one front and rear for the queue only rather then specific front and rear for each node in queue. This is because we already have next and prev associated with Qnode to move through different nodes inside Queue… Manish Gupta Yes, but isn’t it better to directly access the front and rear node when trying to add a new node to front of the queue/remove a node from rear of a queue. Even though we have prev and next pointers that facilitate us to traverse the queue, keeping these two additional pointers will ensure we don’t have to traverse from the front all the way to the rear whenever a node from rear needs to be removed. In simple words, keeping them makes us able to do insertions and deletions in O(1), as compared to O(n) when we have to traverse all the way front front till the rear end in order to remove the least recently used page. Hope this helps danny OK thanks for helping me out, It’s clear now…. Manish Gupta Great. Glad I could help groomnestle The algo logic doesn’t seem to work. Say if we have 3 entries [A, B, C] in the cache table and it’s full, if entry C is visited 100 times, the list becomes [C,A,B], then B is visited 50 times, the list becomes [B, C, A] then A is visited 10 times , it becomes [A,B,C] again. At this point if a new node D comes in, the algorithm removes C (100 visits) instead of A (10 visits)…. Am i missing something here ? ritz Yes, you are missing something. Its an LRU cache, not an LFU(if it exists). The least RECENTLY used item has to be replaced and not the least FREQUENTLY used. So, its correct to replace C in your case. arun Do we really need to remove the hash entry when queue is full and we are adding an item to the queue @ line#118? Sathish Kumar Here is an implementation of LRU Cache in Java: http://best-interview.com/design-least-recently-used-lru-cache-java/ Mari Thanks for the Java Implementation. there are some changes that need to be done. First, You are using ConcurrentLinkedQueue which is nothing but single linked list internally. When we implement LRU, we normally use double linked list for efficiency. Inside the put method, To remove the page from cache (queue), you have used queue.remove method, This will take o(n) in worst case. Rather A good implemetation should only take 6 pointe operations in worst case. The idea to avoid this extra time is to store the node inside the map and get the node from the map as required and change its next and previous. This is same idea as implemented above. Also you are removing the node from queue even it is accessed recently. Onik Is there any specific reason why you used DLL in the queue ? I mean if you know the max size of queue(which is given here) why not you implement the queue using an array ? would not that be more efficient ? danny We cannot use array queue because we need to remove the LRU page from the rear and then add the page to front, If we use array implementation then we need to traverse the array again and again to adjust the 0 and last index of array, so as to add the just used page in the front of array….which needs O(n) time and using Doubly Linked List we reduced it to O(1)… This is one of the reason I could think of. rajesh its giving segmentation fault…coredump pr3za a milion thanks!! Rohit https://launchpad.net/mrucachelib codinggeek16 We can keep a pointer next_in_hash in Qnode and later handle collision by creating a singly linklist using this pointer. lifeofpie what is time complexity of insertion,deletion & searching ecosoft When you call the deQueue function, could you delete the entry in the hashtable?  
/* Paste your code here (You may delete these lines if not writing code) */
 nanda If the node is not deleted, won’t there be wrong address in the hash table for the the older key? For example, 8 is removed from tail and placed at head. Now the 8’s address is still in hashtable. When 8 is referenced next time, 6 will found at the front at it will be returned. Deletion from both linked list and hash table ensures this doesn’t happen is what I understand. abhishek08aug Intelligent anonymous Srsly?? Everywhere?? neham This LRU caching scheme works great, but on real system, page numbers can never be between 0 & 10. So, How page fault handler track different pages of different processes? my point is page numbers can be referenced randomly between many processes so how pages are numbered by operating system.  
/* Paste your code here (You may delete these lines if not writing code) */
 shady in ReferencePage function this check  
   if (reqPage->prev)
 is redundant because we have already know that the queue->front and the referenced page are not same, so previous is bound to exist. http://www.facebook.com/barnwal.aashish Aashish Thanks for pointing this out. We have updated the code. Keep it up. Ansuman Why we need hash in it ? Can it be done without using hash? Rahul See the below comment by @Aashish Barnwal. He has mentioned the usage of hash. Balasubramanian In the above implementation, we are indexing the hash table using the page number. What if the total number of pages that can be referenced be quite large while the size of the cache is relatively very less. Won’t we be wasting a lot of space? I think it would be good if we can use a HashTable similar to the one provided in STL, instead of having an array with an index for every possible page number. Rohit The code to dequeue and enqueue a page, when the queue is full, seems to be missing. When the cache reaches its maximum size, we 1. Check if the accessed page is present. If so, just move the page to the front. 2. Otherwise, delete the last element from the queue (queue and hash). Now, insert the new element. @Animesh The code mentioned above in C source:  
#include "linked_list_library.c"
struct node* add(struct node* head, int a, int count)
{
    struct node* mover=head,*current=head, *p;
     if(count<=4)
    {
        if(head==NULL)
        {
            p=(struct node*) malloc(sizeof(struct node));
            p->info=a;
            p->next==NULL;
            head=p;
            head->next=NULL;
            return head;
        }
        while(mover->next!=NULL)
        {
            if(mover->info==a&&mover==head)
            {
                head=head->next;
                current->next=mover->next;
                 while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                mover->next=NULL;
                return head;
            }
            if(mover->info==a)
            {
                current->next=mover->next;
                mover->next=NULL;
                while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                return head;
            }
            current=mover;
            mover=mover->next;
        }
 
 
 
        p=(struct node*) malloc(sizeof(struct node));
        p->info=a;
        p->next=NULL;
        mover->next=p;
        return head;
 
    }
    while(mover!=NULL)
    {
 
        if(mover->info==a&&mover->next!=NULL)
        {
 
 
 
                current->next=mover->next;
                mover->next=NULL;
                 while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                mover->next=NULL;
            return head;
        }
        current=mover;
        mover=mover->next;
    }
 
 
    if(count>4)
    {
        p=(struct node*) malloc(sizeof(struct node));
        p->info=a;
        p->next=NULL;
        head=head->next;
        current->next=p;
        return head;
    }
}
 
int main()
{
    int count=0;
    struct node* head=add(NULL,1,0);display(head);
 
    head=add(head,2,1);display(head);
 
    head=add(head,3,2);display(head);
    head=add(head,1,3);display(head);
    head=add(head,4,4);display(head);
    head=add(head,5,5);display(head);
    head=add(head,2,5);display(head);
    head=add(head,6,5);display(head);
    head=add(head,5,5);display(head);
    return 0;
}
 abcdef why the error comes every time I try to comment?  
 Animesh Pratap Singh this is my code…. i suppose is simple 4m the above thing..!!  
/*#include "linked_list_library.c"
struct node* add(struct node* head, int a, int count)
{
    struct node* mover=head,*current=head, *p;
     if(count<=4)
    {
        if(head==NULL)
        {
            p=(struct node*) malloc(sizeof(struct node));
            p->info=a;
            p->next==NULL;
            head=p;
            head->next=NULL;
            return head;
        }
        while(mover->next!=NULL)
        {
            if(mover->info==a&&mover==head)
            {
                head=head->next;
                current->next=mover->next;
                 while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                mover->next=NULL;
                return head;
            }
            if(mover->info==a)
            {
                current->next=mover->next;
                mover->next=NULL;
                while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                return head;
            }
            current=mover;
            mover=mover->next;
        }



        p=(struct node*) malloc(sizeof(struct node));
        p->info=a;
        p->next=NULL;
        mover->next=p;
        return head;

    }
    while(mover!=NULL)
    {

        if(mover->info==a&&mover->next!=NULL)
        {



                current->next=mover->next;
                mover->next=NULL;
                 while(current->next!=NULL)
                {
                    current=current->next;
                }
                current->next=mover;
                mover->next=NULL;
            return head;
        }
        current=mover;
        mover=mover->next;
    }


    if(count>4)
    {
        p=(struct node*) malloc(sizeof(struct node));
        p->info=a;
        p->next=NULL;
        head=head->next;
        current->next=p;
        return head;
    }
}

int main()
{
    int count=0;
    struct node* head=add(NULL,1,0);display(head);

    head=add(head,2,1);display(head);

    head=add(head,3,2);display(head);
    head=add(head,1,3);display(head);
    head=add(head,4,4);display(head);
    head=add(head,5,5);display(head);
    head=add(head,2,5);display(head);
    head=add(head,6,5);display(head);
    head=add(head,5,5);display(head);
    return 0;
}
 */
 Animesh Pratap Singh 1- singly Linked List has recently used item at the end…. 2- New element is added to the linked list keeping (page table size =4) 3- if element is present already in linkd List,,, it is jumped to the end. pratik i didnt truly understand why did u used a hash table , if you just wanted to keep an address of that page no. u can always add an extra address field in node structure  
/* Paste your code here (You may delete these lines if not writing code) */
 Aashish Barnwal Hash is used for O(1) insertion, O(1) deletion and O(1) search. Assume that hash is not there, how will you check whether a page is in the memory or it needs to be brought in the memory. Use of hash data structure makes these operations fast. _naive_ Hashing is only possible when range of pages in given. isn’t it ?? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
