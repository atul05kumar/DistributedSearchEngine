Find the two numbers with odd occurrences in an unsorted array - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find the two numbers with odd occurrences in an unsorted array Given an unsorted array that contains even number of occurrences for all numbers except two numbers. Find the two numbers which have odd occurrences in O(n) time complexity and O(1) extra space. Examples: 
Input: {12, 23, 34, 12, 12, 23, 12, 45}
Output: 34 and 45

Input: {4, 4, 100, 5000, 4, 4, 4, 4, 100, 100}
Output: 100 and 5000

Input: {10, 20}
Output: 10 and 20
 A naive method to solve this problem is to run two nested loops. The outer loop picks an element and the inner loop counts the number of occurrences of the picked element. If the count of occurrences is odd then print the number. The time complexity of this method is O(n^2). We can use sorting to get the odd occurring numbers in O(nLogn) time. First sort the numbers using an O(nLogn) sorting algorithm like Merge Sort, Heap Sort.. etc. Once the array is sorted, all we need to do is a linear scan of the array and print the odd occurring number. We can also use hashing. Create an empty hash table which will have elements and their counts. Pick all elements of input array one by one. Look for the picked element in hash table. If the element is found in hash table, increment its count in table. If the element is not found, then enter it in hash table with count as 1. After all elements are entered in hash table, scan the hash table and print elements with odd count. This approach may take O(n) time on average, but it requires O(n) extra space. A O(n) time and O(1) extra space solution: The idea is similar to method 2 of this post. Let the two odd occurring numbers be x and y. We use bitwise XOR to get x and y. The first step is to do XOR of all elements present in array. XOR of all elements gives us XOR of x and y because of the following properties of XOR operation. 1) XOR of any number n with itself gives us 0, i.e., n ^ n = 0 2) XOR of any number n with 0 gives us n, i.e., n ^ 0 = n 3) XOR is cumulative and associative. So we have XOR of x and y after the first step. Let the value of XOR be xor2. Every set bit in xor2 indicates that the corresponding bits in x and y have values different from each other. For example, if x = 6 (0110) and y is 15 (1111), then xor2 will be (1001), the two set bits in xor2 indicate that the corresponding bits in x and y are different. In the second step, we pick a set bit of xor2 and divide array elements in two groups. Both x and y will go to different groups. In the following code, the rightmost set bit of xor2 is picked as it is easy to get rightmost set bit of a number. If we do XOR of all those elements of array which have the corresponding bit set (or 1), then we get the first odd number. And if we do XOR of all those elements which have the corresponding bit 0, then we get the other odd occurring number. This step works because of the same properties of XOR. All the occurrences of a number will go in same set. XOR of all occurrences of a number which occur even number number of times will result in 0 in its set. And the xor of a set will be one of the odd occurring elements. 
// Program to find the two odd occurring elements
#include<stdio.h>

/* Prints two numbers that occur odd number of times. The
   function assumes that the array size is at least 2 and
   there are exactly two numbers occurring odd number of times. */
void printTwoOdd(int arr[], int size)
{
  int xor2 = arr[0]; /* Will hold XOR of two odd occurring elements */
  int set_bit_no;  /* Will have only single set bit of xor2 */
  int i;
  int n = size - 2;
  int x = 0, y = 0;

  /* Get the xor of all elements in arr[]. The xor will basically
     be xor of two odd occurring elements */
  for(i = 1; i < size; i++)
    xor2 = xor2 ^ arr[i];

  /* Get one set bit in the xor2. We get rightmost set bit
     in the following line as it is easy to get */
  set_bit_no = xor2 & ~(xor2-1);

  /* Now divide elements in two sets: 
    1) The elements having the corresponding bit as 1. 
    2) The elements having the corresponding bit as 0.  */
  for(i = 0; i < size; i++)
  {
     /* XOR of first set is finally going to hold one odd 
       occurring number x */ 
    if(arr[i] & set_bit_no)
      x = x ^ arr[i];

     /* XOR of second set is finally going to hold the other 
       odd occurring number y */ 
    else
      y = y ^ arr[i]; 
  }

  printf("\n The two ODD elements are %d & %d ", x, y);
}

/* Driver program to test above function */
int main()
{
  int arr[] = {4, 2, 4, 5, 2, 3, 3, 1};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printTwoOdd(arr, arr_size);
  getchar();
  return 0;
}
 Output: 
The two ODD elements are 5 & 1
 Time Complexity: O(n) Auxiliary Space: O(1) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Ankit In the above code, the values of x and y are initialized to 0. To get the final correct answer shouldn’t you xor the results x and y with 0 once again? Also the variable n seems redundant. Please correct me if wrong. thanks, Prashanth XOR a number with 0 gives the same number, so not required. Ya we don’t require n. dark_night Grt observation… the idea of dividing array using set bits was awesome!!! Prashanth No , it gives the correct answer. 11 , 10 are the numbers with odd number of occurences. http://ass nameless Nice Observation on XOR bit operation …Good  
/* Paste your code here (You may delete these lines if not writing code) */
 swati if we are getting only right most set bit in the set_bit_no then how it is working to get rest of the set bits of odd numbers? plz explain thanks http://Email(Required) Name (Required) ————————————– for(i = 1; i the 1 bit from the left in the result xor2–> says eather X has 0 bit in that position or Y has 1 bit in that position (or vise versa ) ————————————————- set_bit_no = xor2 & ~(xor2-1); after this expression the result in set_bit_no= contains only 1 and all zeor’s and 1 occurs at left 1 bit in xor2 ex: X=10010 Y= 01001 xor2=11011 xor2-1=11010 ~(xor2-1)=00101 xor2=11011 set_bit_no=xor2 &~(xor2-1)= 000001 ———————————————— Observation: After all above steps we came to know teh result X & Y have Opposite bits where set_bit_no is 1 no we divide the input array into two sets 1: all elements where set_bit_no is 1 2: all elements set_bit_no is 0 we can see the implementation in for loop & if condition ——————————————- Observation: XOR of any number n with 0 gives us n, i.e., n ^ 0 = n ( so x=y=0) after the for loop small x, y contains result for(i = 0; i < size; i++) { /* XOR of first set is finally going to hold one odd occurring number x */ if(arr[i] & set_bit_no) x = x ^ arr[i]; /* XOR of second set is finally going to hold the other odd occurring number y */ else y = y ^ arr[i]; } ——————————— http://digitalcrop.blogspot.com vishal how you set x and y values i do not understand … for(i = 0; i < size; i++) { /* XOR of first set is finally going to hold one odd occurring number x */ if(arr[i] & set_bit_no) x = x ^ arr[i]; /* XOR of second set is finally going to hold the other odd occurring number y */ else y = y ^ arr[i]; } Prashanth All the array elements that go inside the if block have one odd number of occurences and remaining even number of occurences. so we get one of the odd occurence in x. Similarly for else statement Bond Nice one.Thanks for sharing. levis i think we can also get the set_bit_no=(xor2&xor2-1)^xor2 shekhar can you please what “set bit of xor2″ signifies kartik Set bit of xor2 means the bit with value 1 in binary representation of the number xor2. For example, if xor2 is 110011, then there are 4 set bits. Two leftmost and two rightmost bits are set. Hope it clarifies your doubt. Mahaboob Ali We can use the Method 5 in following post http://www.geeksforgeeks.org/archives/7953 if all the numbers in the array are positive  
/* Paste your code here (You may delete these lines if not writing code) */
 anurag singh Indexing works well if max array value is more or less equal to n (array size). We may not want to use indexing for array as: 1,1,50000 as it will take too much space. Ankush surely, for small range of numbers indexing is much easier way anurag singh We may want to use array indexing only when max array value is near to the array length or it will take too much space. kiran set_bit_no = xor2 & ~(xor2-1); I think this gives left most one bit set. Precisely Most significant bit which has value 1. Alternate solution: int output[2]; // contains output. int j=0; if ((xor2&arr[i])|arr[i] == arr[i] ) output[j++] = arr[i]; Description: xor2 = x^y; xor2&x = xy'; xy’| x = x; comments please !!!!  
/* Paste your code here (You may delete these lines if not writing code) */
 kartik @kiran: Please take a closer look at the expression, it is rightmost set bit only. Example xor2 = 101110 xor2 – 1 = 101101 ~(xor2 – 1) = 010010 xor2 & ~(xor2-1) = 000010 Srishti I am not clear with why they are taking rightmost set bit. Please explain. Thanks, Srishti  
/* Paste your code here (You may delete these lines if not writing code) */
 Prashanth You don’t have to take the rightmost set bit to solve the problem. You can take any set bit , but getting the rightmost set bit is easy so we did this way. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
