Stock Buy Sell to Maximize Profit - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Stock Buy Sell to Maximize Profit The cost of a stock on each day is given in an array, find the max profit that you can make by buying and selling in those days. For example, if the given array is {100, 180, 260, 310, 40, 535, 695}, the maximum profit can earned by buying on day 0, selling on day 3. Again buy on day 4 and sell on day 6. If the given array of prices is sorted in decreasing order, then profit cannot be earned at all. If we are allowed to buy and sell only once, then we can use following algorithm. Maximum difference between two elements. Here we are allowed to buy and sell multiple times. Following is algorithm for this problem. 1. Find the local minima and store it as starting index. If not exists, return. 2. Find the local maxima. and store it as ending index. If we reach the end, set the end as ending index. 3. Update the solution (Increment count of buy sell pairs) 4. Repeat the above steps if end is not reached. 
// Program to find best buying and selling days
#include <stdio.h>

// solution structure
struct Interval
{
    int buy;
    int sell;
};

// This function finds the buy sell schedule for maximum profit
void stockBuySell(int price[], int n)
{
    // Prices must be given for at least two days
    if (n == 1)
        return;

    int count = 0; // count of solution pairs

    // solution vector
    Interval sol[n/2 + 1];

    // Traverse through given price array
    int i = 0;
    while (i < n-1)
    {
        // Find Local Minima. Note that the limit is (n-2) as we are
        // comparing present element to the next element. 
        while ((i < n-1) && (price[i+1] <= price[i]))
            i++;

        // If we reached the end, break as no further solution possible
        if (i == n-1)
            break;

        // Store the index of minima
        sol[count].buy = i++;

        // Find Local Maxima.  Note that the limit is (n-1) as we are
        // comparing to previous element
        while ((i < n) && (price[i] >= price[i-1]))
            i++;

        // Store the index of maxima
        sol[count].sell = i-1;

        // Increment count of buy/sell pairs
        count++;
    }

    // print solution
    if (count == 0)
        printf("There is no day when buying the stock will make profit\n");
    else
    {
       for (int i = 0; i < count; i++)
          printf("Buy on day: %d\t Sell on day: %d\n", sol[i].buy, sol[i].sell);
    }

    return;
}

// Driver program to test above functions
int main()
{
    // stock prices on consecutive days
    int price[] = {100, 180, 260, 310, 40, 535, 695};
    int n = sizeof(price)/sizeof(price[0]);

    // fucntion call
    stockBuySell(price, n);

    return 0;
}
 Output: Buy on day : 0   Sell on day: 3
Buy on day : 4   Sell on day: 6 Time Complexity: The outer loop runs till i becomes n-1. The inner two loops increment value of i in every iteration. So overall time complexity is O(n) This article is compiled by Ashish Anand and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Manoj public static void stockBuySell(int arr[]){ //int price[] = {100, 180, 260, 310, 40, 535, 695}; int num=arr[0]; int minIndex=0; int maxIndex=0; for(int i=1;i<arr.length;i++){ if(num<arr[i] && i!=arr.length-1){ continue; } else{ if(i!=arr.length-1){ maxIndex=i-1; }else{ maxIndex=i; } System.out.println("Buy and sell on:"+ arr[minIndex]+ "–" + arr[maxIndex]); minIndex=i; num=arr[minIndex]; } } SSeal y the assumption that two buy-sell intervals can’t be overlapping? sumit // tell me if any thing wrong with this code #include using namespace std; void stockBuySell(int a[],int n) { int lindex; int i; lindex=0; for(i=1;i<n;i++) { if(a[i] < a[i-1]) { if(lindex < i-1) { cout<<"buy on "<<lindex<<" and sell on "<<i-1<<endl; lindex=i; } } } if(lindex < i-1) { cout<<"buy on "<<lindex<<" and sell on "<<i-1<<endl; } } int main() { int a[]={100, 180, 260, 310, 40, 535, 695}; int n=sizeof(a)/sizeof(a[0]); stockBuySell(a,n); return 0; } https://sites.google.com/site/nishantonl9/ Nishant Kumar We can also proceed like this – we will find all monotonically increasing sub array of length >=2. We will buy at the starting index of this sub array and will sell at the end index and so on till end. e.g.- {100, 180, 260, 310, 40, 535, 695} for above example increasing sub arrey’s (len >=2) are – {100, 180, 260, 310} and {40, 535, 695} Buy on day: 0 Sell on day: 3 Buy on day: 4 Sell on day: 6 second exmaple – {100, 180, 160, 110, 40, 535, 695} sub array length >=2 – {100, 180} {40, 535, 695} Buy on day: 0 Sell on day: 1 Buy on day: 4 Sell on day: 6 Time complexity will be O(n) and code will be almost similar to given in this post.  
/* Paste your code here (You may delete these lines if not writing code) */
 shivi you are doing the same thing as above code!! increasing sequence will start with local minima and end with local maxima!! there is no diffrence.. Rahul Dhamecha what should the output be for 100, 180, 260, 310, 240, 535, 695 Rahul Dhamecha What should the output be for the following case : 100, 180, 260, 310, 240, 535, 695 I just changed the 40 to 240.  
/* Paste your code here (You may delete these lines if not writing code) */
 skulldude The following code finds the maximum profit. It can be easily modified to provide the buy and sell dates. Time Complexity is O(n).  
int maxProfit(int a[],int len){
	int profit=0;
        int start=0;  
	while(start<len){
		int end=start+1;
		while(end<len && a[end]>a[end-1])
			++end;
		end--;
		if(start!=end)
			profit += a[end]-a[start];
		start=end+1;
	}
	return profit;
}
 anonymous can we do this ? if we calculate difference between adjacent costs of stock…then apply Kadane on it to find maximum increase subarray ..and print a max range when value goes equal to or below zero.. someone please comment ….. Muthukumar Suresh  
#include<iostream>
using namespace std;
struct interval{
	int start=-1;
	int end=-1;	
};

int main(){
	int arr[]={ 200, 210,200,275,275,275};
	int n=sizeof(arr)/sizeof(arr[0]);
	int count=0,i,profit=0;
	struct interval Interval[(n/2)+1];
	for(i=0;i<n;i++){
		if(arr[i]<arr[i+1] && (arr[i]<arr[i-1]||i==0))
			Interval[count].start=i;
		else if((arr[i]>arr[i+1]||i==(n-1))&&Interval[count].start!=-1)
			Interval[count++].end=i;
			
	}
	cout<<"COUNT:"<<count<<"\n";
	for(i=0;i<count;i++){
		if(Interval[i].end>=0 && Interval[i].start>=0){
			cout<<Interval[i].start<<" " <<Interval[i].end;
			profit+=arr[Interval[i].end]-arr[Interval[i].start];
		}
	}
	cout<<"\n"<<profit<<"\n ";
	return 0;
}
 numid We can do it in a simpler way, #include<iostream> using namespace std; int main() { //int arr[]={100,90,80,70,60,50}; int arr[]={100,180,260,310,40,535,695}; int i,sum,n,val,first,last; n=7;sum=0; val=arr[0]; for(i=1;i<n;i++) { if(arr[i]>arr[i-1]) { if(sum==0) first=i-1; sum+=(arr[i]-val); val=arr[i]; } else { if(sum > 0) cout<<"\nBuy on :day"<<first<<"\tSell on :day"<<i-1; val=arr[i]; first=i; } } if(sum > 0) cout<<"\nBuy on :day"<<first<<"\tSell on :day"<<i-1; cout<<"\nProfit earned:"<<sum; getchar(); return 0; } sumit dey  
/* Paste your code here (You may delete these lines if not writing code) */
I guess the code has missed some corner cases :
like for this input {30,40,110,109}
30->110 (the above code will consider this only) , it will skip the other part 40->109.

Kindly help, here .
 booyakasha There is a bug in the definition of the solution structure. The correct definition should be:  
typedef struct __interval {
    int buy;
    int sell;
} Interval;
 Otherwise, the definition of the array ‘sol’ will not work. GeeksforGeeks The program given above is a C++ program. If you save it as .cpp, it will work fine without any error. booyakasha Could someone kindly tell me the logic behind setting the size of the array ‘sol’ to n/2 + 1. Thank you. arun total intervals .. anonymous @Geeks for Geeks : Please Tell me will the below code will work or not:-  
void findrange(int a[],int siz){
     int min =100,max = INT_MIN, min_index = 0,max_index = -1,i;
     for(i=1;i<siz;i++){
                        
                        if(a[i]<min || a[i]<max){
                                     if(max!=INT_MIN && min_index<max_index && min<max){
                                                     printf("%d-%d\n",min,max);
                                     }
                                     min = a[i];
                                     min_index = i;
                                     max = INT_MIN;
                                     max_index = -1;
                        }
                        else if(a[i]>max){
                                     max = a[i];
                                     max_index = i;
                        }
     }
     if(max!=INT_MIN && min_index<max_index && min<max){
                        printf("%d-%d\n",min,max);
     }
}

 Novice I fill below code also O(N)…. int stockPrice [] = {100,170,210,250,120,90,190}; int oldHighest = -1; int currentHighest = 0; int size = sizeof(stockPrice)/sizeof(stockPrice[0]); int entry=0, exit, tradeCount = 0; bool bought = false; for(int i=1; i 0) { entry = i; bought = true; tradeCount++; } if(currentHighest > oldHighest){ oldHighest = currentHighest; }else if(bought){ exit = i; printf(“Buy = %d, Sell = %d, profit = %d \n”, entry, exit, oldHighest); exit = 0; currentHighest = 0; oldHighest = -1; bought = false; } } if(tradeCount == 0) printf(“No Scope for trade”); hitesh.dholaria @Ashish and @GeeksForGeeks Team Thank you very much for sharing such a wonderful problem!  
import java.util.*;

public class StockBuySell {
	public static void main(String args[]) {

		int[] prices=new int[] {100,180,260,310,40,535,695};
		HashMap<Integer,Integer> buySellDays=new HashMap<Integer,Integer>();
		int buyingDay=0,sellingDay=0;
		int totalProfit=0;

		for(int i=0;i<prices.length;i++) {
			while(i<prices.length-1 && prices[i]>prices[i+1]) {
				i++;
			}
			buyingDay=i;
			while(i<prices.length-1 && prices[i]<prices[i+1]) {
				i++;
			}
			sellingDay=i;
			if(buyingDay!=sellingDay) {
				buySellDays.put(buyingDay,sellingDay);
			}
		}

		System.out.println("\nStock Buy-Sell Transactions for Maximizing Profit...\n");

		for(int key:buySellDays.keySet()) {
			totalProfit+=(prices[buySellDays.get(key)]-prices[key]);
			System.out.println("Buy on day "+key+", Sell on day "+buySellDays.get(key)+". Profit of this transaction="+(prices[buySellDays.get(key)]-prices[key]));
		}
		System.out.println("\nTotal Profit="+totalProfit);
	}
}
 anonymous  
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct pair{
       int min;
       int max;
};
int stockBuySell(int a[],int n){
    int i,min,max;
    struct pair *p =(struct pair *)malloc(sizeof(struct pair));
    p->min = 0;
    p->max = 0;
    min = a[0];
    max = a[0];
    for(i=1;i<n;i++){
        if(min>a[i]){
             if(p->min<p->max){
                  printf("%d   -   %d  \n",a[p->min],a[p->max]);
             }
             p->min = i;
             min = a[i];
        }
        else if(max<a[i]){
             p->max = i;
             max = a[i];
        }
    }
    printf("%d   -   %d  \n",a[p->min],a[p->max]);
}
int main()
{
    int price[] = {100, 180, 260, 310, 40, 535, 695};
    int n = sizeof(price)/sizeof(price[0]);
    stockBuySell(price, n);
    getchar();
    return 0;
}

 anonymous Added Few more conditions:-  
int stockBuySell(int a[],int n){
    int i,min,max;
    struct pair *p =(struct pair *)malloc(sizeof(struct pair));
    p->min = 0;
    p->max = 0;
    min = a[0];
    max = a[0];
    for(i=1;i<n;i++){
        if(min>a[i]){
             if(p->min<p->max){
                   printf("%d   -   %d  \n",a[p->min],a[p->max]);
             }
             p->min = i;
             min = a[i];
             max = a[i];
        }
        else if(max<a[i]){
             p->max = i;
             max = a[i];
        }
    }
    if(p->min<p->max){
                      printf("%d   -   %d  \n",a[p->min],a[p->max]);
    }
}
 http://www.tsndiffopera.in/ Sai Nikhil  
#include <iostream>
#include <cstdio>
#include <cstdlib>
#define ll long long

using namespace std;

ll calcProfit (int a[], int n) {

    //int *sell = (int *)calloc (n, sizeof (int));
    int i, m = 0;
    ll prof = 0;
    for (i = n-1; i > -1; i--) {
        if (m <= a[i]) {
            //sell[i] = 1;
            m = a[i];
        }
        prof = prof+(m-a[i]);
    }

    //free (sell);

    return prof;
}

int main () {
    ll prof;
    int n, i, a[] = {100, 180, 260, 310, 40, 535, 695};

    n = sizeof(a)/sizeof(a[0]);
    cout << calcProfit (a, n) << endl;

    return 0;
}
 http://www.tsndiffopera.in/ Sai Nikhil #include <iostream> #include <cstdio> #include <cstdlib> #define ll long long using namespace std; ll calcProfit (int a[], int n) { //int *sell = (int *)calloc (n, sizeof (int)); int i, m = 0; ll prof = 0; for (i = n-1; i > -1; i–) { if (m <= a[i]) { //sell[i] = 1; m = a[i]; } prof = prof+(m-a[i]); } //free (sell); return prof; } int main () { ll prof; int t, n, i, a[] = {100, 180, 260, 310, 40, 535, 695}; cin >> t; while (t–) { n = sizeof(a)/sizeof(a[0]); cout << calcProfit (a, n) << endl; } return 0; } rocko can’t we perform consecutive buys and consecutive sells to maximize profits atul anand another way of solving problem, kinda DP approch  
#include<stdio.h>
#include<string.h>

void stockBuySell(int arr[],int n)
{
	if(n==0 || n==1)
		return;
	int temp[n],i,flag=0;
	memset(temp,0,sizeof(temp));
	temp[0]=1;

	//finding monotonically increasing contigous elments
	for(i=1;i<n;i++)
	{
		if(arr[i]>arr[i-1])
			temp[i]=temp[i-1]+1;
		else
			temp[i]=1;
	}
	for(i=0;i<n;)
	{
		//searching for first valid day to buy.
		while(i<n && temp[i]==1)
			i++;
		if(i==n) // elements are in decreasing order.
		{
			if(flag==0)
				printf("There is no day when buying the stock will make profit\n");
			return;
		}
		else
		{	flag=1;
			printf("\nBuy at index = %d ,",i-1);
			while(i<n && temp[i]!=1)
			{
				i++;
			}	
			printf(" sell at index = %d ,",i-1);
		}
	}
}
 ravisingh3531 this code will work in O(n) complexity  

#include <stdio.h>
#define MX 7

void benefit(int stock[MX])
{
	int index;
	int max = stock[0];
	int temp;
	int flag = 0;
	for(index=0;index<MX;index++)
	{
		if(flag == 1)
		{
			if(temp > stock[index+1])
			{
				printf("%d->%d ",max,temp);
				max = stock[index+1];
				flag = 0;
			}
		}
		
		if(max < stock[index+1])
		{
			flag =1;
			temp = stock[index+1];
		}
		else
		{
			max = stock[index+1];
		}
	}
}
int main()
{
	int stock[MX] = {100, 180, 260, 310, 40, 535, 695};
	benefit(stock);
	return 0;
}

/* Paste your code here (You may delete these lines if not writing code) */
 atul output should be :- 100->310 40->695 or if you had misunderstood the problem and not considering multiple buy and sell then it still not working. {100, 180, 260, 310, 1, 535, 695}; if only one buy-sell is considered output should be :- 1->675 but your will print 100->310 which is wrong  
/* Paste your code here (You may delete these lines if not writing code) */
 ravisingh3531 @atul my code is working with {100, 180, 260, 310, 40, 535, 695} output : 100->310 40->695 and your given input {100, 180, 260, 310, 1, 535, 695} output: 100->310 1->695 it considering multiple buy and sale condition Please see the logic again  
/* Paste your code here (You may delete these lines if not writing code) */
 atul did you really executed your code yourself ???? here check the output:- http://ideone.com/Ry24Kq  
/* Paste your code here (You may delete these lines if not writing code) */
 Pritam As the problem says ‘If we are allowed to buy and sell only once’ so there will be only one buying point and only one selling point. Here is my solution based on the above assumption public void StockBuyAndSell(int[] stockPrice) { int buy = 0; int sell = 0; int newBuy = -1; if (stockPrice == null) throw new ArgumentException("Null input given"); if (stockPrice.Length > 1) { buy = stockPrice[0]; sell = stockPrice[1]; for (int i = 2; i < stockPrice.Length; i++) { int newNo = stockPrice[i]; if (newNo > sell) { sell = newNo; if (newBuy > -1) buy = newBuy; } else { if (newNo < buy) newBuy = newNo; } } Console.WriteLine("Buy: " + buy + " Sell: " + sell); } else Console.WriteLine("Buy:" + stockPrice[0] + " Sell:" + stockPrice[0]); } Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
