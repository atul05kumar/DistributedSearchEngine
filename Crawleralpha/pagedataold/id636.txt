Print nodes at k distance from root - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print nodes at k distance from root Given a root of a tree, and an integer k. Print all the nodes which are at k distance from root. For example, in the below tree, 4, 5 & 8 are at distance 2 from root. 
            1
          /   \
        2      3
      /  \    /
    4     5  8 
 The problem can be solved using recursion. Thanks to eldho for suggesting the solution. 
#include <stdio.h>
#include <stdlib.h>

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
   int data;
   struct node* left;
   struct node* right;
};

void printKDistant(node *root , int k)    
{
   if(root == NULL) 
      return;
   if( k == 0 )
   {
      printf( "%d ", root->data );
      return ;
   }
   else
   {      
      printKDistant( root->left, k-1 ) ;
      printKDistant( root->right, k-1 ) ;
   }
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{

  /* Constructed binary tree is
            1
          /   \
        2      3
      /  \    /
    4     5  8 
  */
  struct node *root = newNode(1);
  root->left        = newNode(2);
  root->right       = newNode(3);
  root->left->left  = newNode(4);
  root->left->right = newNode(5);
  root->right->left = newNode(8);  

  printKDistant(root, 2);

  getchar();
  return 0;
}
 The above program prints 4, 5 and 8. Time Complexity: O(n) where n is number of nodes in the given binary tree. Please write comments if you find the above code/algorithm incorrect, or find better ways to solve the same problem.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. alien We can use Level order traversal for this. It is the implied travesal for this problem Gandalf public boolean printNodesAtKDistanceFromLeaf(Node node, int k) { if (node == null) return false; if (node.left == null & node.right == null) { kDistance[0] = 1; return true; } if (printNodesAtKDistanceFromLeaf(node.left, k) && kDistance[0] <= k) { System.out.println(node.left.data); } if (printNodesAtKDistanceFromLeaf(node.right, k) && kDistance[0] <= k) { System.out.println(node.right.data); } kDistance[0]++; return true; } MacM If we want to get all nodes which are at “K” from any given node Here in this example I used value of node (int required node) .. from this value i WIll find my starting node and them track all nodes which are at “K” distance. public int PrintNodesAtKDistance(Node root, int requiredNode, int iDistance) { if ((root == null) || (iDistance 0) { PrintChildNodes(root.right, lPath – 1); return lPath – 1; } else if(lPath == 0) { Debug.WriteLine(root.value); } if(rPath > 0) { PrintChildNodes(root.left, rPath – 1); return rPath – 1; } else if (rPath == 0) { Debug.WriteLine(root.value); } return -1; } public void PrintChildNodes(Node aNode, int iDistance) { if (aNode == null) return; if(iDistance == 0) { Debug.WriteLine(aNode.value); } PrintChildNodes(aNode.left, iDistance – 1); PrintChildNodes(aNode.right, iDistance – 1); } Guest // Print_K_Distance_Nodes.cpp : Defines the entry point for the console application. // /* Problem: Given a Source Node in a binary tree, Print all nodes that are “K” hops from the given node.These nodes can be the children / grand – children, parent / grand – parent or siblings / grand – siblings. Note : -You cannot use a parent pointer to solve this problem. Example1: Input : k = 2, Node = 70 45 / / / / 22 70 / / / / 15 27 60 80 / / / / 8 17 75 90 / 72 78 Output = 90,75,22 Example2: Input : k = 2, Node = 22 45 / / / / 22 70 / / / / 15 27 60 80 / / / / 8 17 75 90 / 72 78 Output = 8,17,70 Solution Approach : In a binary tree if a node is numbered as N, then left and right children are numbered 2N and 2N+1 So for the given “Source Node”, find this tree_value, ie node “70” will have tree_value “3”. From the given Source Node’s tree_value, divide its tree value 2 ^ K times to reach k hops on parent side, and multiply the source node’s tree_value 2^k times to reach children then are K hops down. */ #include “stdafx.h” #include using namespace std; struct Node { Node *left; int data; Node *right; }; class Tree { public: Node *head; Node *prev; Node * tmp; bool l; bool r; int val; int max_val; int a[100]; Tree() { head = NULL; r = false; l = false; val = 0; max_val = 0; int array_index = 0; for (int i = 0; i < 100; i++) a[i] = 0; } void PopulateParentValues(int k, int tree_value, int &array_index, bool comingfromleft, bool comingfromright) { if (k 0) { if (tree_value % 2 == 0) { comingfromleft = true; comingfromright = false; PopulateChildrenValues(k – 2, ((tree_value/2) *2)+1, array_index); PopulateParentValues(k-1, tree_value/2, array_index, comingfromleft, comingfromright); } else { comingfromleft = false; comingfromright = true; PopulateChildrenValues(k – 2, ((tree_value/2) * 2), array_index); PopulateParentValues(k – 1, tree_value/2, array_index, comingfromleft, comingfromright); } } else return; } void PopulateChildrenValues(int k, int tree_value, int &array_index) { if (tree_value >0) if (k == 0) { a[array_index] = tree_value; array_index++; } else { if (k > 0) { PopulateChildrenValues(k – 1, tree_value * 2, array_index); PopulateChildrenValues(k – 1, (tree_value * 2) + 1, array_index); } } } void PrintArray() { for (int i = 0; i 0) cout << "[" << a[i] << "]" <data = data; head->left = NULL; head->right = NULL; } else { tmp = head; l = false; r = false; while (tmp != NULL) { prev = tmp; if (tmp->data >= data) { l = true; r = false; tmp = tmp->left; } else { r = true; l = false; tmp = tmp->right; } } if (r) { prev->right = new Node; prev->right->data = data; prev->right->left = NULL; prev->right->right = NULL; } if (l) { prev->left = new Node; prev->left->data = data; prev->left->left = NULL; prev->left->right = NULL; } } } void Inorder(Node *node) { if (node) { Inorder(node->left); // cout << "[" <data << "]" < max_val) max_val = val; Inorder(node->right); } } void GetVal(Node *node, int k, int node_val) { if (node) { GetVal(node->left, k, node_val * 2); if (node->data == k) { val = node_val; } GetVal(node->right, k, node_val * 2 + 1); } } void Print_K_Distance_Nodes(Node *node, int node_val) { if (node) { Print_K_Distance_Nodes(node->left, node_val * 2); for (int i = 0; i < 100; i++) if (node_val == a[i]) { cout <” <data <right, node_val * 2 + 1); } } void Populate_Parent_and_Children(int k, int tree_value, int &array_index) { PopulateChildrenValues(k, tree_value, array_index); PopulateParentValues(k, tree_value, array_index, false, false); } }; int _tmain(int argc, _TCHAR* argv[]) { Tree t; t.Insert(45); t.Insert(22); t.Insert(70); t.Insert(15); t.Insert(27); t.Insert(60); t.Insert(80); t.Insert(8); t.Insert(17); t.Insert(75); t.Insert(90); t.Insert(72); t.Insert(78); t.Inorder(t.head); t.GetVal(t.head, 80, 1); int h = 0; t.Populate_Parent_and_Children(1, t.val, h); //t.PopulateChildrenValues(1, t.val, h); //t.PopulateParentValues(1,t.val,h,false,false); cout << endl; cout << "————————-" << endl; t.PrintArray(); t.Print_K_Distance_Nodes(t.head, 1); return 0; } Guest test Romil How can we do it when we have to print the nodes at distance K from leaves and not root? Nitesh  
/*Elements with K distance*/
void kDistance(node *root, int dist)
{
     if(root == NULL)
       return;
     if(dist == 0)
       cout<<root->data<<endl;
     kDistance(root->left, dist-1);
     kDistance(root->right, dist-1);
}

 abhishek08aug C++ code:  
#include <iostream>
#include <stdlib.h>
using namespace std;
 
class tree_node {
  private:
    int data;
    tree_node * left;
    tree_node * right;
  public:
    tree_node() {
      left=NULL;
      right=NULL;
    }
    void set_data(int data) {
      this->data=data;
    }
    int get_data() {
      return this->data;
    }
    void set_left(tree_node * left) {
      this->left=left;
    }
    tree_node * get_left() {
      return this->left;
    }
    void set_right(tree_node * right) {
      this->right=right;
    }
    tree_node * get_right() {
      return this->right;
    }
    tree_node ** get_left_ref() {
      return &(this->left);
    }
    tree_node ** get_right_ref() {
      return &(this->right);
    }
};
 
class tree {
  private:
    tree_node * root;
    int size;
    void _recursive_insert(tree_node ** root_ref, int value);
    void _print_preorder(tree_node * root);
    void _print_inorder(tree_node * root);
    void _print_postorder(tree_node * root);
    int _find_size(tree_node * root);
    int _are_identical(tree_node * tn1, tree_node * tn2);
    int _find_height(tree_node * root);
    void _delete_tree(tree_node ** root);
    void _mirror(tree_node * root);
    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);
    void _print_array(int * array, int len);
    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);
    tree_node * _find_node(tree_node * root, int value);
    tree_node * _min_node(tree_node * root);
    void _print_level_order(tree_node * root);
    int _count_leaf_nodes(tree_node * root);
    int _is_bst(tree_node * root);
    int _children_sum(tree_node * root);
    void _ensure_children_sum(tree_node * root);
    int _diameter(tree_node * root);
    int _is_height_balanced(tree_node * root);
    int _leaf_path_sum(tree_node * root, int num);
    void _double_tree(tree_node * root);
    int _width(tree_node * root, int height, int level, int initialize_width_array);
    int _maximum(int array[], int len);
    void _print_k_distance_nodes(tree_node * root, int k, int distance);
  public:
    tree() {
      root=NULL;
      size=0;
    }
    void insert(int value);
    void recursive_insert(int value);
    void print_preorder();
    void print_inorder();
    void print_postorder();
    int find_size();
    int get_size() {
      return this->size;
    }
    int are_identical(tree t);
    int find_height();
    void delete_tree();
    void mirror();
    void print_paths();
    tree_node * lowest_common_ancestor(int a, int b);
    tree_node * find_node(int value);
    tree_node * min_node();
    void print_level_order();
    int count_leaf_nodes();
    int is_bst();
    int children_sum();
    void ensure_children_sum();
    int diameter();
    int is_height_balanced();
    int leaf_path_sum(int num);
    void double_tree();
    int width();
    void print_k_distance_nodes(int k);
};
 
void tree::insert(int value) {
  if(root==NULL) {
    root=new tree_node;
    root->set_data(value);
  } else {
    tree_node * parent=NULL;
    tree_node * current=root;
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    while(current!=NULL) {
      if(value<=current->get_data()) {
        parent=current;
        current=current->get_left();
      } else {
        parent=current;
        current=current->get_right();
      }
    }
    if(value<=parent->get_data() && parent->get_left()==NULL) {
      parent->set_left(new_node);
    } else if(value>parent->get_data() && parent->get_right()==NULL) {
      parent->set_right(new_node);
    }
  }
  size++;
}
 
void tree::recursive_insert(int value) {
  _recursive_insert(&root, value);
  size++;
}
 
void tree::_recursive_insert(tree_node ** root_ref, int value) {
  if(*root_ref==NULL) {
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    *root_ref=new_node;   
  } else {
    if(value<=(*root_ref)->get_data()) {
      _recursive_insert((*root_ref)->get_left_ref(), value);
    } else {
      _recursive_insert((*root_ref)->get_right_ref(), value);
    }
  }
}
 
void tree::print_preorder() {
  if(root==NULL) {
    return;
  }
  _print_preorder(root);
  cout<<endl;
}
 
void tree::_print_preorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  cout<<root->get_data()<<" ";
  if(root->get_left()!=NULL)
    _print_preorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_preorder(root->get_right());
}
 
void tree::print_inorder() {
  if(root==NULL) {
    return;
  }
  _print_inorder(root);
  cout<<endl;
}
 
void tree::_print_inorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_inorder(root->get_left());
  cout<<root->get_data()<<" ";
  if(root->get_right()!=NULL)
    _print_inorder(root->get_right());
}
 
void tree::print_postorder() {
  if(root==NULL) {
    return;
  }
  _print_postorder(root);
  cout<<endl;
}
 
void tree::_print_postorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_postorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_postorder(root->get_right());
  cout<<root->get_data()<<" ";
}

int tree::find_size() {
  return _find_size(root);
}

int tree::_find_size(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return 1+_find_size(root->get_left())+_find_size(root->get_right());
  }
}

int tree::are_identical(tree t) {
  return _are_identical(this->root, t.root);
}

int tree::_are_identical(tree_node * tn1, tree_node * tn2) {
  if(tn1==NULL && tn2==NULL) {
    return 1;
  } else if((tn1==NULL && tn2!=NULL) || (tn1!=NULL && tn2==NULL) || (tn1->get_data()!=tn2->get_data())) {
    return 0;
  } else {
    return _are_identical(tn1->get_left(), tn2->get_left()) && _are_identical(tn1->get_right(), tn2->get_right());
  }
}

int tree::find_height() {
  return _find_height(root);
}

int tree::_find_height(tree_node * root) {
  if(root==NULL) {
    return 0;
  }
  else {
    return 1+max(_find_height(root->get_left()), _find_height(root->get_right()));
  }
}

void tree::delete_tree() {
  _delete_tree(&root);
  size=0;
}

void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      _delete_tree((*root)->get_left_ref());
    }
    if((*root)->get_right()!=NULL) {
      _delete_tree((*root)->get_right_ref());
    }
    delete(*root);
    *root=NULL;
  }
}

/* alternate _delete_tree */
/*
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      tree_node * left_ref=(*root)->get_left();
      _delete_tree(&left_ref);
    }
    if((*root)->get_right()!=NULL) {
      tree_node * right_ref=(*root)->get_right();
      _delete_tree(&right_ref);
    }
    delete(*root);
    *root=NULL;
  }
}
*/

void tree::mirror() {
  _mirror(root);
}

void tree::_mirror(tree_node * root) {
  if(root==NULL) {
    return;
  }

  tree_node * temp=root->get_left();
  root->set_left(root->get_right());
  root->set_right(temp);
  _mirror(root->get_left());
  _mirror(root->get_right());
}

void tree::print_paths(){
   int max_path_length=find_height();
   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);
  _print_paths(root, path_nodes, 0);
}

void tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){
  if(root==NULL) {
    return;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_array(path_nodes, next_vacant_position);
  } else {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_paths(root->get_left(), path_nodes, next_vacant_position+1);
    _print_paths(root->get_right(), path_nodes, next_vacant_position+1);
  }
}

void tree::_print_array(int * array, int len) {
  int i;
  for(i=0; i<=len; i++) {
    cout<<*(array+i)<<" ";
  }
  cout<<endl;
}

tree_node * tree::find_node(int value) {
  return _find_node(root, value);
}

tree_node * tree::_find_node(tree_node * root, int value) {
  if(root==NULL || root->get_data()==value) {
    return root;
  } else if(value<=root->get_data()) {
    return _find_node(root->get_left(), value);
  } else {
    return _find_node(root->get_right(), value);
  }
}

tree_node * tree::lowest_common_ancestor(int a, int b) {
  return _lowest_common_ancestor(NULL, root, a, b);
}

tree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {
  if(root==NULL) {
    return root;
  } else if((root->get_data()==a && (root->get_left()->get_data()==b || root->get_right()->get_data()==b))
             || (root->get_data()==b && (root->get_left()->get_data()==a || root->get_right()->get_data()==a))) {
    return parent;
  } else if((_find_node(root->get_left(), a)!=NULL && _find_node(root->get_right(), b)!=NULL)
        || (_find_node(root->get_left(), b)!=NULL && _find_node(root->get_right(), a)!=NULL)) {
    return root; 
  } else if(_find_node(root->get_left(), a)!=NULL && _find_node(root->get_left(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_left(), a, b);
  } else if(_find_node(root->get_right(), a)!=NULL && _find_node(root->get_right(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_right(), a, b);
  } else {
    return NULL;
  }
}

tree_node * tree::min_node() {
  return _min_node(root);
}

tree_node * tree::_min_node(tree_node * root) {
  if(root==NULL || root->get_left()==NULL) {
    return root;
  } else {
    return _min_node(root->get_left());
  }
}

int tree::count_leaf_nodes() {
  return _count_leaf_nodes(root);
}

int tree::_count_leaf_nodes(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _count_leaf_nodes(root->get_left())+_count_leaf_nodes(root->get_right());
  }
}


int tree::is_bst() {
  return _is_bst(root);
}

int tree::_is_bst(tree_node * root) {
  static tree_node * previous=NULL;
  if(root==NULL) {
    return 1;
  } else {
    if(!_is_bst(root->get_left())) {
      return 0;
    }
    if(previous!=NULL && (previous->get_data())>(root->get_data())) {
      return 0;
    }
    previous=root;
    if(!_is_bst(root->get_right())) {
      return 0;
    }    
  }
}

int tree::children_sum() {
  return _children_sum(root);
}

int tree::_children_sum(tree_node * root) {
  if(root==NULL) {
    return 1;
  }
  if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  }
  else if(_children_sum(root->get_left()) && _children_sum(root->get_right())){
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }

    if(left_data+right_data==root->get_data()) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

void tree::ensure_children_sum() {
  _ensure_children_sum(root);
}

void tree::_ensure_children_sum(tree_node * root) {
  if(root==NULL || (root->get_left()==NULL && root->get_right()==NULL)) {
    return;
  } else {
    _ensure_children_sum(root->get_left());
    _ensure_children_sum(root->get_right());
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }
    root->set_data(left_data+right_data);
  }
}

int tree::diameter() {
  return _diameter(root);
}

int tree::_diameter(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return max(_find_height(root->get_left())+_find_height(root->get_right())+1, max(_diameter(root->get_left()), _diameter(root->get_left())));
  }
}

int tree::is_height_balanced() {
  return _is_height_balanced(root);
}

int tree::_is_height_balanced(tree_node * root) {
  if(root==NULL) {
    return 1;
  } else {
    int left_height=_find_height(root->get_left());
    int right_height=_find_height(root->get_right());
    if(abs(left_height-right_height)<=1 && _is_height_balanced(root->get_left()) && _is_height_balanced(root->get_left())) {
      return 1;
    } else {
      return 0;
    }
  }
}

int tree::leaf_path_sum(int sum) {
  return _leaf_path_sum(root, sum);
}

int tree::_leaf_path_sum(tree_node * root, int sum) {
  if(root==NULL) {
    return 0;
  } else if(root->get_data()==sum && root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _leaf_path_sum(root->get_left(), sum-root->get_data()) || _leaf_path_sum(root->get_right(), sum-root->get_data());
  }
}

void tree::double_tree() {
  _double_tree(root);
}

void tree::_double_tree(tree_node * root) {
  if(root==NULL) {
    return;
  } else {
    tree_node * new_node=new tree_node;
    new_node->set_data(root->get_data());
    tree_node * root_left=root->get_left();
    root->set_left(new_node);
    new_node->set_left(root_left);
    _double_tree(root_left);
    _double_tree(root->get_right());
  }
}

int tree::width() {
  int height=find_height();
  return _width(root, height, 0, 1);
}

int tree::_width(tree_node * root, int height, int level, int initialize_width_array) {
  static int width[]={0};
  if(initialize_width_array==1) {
    int i;
    for(i=0; i<height; i++) {
      width[i]=0;  
    }
  }
  if(root==NULL) {
    width[level]=width[level]+0;
  } else {
    width[level]=width[level]+1;
    _width(root->get_left(), height, level+1, 0);
    _width(root->get_right(), height, level+1, 0);
  }
  return _maximum(width, height);
}

int tree::_maximum(int array[], int len) {
  int i;
  int max=array[0];
  for(i=1; i<len; i++) {
    if(array[i]>max) {
      max=array[i];
    }
  }
  return max;
}

void tree::print_k_distance_nodes(int k) {
  _print_k_distance_nodes(root, k, 0);
  cout<<endl;
}

void tree::_print_k_distance_nodes(tree_node * root, int k, int distance) {
  if(root==NULL) {
    return;
  } else if(distance==k) {
    cout<<root->get_data()<<" ";
  } else {
    _print_k_distance_nodes(root->get_left(), k, distance+1);
    _print_k_distance_nodes(root->get_right(), k, distance+1);
  }
}

int main() {
  tree t1;

  t1.recursive_insert(20);
  t1.recursive_insert(10);
  t1.insert(30);
  t1.insert(8);
  t1.recursive_insert(12);
  t1.recursive_insert(28);
  t1.recursive_insert(32);
  t1.recursive_insert(6);
  t1.recursive_insert(9);
  t1.recursive_insert(50);
  t1.insert(14);
  t1.insert(26);

  t1.print_inorder();
  t1.print_k_distance_nodes(0);
  t1.print_k_distance_nodes(1);
  t1.print_k_distance_nodes(2);
  t1.print_k_distance_nodes(3);
  t1.print_k_distance_nodes(4);

  return 0;
}
 6 8 9 10 12 14 20 26 28 30 32 50 20 10 30 8 12 28 32 6 9 14 26 50 Anonymous How is the complexity O(n). I don’t understand…I think it should be O(2^k). Please explain. Ameya How about this modified level order traversal as a iterative solution for the above problem?  

/* Modified level order traversal to print all nodes at distance k from root */

#include <stdio.h>
#include <stdlib.h>
#define MAX_Q_SIZE 50
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */

struct node
{
    int data;
    struct node* left;
    struct node* right;
};
 
/* frunction prototypes */
struct node** createQueue(int *, int *);
void enQueue(struct node **, int *, struct node *);
struct node *deQueue(struct node **, int *,int *);
 
/* Given a binary tree, print its nodes in level order
   using array for implementing queue */
void printLevel(struct node* root,int k)
{
  int cnt1=0, cnt2= 0;
  int level=0;
  int rear=0, front=0;
  struct node **queue = createQueue(&front, &rear); 
  struct node *temp_node = root;
 
  while(temp_node)
  {

    if(level > k)
    break;

    if(level == k)
    printf("%d ", temp_node->data);
   
    if(temp_node->left){
      enQueue(queue, &rear, temp_node->left);
      cnt2++;
    }

    if(temp_node->right){
      enQueue(queue, &rear, temp_node->right);
      cnt2 ++;
    }
    
    if(cnt1 == 0)
    {
       cnt1=cnt2;
       cnt2=0;
       level ++; 
   
    }
    
    temp_node = deQueue(queue, &front,&rear);
    cnt1--;
  }
}
 
/*UTILITY FUNCTIONS*/
struct node** createQueue(int *front, int *rear)
{
  struct node **queue =
   (struct node **)malloc(sizeof(struct node*)*MAX_Q_SIZE); 
 
  *front = *rear = 0;
  return queue;
}
 
void enQueue(struct node **queue, int *rear, struct node *new_node)
{
  queue[*rear] = new_node;
  (*rear)++;
}    
 
struct node *deQueue(struct node **queue, int *front,int *rear)
{
   if(*front != *rear){
     (*front)++;
     return queue[*front - 1]; 
   }
   else
   return NULL;
}    
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
 
  return(node);
}
 
/* Driver program to test above functions*/
int main()
{
  struct node *root = newNode(1);
  root->left        = newNode(2);
  root->right       = newNode(3);
  root->left->left  = newNode(4);
  root->left->right = newNode(5);
  root->right->left = newNode(6);
  root->left->left->left=newNode(7);
  
  printf("Nodes at distance 2 are: \n");
  printLevel(root,2);
 
  getchar();
  return 0;
}


 ABHINAV JUST A PROTOTYPE  

function tree(depth,node)
{
if(depth==k)
{count++;return;}

if(node->left==null && node->right==null)
return;
tree(depth+1,node->left);
tree(depth+1,node->right);
}

function(0,root);

 ABHINAV i mean to say tree(0,root); PsychoCoder BFS Implementation to print nodes at K-distance from the root.  
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

typedef struct node {
  int data ;
  struct node *left ;
  struct node *right ;
}node;

typedef struct list {
  node *data ;
  struct list *next;
}list;

typedef struct queue {
  int count ;
  struct list *front ;
  struct list *rear;
}queue ;

void createQueue (queue **head) {
  *head = (queue *) malloc (sizeof(queue)) ;
  (*head)->count = 0 ;
  (*head)->front = NULL ;
  (*head)->rear = NULL ;
}

list* newList (node* data) {
  list *head ;
  head = (list *) malloc (sizeof(list)) ;
  head->next = NULL ;
  head->data = data ;
  return head ;
}

queue* enqueue (queue *head, node* data) {
  list *temp = newList (data) ;
  if (head->front == NULL) {
    head->front = temp ;
    head->rear = temp ;
    head->count ++ ;
  }
  else {
    head->rear->next = temp ;
    head->rear = head->rear->next ;
    head->count ++ ;
  }
  return head;
}

list* dequeue (queue **head) {
  list *temp ;
  if ((*head)->count == 0)
    return NULL ;
  if ((*head)->front != NULL) {
    temp = (*head)->front ;
    if ( (*head)->front == (*head)->rear ) {
      (*head)->front = NULL ;
      (*head)->rear = NULL ;
      (*head)->count -- ;
    }
    else {
      (*head)->front = (*head)->front->next ;
      (*head)->count -- ;
    }
  } 
  return temp ;
}

int isEmpty (queue *q) {
  return (q->count == 0);
}

node* newnode (int data) {
  node *head ;
  head = (node *) malloc (sizeof(node)) ;
  head->data = data ;
  head->left = NULL ;
  head->right = NULL ;
  return head ;
}

void printKLevelBFS (node *tree, int level) {
  queue *q ;
  list *temp ;
  int levelIndex = 0 ;

  /* Initialize the queue */
  createQueue (&q) ;

  enqueue (q,tree) ;
  /* Use INT_MAX as delimiter */
  enqueue (q,newnode(INT_MAX)) ;

  while ( !isEmpty (q) ) {

    if ( levelIndex > level )
      break ;

    temp = dequeue (&q) ;
  
    /* Check whether it is a delimiter or not */
    if ( temp->data->data != INT_MAX ) {
      /* If not then extreme right of this level
         is not reached till now. Enqueue its
         child */
      if ( levelIndex == level )
        printf ( "%d ", temp->data->data ) ;
  
      if (temp->data->left)
        q = enqueue (q, temp->data->left) ;

      if (temp->data->right)
        q = enqueue (q, temp->data->right) ;
    } else {
      /* If a delimiter is reached, then set the 
         delimiter of the next level. Because 
         extreme right is reached for this level */
      if ( !isEmpty(q) ) {
        enqueue (q,newnode(INT_MAX)) ;
        levelIndex ++ ;
      }
    }
  }

  while (!isEmpty (q))
    dequeue (&q) ;
  free (q) ;
}

int main() {

  node *root 	    = newnode(10);
  root->left        = newnode(8);
  root->right       = newnode(2);
  root->left->left  = newnode(3);
  root->right->left = newnode(6) ;
  root->right->right = newnode(7) ;

  printKLevelBFS (root ,1) ;
  free (root);
  return 1 ;
}
 Bugaboo You can extend the problem to find ‘k’ distance nodes from any node in either top or bottom direction as follows: – Do a level order traversal of the binary tree and store traversal in a queue (or stack) – But after each level, insert a special value (could be any character) to indicate end of a level – Traverse the queue (or stack) to first find the required element and display all nodes within ‘k’ distance away from current level of the required node. ashish We can print all nodes at level k by level order travesal shek8034 Hmmmm… Thats what i was thinking. Print all the nodes at k level (level order traversal upto level k). Saravanan Mani  
void printKDistant(node *root , int k)
{
   if(root == NULL)
      return;
   if( k == 0 )
   {
      printf( "%d ", root->data );
      return ;
   }
   else if(k>0) /* No need to visit childs below Kth level*/
   {
      printKDistant( root->left, k-1 ) ;
      printKDistant( root->right, k-1 ) ;
   }
}
 anusha can i get c program for finding rank of a node in BST ??  
/* Paste your code here (You may delete these lines if not writing code) */
 spandan  
void PrintKNodes(struct node* root,int k){

int ht=height(root);
if(k>ht)  return;

if(k==0) {
printf("%d",root->data);
return;
}

if(root->left!=NULL){ 
    printKnodes(root->left,k-1);
    printKnodes(root->right,k-1);
}

}
 this checks k>ht and terminates intially. wannabecoder its O(n^2) in worst case…no need of calculating height geekva Put these lines at the starting of the function.  
if(t==NULL) return 0;
if(t->left==NULL && t->right==NULL && k!=0) return;
 geekva A minor correction : first line is  
if(t==NULL) return;
 spandan  
if(root->left!=NULL) should be replaced by else.

 dev Is it possible to print all nodes (any direction) k distance from a given node, shouldn’t be just root node. http://wemeanourthoughts.blogspot.com/ Venki I think a wrapper that traces the given node and calling printKDistant() making that node as actual parameter can serve the purpose. Ashish @venky no i think it will not work. You can give child at distance k from node k, but not the parent. Mohit Ahuja but k level order traversal works http://shashank7s.blogspot.com/ wgpshashank @Venki..Can You Write the code for the same ? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
