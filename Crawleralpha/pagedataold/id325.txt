Space and time efficient Binomial Coefficient  - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Space and time efficient Binomial Coefficient Write a function that takes two parameters n and k and returns the value of Binomial Coefficient C(n, k). For example, your function should return 6 for n = 4 and k = 2, and it should return 10 for n = 5 and k = 2. We have discussed a O(n*k) time and O(k) extra space algorithm in this post. The value of C(n, k) can be calculated in O(k) time and O(1) extra space. 
C(n, k) = n! / (n-k)! * k!
        = [n * (n-1) *....* 1]  / [ ( (n-k) * (n-k-1) * .... * 1) * 
                                    ( k * (k-1) * .... * 1 ) ]
After simplifying, we get
C(n, k) = [n * (n-1) * .... * (n-k+1)] / [k * (k-1) * .... * 1]

Also, C(n, k) = C(n, n-k)  // we can change r to n-r if r > n-r Following implementation uses above formula to calculate C(n, k) 
// Program to calculate C(n ,k)
#include <stdio.h>

// Returns value of Binomial Coefficient C(n, k)
int binomialCoeff(int n, int k)
{
    int res = 1;

    // Since C(n, k) = C(n, n-k)
    if ( k > n - k )
        k = n - k;

    // Calculate value of [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]
    for (int i = 0; i < k; ++i)
    {
        res *= (n - i);
        res /= (i + 1);
    }

    return res;
}

/* Drier program to test above function*/
int main()
{
    int n = 8, k = 2;
    printf ("Value of C(%d, %d) is %d ", n, k, binomialCoeff(n, k) );
    return 0;
}
 Value of C(8, 2) is 28 Time Complexity: O(k) Auxiliary Space: O(1) This article is compiled by Aashish Barnwal and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. Alok Kumar Good to know, but not practical. In most of the cases overflow is certain. K.kaushik The above program gives negative result for 100 C 15 or 100 C 18 or 100 C 19 but still it gives positive result for 100 C 20 or 100 C 25. Why this strange behaviour ?  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.facebook.com/barnwal.aashish Aashish This is because 100 C 15 > 100 C 25. The former shows the negative value because it goes out of range. Please do some paper work. K.kaushik yes obviously 10 C 15 < 10 C 25. So 10 C 25 may show negative if it goes out of scope. but here 10 C 15 is showing negative, not 10 C 25. In java iterative implementation (same as this one) I have used datatype 'long' instead of 'int'. but still 10 C 15 is negative but 10 C 25 is positive. Please clear the confusion. http://www.facebook.com/barnwal.aashish Aashish Apologies. Please see the updated comment. Anuj Siroi  
How is 100 C 15 > 100 C 25 ?? If so then
100 C 15 > 100 C 25 
=> 100! / 15! * 85! > 100! /25! * 75!
=> 15! * 85! < 25! * 75!
=> 85 * 84 * ..... * 76 < 25 * 24 * ..... * 16

Is it possible ???? 
 GeeksforGeeks The reason for negative values seems to be integer overflow. The program works fine for small values of nCr. geekguy Use Java’s BigInteger ! Easiest Solution ! Swapnil Just a small error.You can’t define int inside for(). you need to define it before the loop.  
/* Paste your code here (You may delete these lines if not writing code) */
 Aashish According to c-99 standard, you can define a variable inside loops also. Check here: https://ideone.com/pOWZM Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
