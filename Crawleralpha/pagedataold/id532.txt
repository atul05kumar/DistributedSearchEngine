Practice questions for Linked List and Recursion - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Practice questions for Linked List and Recursion Assume the structure of a Linked List node is as follows. 
struct node
{
  int data;
  struct node *next;
};
 Explain the functionality of following C functions. 1. What does the following function do for a given Linked List? 
void fun1(struct node* head)
{
  if(head == NULL)
    return;
 
  fun1(head->next);
  printf("%d  ", head->data);
}
 fun1() prints the given Linked List in reverse manner. For Linked List 1->2->3->4->5, fun1() prints 5->4->3->2->1. 2. What does the following function do for a given Linked List ? 
void fun2(struct node* head)
{
  if(head== NULL)
    return;
  printf("%d  ", head->data); 

  if(head->next != NULL )
    fun2(head->next->next);
  printf("%d  ", head->data);   
}
 fun2() prints alternate nodes of the given Linked List, first from head to end, and then from end to head. If Linked List has even number of nodes, then fun2() skips the last node. For Linked List 1->2->3->4->5, fun2() prints 1 3 5 5 3 1. For Linked List 1->2->3->4->5->6, fun2() prints 1 3 5 5 3 1. Below is a complete running program to test above functions. 
#include<stdio.h>
#include<stdlib.h>

/* A linked list node */
struct node
{
  int data;
  struct node *next;
};


/* Prints a linked list in reverse manner */
void fun1(struct node* head)
{
  if(head == NULL)
    return;

  fun1(head->next);
  printf("%d  ", head->data);
}

/* prints alternate nodes of a Linked List, first 
  from head to end, and then from end to head. */
void fun2(struct node* start)
{
  if(start == NULL)
    return;
  printf("%d  ", start->data); 

  if(start->next != NULL )
    fun2(start->next->next);
  printf("%d  ", start->data);
}

/* UTILITY FUNCTIONS TO TEST fun1() and fun2() */
/* Given a reference (pointer to pointer) to the head
  of a list and an int, push a new node on the front
  of the list. */
void push(struct node** head_ref, int new_data)
{
  /* allocate node */
  struct node* new_node =
          (struct node*) malloc(sizeof(struct node));
 
  /* put in the data  */
  new_node->data  = new_data;
 
  /* link the old list off the new node */
  new_node->next = (*head_ref);
 
  /* move the head to point to the new node */
  (*head_ref)    = new_node;
}
 
/* Drier program to test above functions */
int main()
{
  /* Start with the empty list */
  struct node* head = NULL;

  /* Using push() to construct below list
    1->2->3->4->5  */
  push(&head, 5);
  push(&head, 4);
  push(&head, 3);
  push(&head, 2);
  push(&head, 1);   
 
  printf("\n Output of fun1() for list 1->2->3->4->5 \n");
  fun1(head);

  printf("\n Output of fun2() for list 1->2->3->4->5 \n"); 
  fun2(head);
        
  getchar();
  return 0;
}
 Please write comments if you find any of the answers/explanations incorrect, or you want to share more information about the topics discussed above.           Related Topics: Given a linked list, reverse alternate nodes and append at the end Pairwise swap elements of a given linked list by changing links Self Organizing List | Set 1 (Introduction) Merge a linked list into another linked list at alternate positions QuickSort on Singly Linked List Delete N nodes after M nodes of a linked list Design a stack with operations on middle element Swap Kth node from beginning with Kth node from end in a Linked List Tags: Recursion Tweet Writing code in comment? Please use ideone.com and share the link here. Hina can anyone give me examples regarding linked list implementation in C++ like we have implementations of list in telephone directories.. can i hav such type of examples ???? plzzz if anyone have it then do post it vicky Hi Hina, here is an example for link list implementation. yes in c++ you can implement it too. suppose for an employee enrollment system, each employee has some set of data to be added in the system, but at the same time it is not necessary all employee have same amount of data so here we can use linked list. To add different amount of data for each employee. And even it is useful when you are not aware of how many employee should be added in the future. You can dynamically add as much employee as needed by the system Hina Thanks alot for ur help but here i got stuck that when we deal with different data sets then how we change our logic in functions am totally zero in this perspective…:( CP nice Qn .. . thanks mdev Not able to comment…. mdev Nice Questions… greek okay PRAVEEN want more questions…  
/* Paste your code here (You may delete these lines if not writing code) */
 hARRY Which is better Recurssion or iterative for reversing a linked list vicky Recursion is overhead for the system as internally the system will convert it to iterative expression hARRy Thanks  
/* Paste your code here (You may delete these lines if not writing code) */
 ajit Either way, time complexity is gonna be o(n). anamika func2() will throw segmentation fault in the case where number of entries in the list are even as head->next->next will ask for address of a node that does not exist. The code should also check and return for head->next = NULL;  
/* Paste your code here (You may delete these lines if not writing code) */
 kartik @anamika: Please take a closer look at the function. It calls fun2(start->next->next) only when start->next is not NULL.  
  if(start->next != NULL )
    fun2(start->next->next);
 hARRY Your are wrong!! http://www.geeksforgeeks.org Hermoine Sorry You are wrong……… Sunil Nice questions to test our recursive skills. Gyan Nice questions to brush up…Thanks. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
