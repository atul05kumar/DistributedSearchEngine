Sort an array of 0s, 1s and 2s - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Sort an array of 0s, 1s and 2s Given an array A[] consisting 0s, 1s and 2s, write a function that sorts A[]. The functions should put all 0s first, then all 1s and all 2s in last. Example Input = {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1}; Output = {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2} The problem is similar to our old post Segregate 0s and 1s in an array, and both of these problems are variation of famous Dutch national flag problem. The problem was posed with three colours, here `0′, `1′ and `2′. The array is divided into four sections: a[1..Lo-1] zeroes (red) a[Lo..Mid-] ones (white) a[Mid..Hi] unknown a[Hi+1..N] twos (blue) The unknown region is shrunk while maintaining these conditions Lo := 1; Mid := 1; Hi := N; while Mid <= Hi do Invariant: a[1..Lo-1]=0 and a[Lo..Mid-1]=1 and a[Hi+1..N]=2; a[Mid..Hi] are unknown. case a[Mid] in 0: swap a[Lo] and a[Mid]; Lo++; Mid++ 1: Mid++ 2: swap a[Mid] and a[Hi]; Hi– — Dutch National Flag Algorithm, or 3-way Partitioning — [YOU NEED A JavaScript ENABLED BOWSER!!!] Part way through the process, some red, white and blue elements are known and are in the “right” place. The section of unknown elements, a[Mid..Hi], is shrunk by examining a[Mid]: | 0 0 0 1 1 1 ? ? ? ? 2 2 2 ^     ^     ^ |     |     | Lo    Mid   Hi Examine a[Mid]. There are three possibilities: a[Mid] is (0) red, (1) white or (2) blue. Case (0) a[Mid] is red, swap a[Lo] and a[Mid]; Lo++; Mid++ 0 0 0 0 1 1 1 ? ? ? 2 2 2 ^     ^   ^ |     |   | Lo    Mid Hi Case (1) a[Mid] is white, Mid++ 0 0 0 1 1 1 1 ? ? ? 2 2 2 ^       ^   ^ |       |   | Lo      Mid Hi Case (2) a[Mid] is blue, swap a[Mid] and a[Hi]; Hi– 0 0 0 1 1 1 ? ? ? 2 2 2 2 ^     ^   ^ |     |   | Lo    Mid Hi Continue until Mid>Hi. 
#include<stdio.h>

/* Function to swap *a and *b */
void swap(int *a, int *b);

void sort012(int a[], int arr_size)
{
   int lo = 0;
   int hi = arr_size - 1;
   int mid = 0;

   while(mid <= hi)
   {
      switch(a[mid])
      {
         case 0:
           swap(&a[lo++], &a[mid++]);
           break;
         case 1:
           mid++;
           break;
         case 2:
           swap(&a[mid], &a[hi--]);
           break;
      }
   }
}

/* UTILITY FUNCTIONS */
void swap(int *a, int *b)
{
  int temp = *a;
  *a = *b;
  *b = temp;
}

/* Utility function to print array arr[] */
void printArray(int arr[], int arr_size)
{
  int i;
  for (i = 0; i < arr_size; i++)
    printf("%d ", arr[i]);
  printf("\n");
}

/* driver program to test */
int main()
{
  int arr[] = {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  int i;

  sort012(arr, arr_size);

  printf("array after segregation ");
  printArray(arr, arr_size);

  getchar();
  return 0;
}
 Time Complexity: O(n) The above code performs unnecessary swaps for inputs like 0 0 0 0 1 1 1 2 2 2 2 2 : lo=4 and mid=7 and hi=11. In present code: first 7 exchanged with 11 and hi become 10 and mid is still pointing to 7. again same operation is till the mid <= hi. But it is really not required. We can put following loop before switch condition to make sure that hi is pointing to location which is not 2 so that it would eliminate unnecessary swaps of 2. 
while ((a[hi]==2) && hi >= mid)
    –hi;
if (hi < mid)
    break;
 Thanks to rka for suggesting this change. Source: http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Sort/Flag/ Please write comments if you find the above code/algorithm incorrect, or find better ways to solve the same problem.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Sahil Jain Hi all, We can also do this Qn in this way. Set left=0, right=n-1. If a[left]!=0 and a[right]==0 => swap a[left] and a[right] else if(a[left]==0) left++ and if(a[right]!=0) right–; keep on moving in this manner in a while loop (left<=right). Now upon exiting this while loop, set right =n-1, but dont change the value of left. After this while loop, create another while loop (left<=right) and use the same logic to swap 1's and 2's. Time Complexity: O(n) Find complete code here. http://codepad.org/3hsgUGLY Let me know if you find any error. vivek Hello,GeeksforGeeks this is my implementation to solve the problem please check and give ur comment tooo,I’ll wait for ur correction if it is needed can we not solve the problem using count sort.here is the simple algorithm void count(int a[],int n) { int temp[3]={0}; //temp array to store the number of 0,1,2 occurs in the array a[] for(int i=0;i<n;i++) { temp[a[i]]++; } //for inserting value into the array a[] for(i=0;i<temp[0];i++) a[j++]=temp[0]; for(i=0;i<temp[1];i++) a[j++]=temp[1]; for(i=0;i<temp[2];i++) a[j++]=temp[2]; //for printing the array a[] in sorted order for(i=0;i<n;i++) printf("%d ",a[i]); } manish nice solution vivek Hello,@d4868dd64c637016efc578852ad7cd68:disqus this is my implementation to solve the problem please check and give ur comment tooo,I’ll wait for ur correction if it is needed can we not solve the problem using count sort.here is the simple algorithm void count(int a[],int n) { int temp[3]={0}; //temp array to store the number of 0,1,2 occurs in the array a[] for(int i=0;i<n;i++) { temp[a[i]]++; } //for inserting value into the array a[] for(i=0;i<temp[0];i++) a[j++]=temp[0]; for(i=0;i<temp[1];i++) a[j++]=temp[1]; for(i=0;i<temp[2];i++) a[j++]=temp[2]; //for printing the array a[] in sorted order for(i=0;i<n;i++) printf("%d ",a[i]); } draganwarrior solution using partioning http://ideone.com/TefXpF O(n) time draganwarrior can This problem be solved using standered partionning method first consider pivot ==0 then pivot ==1 wakeup123 In the explanation part which suggests way to optimize the given method,–hi is mistyped with -hi. shek8034 No need to do all this Count Sort or Dutch National Flag Algo. I have a Very simple and working approach with O(n) Time complexity and O(1) Space complexity. Works for all cases. Algorithm: Since we have to move all 0 to left and 2 to right, we consider only these two values and do not care about 1, as they automatically get adjusted to center. 1)Take two variables start=0 and end=N-1. 2)start will store the index before which all 0’s are stored. 3)end will store the index after which all 2’s are stored. 4)Traverse the array and check for 0 and 2. (a) if arr[i] is 0 check if arr[start] !=0 (then arr[start] should either be 1 or 2, so swap arr[i] with start index to move arr[i] to its correct position and increment start) (b) if it is 2 check if arr[end] !=2 (then arr[end] should either be 0 or 1, so swap arr[i] with end index to move arr[i] to its correct position and decrement end) 5)You have sorted the array inplace with minimum no of swaps  
#include<stdio.h>
#include<algorithm>
#include<iostream>
using namespace std;

int main()
{
	int arr[] = {0,1,2,2,1,0};
	int N = sizeof(arr)/sizeof(int);
	int i = 0, start = 0, end = N-1,no_of_swaps = 0;
	while(i<=end)
	{
		if(arr[i] == 0)//check for 0
		{
			if(arr[start] != 0)
			{
				swap(arr[i], arr[start]);
				no_of_swaps++;
			}
			else
				i++;
			start++;
		}
		else if(arr[i] == 2)//check for 2
		{
			if(arr[end] != 2)
			{
				swap(arr[i], arr[end]);
				no_of_swaps++;
			}
			end--;
		}
		else//do nothing for 1
			i++;
	}
	for(i = 0;i < N;i++)
		cout<<arr[i];
	cout<<endl;
	cout<<no_of_swaps<<endl;//printing how many swaps made
	return 0;
}
 @GeeksForGeeks : If you find it correct, then please add it as another method. Oshonic a more compaq code with similar approach…  
#include<stdio.h>
int main()
{
    int a[8] = {0,0,2,1,0,2,1,2};
    int i,j,k,t;
    for( i=0, j=0, k=7; j < k ; j++ )
    {
        if( a[j] == 0 )
        {
            t = a[i];
            a[i] = a[j];
            a[j] = t;
            i++;
        }
        if( a[j] == 2 )
        {
            t = a[k];
            a[k] = a[j];
            a[j] = t;
            k--;
        }
    }
    for( i = 0 ; i < 8 ; i++)
    {
        printf("%d ",a[i]);
    }
    return 0;
}
 shek8034 Your code will do some unnecessary swaps. You have to add some more checks as i have done in my code. Rohit Nice solution anonymous Cant we just simply count the no. of 0s,1s and 2s in one pass and then fill the array accordingly. That would also take O(n) time. In what situation does Dutch National Flag solution prove more useful ??? Please elaborate Ganesh You can find the java code here: /** * Given an array A[] consisting 0s, 1s and 2s, write a function that sorts A[]. * The functions should put all 0s first, then all 1s and all 2s in last. * Example: * Input = {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1}; * Output = {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2} * * @author GAPIITD * */ public class SortAnArrayOf0s1sAnd2s { public static void main(String[] args) { int arr[] = {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1}; sortAnArrayOf0s1sAnd2s(arr); } private static void sortAnArrayOf0s1sAnd2s(int[] arr) { int start = 0, end = arr.length – 1, i = 0; while (i < arr.length && i <= end) { switch(arr[i]) { case 0: swap(arr, start, i); start++; i++; break; case 1: i++; break; case 2: swap(arr, end, i); end–; } } for (int j : arr) System.out.print(j + " "); } private static void swap(int[] arr, int j, int i) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } vick i think the statements under “case 0″ should be like this.. if(lo != mid) swap(&a[lo],&a[mid]); lo++; mid++; this wil avoid the unnecessary call to the swap function as in the case when the array is {0,0,0,0,1,1,1,2,2} plz crct me if i m wrong..  
/* Paste your code here (You may delete these lines if not writing code) */
 vick i think the statements under “case 0″ should be like this.. if(lo != mid) swap(&a[lo],&a[mid]); lo++; mid++; this wil avoid the unnecessary call to the swap function as in the case when the array is {0,0,0,0,1,1,1,2,2} plz crct me if i m wrong.. Harjit SIngh  
/* Paste your code here (You may delete these lines if not writing code) */
#include<stdio.h>

#include<stdlib.h>

void swap(int a[],int first,int second)

{

    int temp;

    temp=a[first];

    a[first]=a[second];

    a[second]=temp;

}

void arrange(int a[],int size)

{

    int zero=0,one=0,two=size-1;

    while(one<=two)

    {

        switch(a[one])

        {

            case 0:

                    swap(a,zero,one);

                    zero++;

                    one++;

                    break;

            case 1:

                    one++;

                    break;

            case 2:

                    swap(a,one,two);

                    two--;

                    break;



        }

    }

}



int main()

{

    int arr[] = {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1};

    int arr_size = sizeof(arr)/sizeof(arr[0]);

    int i;

    arrange(arr, arr_size);

    for(i=0;i<arr_size;i++)

        printf("%d ",arr[i]);

return 0;

}
 Mohammad Shahid above code will break with following input 2 0 2 2 2 0 1 0 2 1 Shashi Do it with the help of singly linked list… red We can use two indexes. One from the left and one from the right. Move both the indexes towards each other. Swap when the right index has 0 and the left does not. We will have all 0’s on the left. Now do the same for the remaining array once again for 1’s and 2’s. O(n) and In place.  
/* Paste your code here (You may delete these lines if not writing code) */
 Shyam Dude you needn’t repeat it twice for 1’s and 2’s… if you repeat the loop for 1’s then automatically the array will have 2’s in the correct positions  
/* Paste your code here (You may delete these lines if not writing code) */
 swetha void segregate(int a[30],int n) { int count[3]={0}; for(int i=0;i<n;i++) count[a[i]]++; int flag=0; for(int i=0;i<3;i++) for(int j=0;j<count[i];j++) a[flag++]=i; } KK123 CHECK THIS ONE:  
int i = 0, s = 0, last = n-1;
while(i<=last){
if(a[i] == 0 && i!=s)
{
       swap(a[i], a[s]);
       s++;
}
else if(a[i] == 2 and i!=last)
{
       swap(a[i], a[last]);
       last--;
}
else 
       i++;
}
 Algoseekar hi GeeksforGeeks I Tried National Flag Algo for Doubly Linked Its but it Not Working for DLL so can you have a look at my algo & let me know problems in this sort doubly linked list of 0,1,2 running version of the code https://ideone.com/gx3GF Algoseekar @sandeep,GeeksforGeeks I Tried National Flag Algo for Doubly Linked Its but it Not Working for DLL so can you have a look at my algo & let me know problems in this sort doubly linked list of 0,1,2 running version of the code https://ideone.com/gx3GF qbeing Is the suggested solution doing a stable sort? kartik Yes, it is stable and I think that is the reason this method should be preferred over the method suggested by Shekhu when 0, 1 and 2 are keys. qbeing Shekhu’s solution rewrites the array, so its definitely not stable. qbeing I was trying to work through this solution to check if its stable. As the last block of 2s is written from end, and value of hi is decremented. Won’t the order of 2s get reversed (2s will be in reverse order of there appearance). qbeing Also, the order of 1s would also not be retained. Only the order of 0s is same as their appearance. Am I missing something in the solution ? kartik Yes, that is the case. I was wrong in my previous comment. Thanks!! Algoseekar @kartik…hi I Tried National Flag Algo for Doubly Linked Its but it Not Working for DLL so can you have a look at my algo & let me know problems in this sort doubly linked list of 0,1,2 running version of the code https://ideone.com/gx3GF Rajiv Simplest way is to count the number of 0s, 1s and 2s and then just fill the resultant array. Solution is O (n) public static int[] sort(int[] a) { if (a != null && a.length > 0) { int zeroCount = 0; int oneCount = 0; int twoCount = 0; //Find out the count for 0, 1 and 2 for (int i = 0; i < a.length; i++) { if (a[i] == 0) { zeroCount++; } else if (a[i] == 1) { oneCount++; } else if (a[i] == 2) { twoCount++; } else { throw new RuntimeException("Array cannot contain anything but 0, 1 or 2"); } } //Fill a based on counts of 0, 1 and 2 int index = 0; for (int i = 0; i < zeroCount; i++) { a[index++] = 0; } for (int i = 0; i < oneCount; i++) { a[index++] = 1; } for (int i = 0; i < twoCount; i++) { a[index++] = 2; } } return a; } Sandeep @Rajiv: Thanks for sharing code, the method is simple indeed. The method also works fine for the simple problem of sorting an array of 0s, 1s and 2s, but this method won’t work if these 0s, 1s and 2s are keys to some records. For example, sorting all columns in MS Excel according to one column that contains only 0s, 1s and 2s. ap @Sandeep : Can u please explain in more detail what difference does it make when 0s, 1s, 2s are keys rather not the elements of an array. Thank you ap do u mean that if they are keys, they can not be stored in the variables???? Sreenivasan AC assume the array values are the keys to objects class student { int subject_code; //KEY_VALUE 0/1/2 char name[100]; }; here subject_code is key value (0,1,2) with which we are sorting these records. counting and replacing will not work. We cant replace subject_code to other records with different names. evo {{{ public static int[] sort(int[] a) { int numCounts[3]=new int[]{0,0,0}; int tail=0; for (int i = 0; i < a.length; i++) { numCounts[ a[i] ]++; } for (int i = 0; i < numCounts.length; i++) { count=numCounts[i]; tail+=count; for(int j=tail;j<(tail+count);j++) a[j]=i; } return a; } }}} donbosio hey . to run through the loop u have used sizeof(arr)/sizeof(arr[0]) but if u go through the link http://http://geeksforgeeks.org/?p=6594#comment-2399 u will find that it is wrong . plz elaborate. am i getting something wrong? rka First i think the loop term condition should be mid<=hi is correct. Becasue for following condition the result would not be correct if the loop condition is not mid <=hi 0 0 0 1 1 1 1 2 0 2 2 :: where lo=3; mid=8 and hi=9 if condition is mid <hi then output would be: 0 0 0 1 1 1 1 0 2 2 2 Because loop will terminate as soon as it replace hi with mid both become 8. But if the condition is mid <= hi then output would be: 0 0 0 0 1 1 1 1 2 2 2 because after swaping the 8 and 9th member it will again loop for 8th member (which is 0 after swaping) and exchange it with 3th member. Also, i think inside the while loop there should be one more loop before switch condition to make sure that hi is pointing to member which is not 2 otherwise it is neccessary perform swap operation. for example in below condition: 0 0 0 0 1 1 1 2 2 2 2 2 : lo=4 and mid=7 and hi=11 Now in present code: first 7 exchanged with 11 and hi become 10 and mid is still pointing to 7. again same operation is till the mid <= hi. But it is really not required. We can put following loop before switch condition to make sure that hi is pointing to location which is not 2 so that it would elminate unneccesay swap of 2. while ((a[hi]==2) && hi >= mid) –hi; if (hi<mid) break; GeeksforGeeks @rka: Thanks for suggesting the optimization. We have included it to the original post. Rohit @rka and @geeksforgeeks: How is lo=4 until we have a similar while loop for lo as in the case of hi, before switch statement? I think we need to add the following loop before switch statement to make number of swaps 0 in your example(already sorted). while ((a[lo]==0) && lo mid) break; Please let me know if I am missing something. rbk I think we can use the counting sort here, because the range of numbers in the input array is bounded. The space requirement will be very less as as there are only 3 types of numbers. Count the number of 0s, 1s and 2s and change the array accordingly. Time Complexity O(n) Space complexity O(1) Darpok Perfect that works. But the problem is that the algo will not work for a real life piece of code wherein we are trying to sort an array of objects whose key is an int which can take value 0, 1 or 2. With just counting we would loose rest of the objects. Ishtiaq Counting sort is stable, so you won’t loose the order of elements. rbk I guess the best way in this case would be to just use counting sort because the range of the numbers in the input array is bounded. Just count the numbers of 0s, 1s and 2s and change the array accordingly. eclipse awesome dude…… I too thought same…. Anonymous I thought the same. The best idea is to use Counting sort which avoids complex maintenance of boundary indices. brian Hi, what makes this problem different than a regular sort problem? I can use any sorting algorithm, insertion, merge, quick, heapsort, to achieve the goal. What makes this problem special? I am kind of confused. kartik @brian, Unlike the regular sorting problems, this problem can be solved by doing single traversal of the array. padhu In this problem there are only 3 types of elements you encounter…but in sorting problem we can have elements of n different types….so when solving this problem we are using that property.. RaIn Yes, you are correct. But when you use the sorting procedures you mentioned it would take O(nlgn) time. But using the method mentioned here, you could sort the array in O(n) time. Also in just one pass. abhimanu A typo after the last diagram. Continue until “Mid < Hi". Dheeraj I think it is ok. This is “until”, not while Ranjith @karthik: The complexity is still O(n). Check out the notes section in http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Sort/Flag/. What geeksforgeeks@ has given is a reference to a generic solution(which is always good), but for this particular problem Shekhu’s solution is much simpler Shekhu 1) Count the number of 0s, 1s and 2s. Say counts are p, q and r. 2) Place p 0s first, then q 1s and finally r 2s. Time Complexity: O(n) Ranjith geeksforgeeks@ should have ‘like’ option .. @Shekhu: Thanks for the simple and straight forward solution. RaIn RaIn: RaIn Another approach would be: initialize three int variables, i=-1, j=-1 , k=0; if(A[k]==1) Swap(A,k,j+++1); if(A[k]==0) Swap(A,k,i+++1); Swap(A,k,j+++1); Swap(A,p,q) routine would swap the elements at index p and q of array A when p!=q. kartik @Shekhu: Your solution is simple and short, but it traverses the array twice. The solution by @geeksforgeeks sorts array in a single pass. alexsp There is a problem when 0, 1 and 2 are only keys of items. In such case you can’t use counting sort inplace and you have to use algo describe in the article. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
