Convert a given Binary Tree to Doubly Linked List | Set 3 - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Convert a given Binary Tree to Doubly Linked List | Set 3 Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (left most node in BT) must be head node of the DLL. Following two different solutions have been discussed for this problem. Convert a given Binary Tree to Doubly Linked List | Set 1 Convert a given Binary Tree to Doubly Linked List | Set 2 In this post, a third solution is discussed which seems to be the simplest of all. The idea is to do inorder traversal of the binary tree. While doing inorder traversal, keep track of the previously visited node in a variable say prev. For every visited node, make it next of prev and previous of this node as prev. Thanks to rahul, wishall and all other readers for their useful comments on the above two posts. Following is C++ implementation of this solution. 
// A C++ program for in-place conversion of Binary Tree to DLL
#include <iostream>
using namespace std;

/* A binary tree node has data, and left and right pointers */
struct node
{
    int data;
    node* left;
    node* right;
};

// A simple recursive function to convert a given Binary tree to Doubly
// Linked List
// root --> Root of Binary Tree
// head --> Pointer to head node of created doubly linked list
void BinaryTree2DoubleLinkedList(node *root, node **head)
{
    // Base case
    if (root == NULL) return;

    // Initialize previously visited node as NULL. This is
    // static so that the same value is accessible in all recursive
    // calls
    static node* prev = NULL;

    // Recursively convert left subtree
    BinaryTree2DoubleLinkedList(root->left, head);

    // Now convert this node
    if (prev == NULL)
        *head = root;
    else
    {
        root->left = prev;
        prev->right = root;
    }
    prev = root;

    // Finally convert right subtree
    BinaryTree2DoubleLinkedList(root->right, head);
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
node* newNode(int data)
{
    node* new_node = new node;
    new_node->data = data;
    new_node->left = new_node->right = NULL;
    return (new_node);
}

/* Function to print nodes in a given doubly linked list */
void printList(node *node)
{
    while (node!=NULL)
    {
        cout << node->data << " ";
        node = node->right;
    }
}

/* Driver program to test above functions*/
int main()
{
    // Let us create the tree shown in above diagram
    node *root        = newNode(10);
    root->left        = newNode(12);
    root->right       = newNode(15);
    root->left->left  = newNode(25);
    root->left->right = newNode(30);
    root->right->left = newNode(36);

    // Convert to DLL
    node *head = NULL;
    BinaryTree2DoubleLinkedList(root, &head);

    // Print the converted list
    printList(head);

    return 0;
}
 Output: 25 12 30 10 36 15 Note that use of static variables like above is not a recommended practice (we have used static for simplicity). Imagine a situation where same function is called for two or more trees, the old value of prev would be used in next call for a different tree. To avoid such problems, we can use double pointer or reference to a pointer. Time Complexity: The above program does a simple inorder traversal, so time complexity is O(n) where n is the number of nodes in given binary tree. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. Pranav Sawant Don’t we need to set the left of head to null?? http://www.phoenixuser.blogspot.com GOPI GOPINATH why should we do inorder traversal alone for this ?? cant we do a level order traversal and just create a DLL ?????? Jonathan With level-order traversal we would get the wrong DLL. The instructions say we should end up with a list that is the same as an inorder traversal of the tree, not level order. Thus, we do an inorder traversal. Alien Amazingly simple solution !!! Thank you geeksforgeeks Abhishek Kumar thiz iz an awesome for conversion of BT to DLL..!!!!! Aj The way I tried to do it was maintaining the tree structure while creating the linked list. I tried doing it for singly linked list and my node looked is like struct node { int data; node *right; node *left; node *next; // I’m not touching right and left pointer for sake of maintaining tree structure. Using a new next pointer for linked list. }; So if you want to traverse the tree, pass the root node to inorder routine and if you want to print the linked list just past the head pointer to it. Code —————- #include #include #include #include #include #include using namespace std; struct node { int data; node *right; node *left; node *next; }; node * createNode(int n) { node *new_node = (node *)malloc(sizeof(node)); new_node->data = n; new_node->right = NULL; new_node->left = NULL; new_node->next = NULL; return new_node; } void inOrder(node *n) { if(n==NULL) return; inOrder(n->left); printf(“%dn”,n->data); inOrder(n->right); } void bstToList(node *root, node **head) { if(root == NULL) return; static node *prev = NULL; bstToList(root->left, head); if(prev == NULL) { *head=root; } else { prev->next = root; } prev=root; bstToList(root->right, head); } void printList(node *node) { while (node!=NULL) { cout <data <next; } } int main(int argc, char *argv[]) { struct node *root = createNode(10); root->left = createNode(8); root->right = createNode(12); root->left->left = createNode(6); root->left->right = createNode(9); root->right->left = createNode(11); root->right->right = createNode(13); inOrder(root); node *head = NULL; bstToList(root, &head); printList(head); return 0; } ravindra dingankar If we are implementing this in java and cant use double pointer, then we have to use static variables, right ? Ravi In java, your root’s reference is wrapped inside a class tree. When you pass a tree, you actually pass a reference to tree object. So you can change root. Siva Krishna nice and simple Vinay Singh this is the best way to do this problem…just simply awesome www.asktogeek.com great tutorial, hard work definitely. thanks. wishall gud wrk,,,,gfg,,:) fateh_singh awsme …:) Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
