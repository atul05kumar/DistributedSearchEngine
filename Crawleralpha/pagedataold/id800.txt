Merge an array of size n into another array of size m+n - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Merge an array of size n into another array of size m+n Asked by Binod Question: There are two sorted arrays. First one is of size m+n containing only m elements. Another one is of size n and contains n elements. Merge these two arrays into the first array of size m+n such that the output is sorted. Input: array with m+n elements (mPlusN[]). NA => Value is not filled/available in array mPlusN[]. There should be n such array blocks. Input: array with n elements (N[]). Output: N[] merged into mPlusN[] (Modified mPlusN[]) Algorithm: 
Let first array be mPlusN[] and other array be N[]
1) Move m elements of mPlusN[] to end.
2) Start from nth element of mPlusN[] and 0th element of N[] and merge them 
    into mPlusN[].
 Implementation: 
#include <stdio.h>

/* Assuming -1 is filled for the places where element
   is not available */
#define NA -1

/* Function to move m elements at the end of array mPlusN[] */
void moveToEnd(int mPlusN[], int size)
{
  int i = 0, j = size - 1;
  for (i = size-1; i >= 0; i--)
    if (mPlusN[i] != NA)
    {
      mPlusN[j] = mPlusN[i];
      j--;
    }
}

/* Merges array N[] of size n into array mPlusN[]
   of size m+n*/
int merge(int mPlusN[], int N[], int m, int n)
{
  int i = n;  /* Current index of i/p part of mPlusN[]*/
  int j = 0; /* Current index of N[]*/
  int k = 0; /* Current index of of output mPlusN[]*/
  while (k < (m+n))
  {
    /* Take an element from mPlusN[] if
       a) value of the picked element is smaller and we have
          not reached end of it
       b) We have reached end of N[] */
    if ((i < (m+n) && mPlusN[i] <= N[j]) || (j == n))
    {
      mPlusN[k] = mPlusN[i];
      k++;
      i++;
    }
    else  // Otherwise take emenet from N[]
    {
      mPlusN[k] = N[j];
      k++;
      j++;
    }
  }
}

/* Utility that prints out an array on a line */
void printArray(int arr[], int size)
{
  int i;
  for (i=0; i < size; i++)
    printf("%d ", arr[i]);

  printf("\n");
}

/* Driver function to test above functions */
int main()
{
  /* Initialize arrays */
  int mPlusN[] = {2, 8, NA, NA, NA, 13, NA, 15, 20};
  int N[] = {5, 7, 9, 25};
  int n = sizeof(N)/sizeof(N[0]);
  int m = sizeof(mPlusN)/sizeof(mPlusN[0]) - n;

  /*Move the m elements at the end of mPlusN*/
  moveToEnd(mPlusN, m+n);

  /*Merge N[] into mPlusN[] */
  merge(mPlusN, N, m, n);

  /* Print the resultant mPlusN */
  printArray(mPlusN, m+n);

  return 0;
}
 Output: 2 5 7 8 9 13 15 20 25 Time Complexity: O(m+n) Please write comment if you find any bug in the above program or a better way to solve the same problem.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tags: array Tweet Writing code in comment? Please use ideone.com and share the link here. Rohit Kumar #include #include int main() { int a[4]={5,8,12,14}; int b[7]={2,”,7,”,”,”,10},i,n,m,j,k,c,cnt=0; n=sizeof(a)/sizeof(int); m=sizeof(b)/sizeof(int); c=m-1; for(i=m-1;i>=0;i–) { k=i-1; if(b[i]!=”)c–; if(b[i]==”&&b[k]!=”&&k>=0){b=b[k];b[k]=”;c–;} } for(i=m-1;i>=0;i–) { if(b[i]!=0) cnt++; } c=0; i=0; while((cnt>0)&&(c<n)) { if(a0){while(cnt!=m){b[i]=b[m-cnt];cnt–;i++;}} else if(c<n){while(c!=n){b[i]=a;c++;i++;}} else {printf("equal");} for(i=0;i<m;i++){printf(" %d ",b[i]);} return 0; } Rohit Kumar #include #include int main() { int a[4]={5,8,12,14}; int b[7]={2,”,7,”,”,”,10},i,n,m,j,k,c,cnt=0; n=sizeof(a)/sizeof(int); m=sizeof(b)/sizeof(int); c=m-1; for(i=m-1;i>=0;i–) { k=i-1; if(b[i]!=”)c–; if(b[i]==”&&b[k]!=”&&k>=0){b=b[k];b[k]=”;c–;} } for(i=m-1;i>=0;i–) { if(b[i]!=0) cnt++; } c=0; i=0; while((cnt>0)&&(c<n)) { if(a0){while(cnt!=m){b[i]=b[m-cnt];cnt–;i++;}} else if(c<n){while(c!=n){b[i]=a;c++;i++;}} else {printf("equal");} for(i=0;i<m;i++){printf(" %d ",b[i]);} return 0; } anonymus #include int valuetoinput(int*,int*); static int j,k; int main() { int a[]={2,4,5,8,9,-1,13,-1,-1,-1,22,-1,24,34}; int b[]={1,3,7,14,36}; int c[14]={0}; int l; for(int i=0;i<14;i++) { c[i]=valuetoinput(a,b); } for(int i=0;i<14;i++) {printf("%d",c[i]);} scanf("%d",&l); return 0; } int valuetoinput(int a[],int b[]) {extern int j; int l; extern int k; if((a[j]b[k]) { l=b[k]; k++; printf(“returned value is %dn”,l); return l;} if(a[j]==-1) {j++; return valuetoinput(a,b);} } /*here e are merging 2 arrays ,there is some vocant space in 1st array hich is enoted by -1.*/ NAVEEN KUMAR #include #include void merge_array(int a[], int b[],int size1, int size2) { int k; k = size1 + size2; int i; int merged_array[k]; for(i = 0; i < size1; i++) { merged_array[i] = a[i]; } for(i = 0; i < size2; i++) { merged_array[size1+i] = b[i]; } for(i = 0; i < (size1+size2); i++) { printf("%d–",merged_array[i]); } } int main() { int a[] = {1,2,3,4,5}; int b[] = {11,6,7,8,9}; int size1 = sizeof(a)/sizeof(a[0]); int size2 = sizeof(b)/sizeof(b[0]); merge_array(a,b,size1,size2); return 0; } works more well Nikhil Ramteke Time complexity: O(m + n) Spcae : O(1) Easy Solution: M_PLUS_N array = [2, NA, 7 NA, NA, 10, NA] N array = [5, 8, 12, 14] 1. record frist NA’s position and record first number’s position after this NA (NA_Position = 1, Next_Numbers_Position = 3)  


for(int i = 0; i < N.length(); i++){
	if(N[i] < M_PLUS_N[Next_Numbers_Position]){
		M_PLUS_N[NA_Position] = N[i];
		NA_Position = find_Next_NA(NA_POSITION);
	} else{
		// dont move forward i pointer on N array unless you find proper index in array M_PLUS_N for it
		while(N[i] > M_PLUS_N[Next_Numbers_Position]{
			M_PLUS_N[NA_Position] = M_PLUS_N[Next_Numbers_Position];
			M_PLUS_N[Next_Numbers_Position] = NA; // emtpy this location now
			Next_Numbers_Position = find_Next_Number(Next_Numbers_Position)
		}
	}
}
		
	
	
find_Next_NA(int last_NA_Position){
  // should be easy to iterate from this position on M_PLUS_N array and find out next NA location and return same
  return next_NA_index;
}


find_Next_Number(int last_Numbers_Position){
  // should be easy to iterate from this position on M_PLUS_N array and find out next digit location and return same
  return next_Numbers_Position;
}

 Nikhil Ramteke Sorry edit here: instead of this: (NA_Position = 1, Next_Numbers_Position = 3) Wanted to write this: (NA_Position = 1, Next_Numbers_Position = 2) shek8034 Suppose if m is very large, then it would be costly to move m elements. We can use another temporary array (temp[m]) to store all the m elements of arr1[m+n]. Now merge the two arrays : arr2[n] and temp[m] into arr1[m+n] by the help of the merging algorithm described above. Space complexity : O(m). Asap Or we could compare element m-1 of mplusn arr with n-1 element of n array and fill mplusn array from end. Space Complexity O(1) Kajal Your constant m is still large !! that’s matter.. with algo said above miandfdy Can we say Merging as:?? copy first array into result array copy second array into result array sort the final array remove duplicates srikanthraju536 @maindfdy: But for the sorting time complexity is more. http://www.tsndiffopera.in/ Sai Nikhil why to do work after  j==n , can’t we simply  break the  while then? Kamlesh there shld b correction in: void moveToEnd(int mPlusN[], int size) { int i = 0, j = size – 1; for (i = size-1; i >= 0; i–) if(mPlusN[i] != NA && mPlus[j]==NA)//because there can b element at (size-1) index { mPlusN[j] = mPlusN[i]; j–; } } WgpShashank Here is Java Implementation Hope It will Help  
public class Merge
{
 
public static void main(String a[])
{

    merge(new in[]{1,3,4,6,7},5,new int[]{2,5,8,9,10},5);

}

public static void merge(int[] a, int[] b, int n, int m) 
{
 int k = m + n - 1; // Index of last location of array b
 int i = n - 1; // Index of last element in array b
 int j = m - 1; // Index of last element in array a

 // Start comparing from the last element and merge a and b
 while (i >= 0 && j >= 0) {
 if (a[i] > b[j]) {
a[k--] = a[i--];
 } else {
 a[k--] = b[j--];
 }
 }
 while (j >= 0) 
 {
 a[k--] = b[j--];
 } 
}
}
 We don’t need to copy the contents of a after running out of They are already in place. krishna How did u handle the array blocks with NA elements? shek8034 Since you are not checking the NIL value, lets assume NIL as INT_MIN. So It will give wrong answer for this case. Check it out MplusN[] = {2, NIL, 7, NIL, NIL, 20, NIL}; N[] = {5, 8, 12, 14}; According to your logic, 14 > NIL (INT_MIN), so it is placed in the end, which is wrong, because 20 should be placed there. So you must have to move the MplusN[] array. You can not do it by traversing from the end. sekhar Implementation in Java…..  public class MergeSortedArray {
	public static void main(String[] args) {		
		
		int[] array1 = {-100,0,10,150};
		int[] array2 = {-131,2,5,700,0,0,0,0};
		int swapIndex = array1.length - 1;
		
		for(int j = 0, i = 0; j < array2.length - 1;) {
		if(j == array2.length - 1 || (array2[j] == 0)){
		//Copy the last element of array1 in to array2..
				array2[j] = array1[i];
				i++;
				j++;
	}else if((array2[j] < array1[i]) && (array2[j] != 0)) {			        
	       j++;
	}					
		else if((array2[j] > array1[i])) {
		//Move one index right in Array-2.				
		for(int k = swapIndex; k >= j; k--) {					
			array2[k+1] = array2[k];					
			}
			swapIndex = swapIndex + 1;
			array2[j] = array1[i];
			i++;
			j++;				
			}			
		}
		for(int p:array2) {
		 System.out.print(" Element >> "+p);				
		}		
	}
} http://effprog.blogspot.com Sambasiva  
int merge(int M[], int N[], int m, int n)
{
   int k = m + n -1;
   m--, n--;
   
   while(n >= 0 && m >= 0)
      M[k--] = M[m] > N[n] ? M[m--] : N[n--];
   
   while(n >= 0)
      M[k--] = N[n--];

}
 
 Jatin Just a little correction, the while loop of merge function should not let k to reach upto (m+n), it should be:  
while(k < (m+n)){
   ...
}
 else setting mPlusN[k] would throw the ArrayIndexOutOfBoundsException. Marsha Donna yea ur right..moderators please make the change GeeksforGeeks Jatin & Marsha, Thanks for pointing this out. We have updated the loop condition. abhimanu “moveToEnd(mPlusN, 9)” function is actually just copying the valid entries in mPlusN array into last n positions. The initial m-n values are unchanged. if mPlusN[] is 2 8 -1 -1 -1 13 -1 15 20, the o/p after executing “moveToEnd(mPlusN, 9)” is coming out as 2 8 -1 2 2 8 13 15 20. the intial m-n values are intact. This behavior of moveToEnd() function does not matter in the program because all that matters is the last n values in mPlusN[] array. If we at all want the initial values of mPlusN[] arra to be NA, the function could be as follows.  
/* Function to move m elements at the end of array
   mPlusN[] */
void moveToEnd(int mPlusN[], int size)
{
  int i = 0, j = size - 1;
  int num_of_empty;
  for (i = size-1; i >= 0; i--)
    if(mPlusN[i] != NA)
    {
      mPlusN[j] = mPlusN[i];
      j--;
    }
  num_of_empty = size - (size-1 - j);
  for (i = 0; i <num_of_empty; i++)
	  mPlusN[i] = NA;

 Ujjwal in moveToEnd(), we are simply copying the elements to end of array,i.e initial array elements are in tact, but to avoid confusion, we can swap the elements instead of copying. By this we cud get all NA initially and then sorted array to the end.. what say guys.?? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
