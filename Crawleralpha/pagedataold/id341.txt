How to check if a given number is Fibonacci number? - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph How to check if a given number is Fibonacci number? Given a number ‘n’, how to check if n is a Fibonacci number. A simple way is to generate Fibonacci numbers until the generated number is greater than or equal to ‘n’. Following is an interesting property about Fibonacci numbers that can also be used to check if a given number is Fibonacci or not. A number is Fibonacci if and only if one or both of (5*n2 + 4) or (5*n2 – 4) is a perfect square (Source: Wiki). Following is a simple program based on this concept. 
// C++ program to check if x is a perfect square
#include <iostream>
#include <math.h>
using namespace std;

// A utility function that returns true if x is perfect square
bool isPerfectSquare(int x)
{
    int s = sqrt(x);
    return (s*s == x);
}

// Returns true if n is a Fibinacci Number, else false
bool isFibonacci(int n)
{
    // n is Fibinacci if one of 5*n*n + 4 or 5*n*n - 4 or both
    // is a perferct square
    return isPerfectSquare(5*n*n + 4) ||
           isPerfectSquare(5*n*n - 4);
}

// A utility function to test above functions
int main()
{
  for (int i = 1; i <= 10; i++)
     isFibonacci(i)? cout << i << " is a Fibonacci Number \n":
                     cout << i << " is a not Fibonacci Number \n" ;
  return 0;
}
 Output: 
1 is a Fibonacci Number
2 is a Fibonacci Number
3 is a Fibonacci Number
4 is a not Fibonacci Number
5 is a Fibonacci Number
6 is a not Fibonacci Number
7 is a not Fibonacci Number
8 is a Fibonacci Number
9 is a not Fibonacci Number
10 is a not Fibonacci Number This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. Balaji Nakkella The above program can only give correct results for 1st 22 Fibonacci numbers.. iGanja e.g. Fibonacci[47] is 4807526976 and the “algorithm” absolutely works! The only flaw in the “program” is the size of the int data type. Changed to a double, this program will return correct results up to Fibonacci[1475]. Your problem is not in your knowledge but in your ability to share it. http://www.google.com/ fox_3 well said.! Argha Ghosh i made it in C after see your question,check it and run it @admin and friends #include”stdio.h” main(){ int n,a,b,sum,i,k=1,c; int p[30]; while(k==1){ a=0; b=1; sum=0; p[0]=0; p[1]=1; i=2; printf(“enter the number:-n”); scanf(“%d”,&n); while(sum<=n){ sum=a+b; a=b; b=sum; p[i]=sum; i++;} c=i-2; if(p==n || n==0) printf("%d is a Fibonacci numbern",n); else printf("%d is not a Fibonacci numbern",n); printf("if you run again,then press 1:-n "); scanf("%d",&k); if(k!=1) return 0;} getch();} priya PLZ ANYBODY CAN TELL HOW TO DO DIS TYPE OF QUESTIONS Given the following code snippet: void InsertNode(tNode** node, int i){ if(*node == NULL){ *node = new tNode; (*node)->pLeft = NULL; (*node)->data = i; (*node)->pRight = NULL; SetRootNode(node); return; } else{ if(i data) InsertNode(&((*node)->pLeft), i); if(i > (*node)->data) InsertNode(&((*node)->pRight), i); return; } } void Func(tNode **node){ if(*node!=NULL){ Func(&(*node)->pLeft); tNode *temp; temp = (*node)->pLeft; (*node)->pLeft= (*node)->pRight; (*node)->pRight = temp; Func(&(*node)->pRight); } } void traverse(tNode** nd){ if(*nd!=NULL){ traverse(&((*nd)->pLeft)); traverse(&((*nd)->pRight)); std::cout<data<<std::endl; } } Let the input given be 98,15,100,10,78,120,5,12,96,110 What would be the output of the following code snippet? int main(void) { tree *bT = new tree; int i = 10; int data; while(i–){ std::cout<<"Enter the node"<>data; bT->InsertNode(bT->GetRootNode(), data); } bT->Func(bT->GetRootNode()); bT->InsertNode(bT->GetRootNode(), 99); bT->traverse(bT->GetRootNode()); } 100,110,120,98,5,10,12,15,78,96,99 99,96,78,15,12,10,5,98,120,110,100 110,120,100,5,12,10,99,96,78,15,98 98,15,78,96,99,10,12,5,100,120,110 iGanja Wow! That’s a lot of semicolons, and commas, and carrots, and stuff! Sudarshan Singh Thanks Abhay Rahti ,we came to know an interesting property. v3gA This is not the most efficient algorithm to check whether a given number is a Fibonacci number. Matrix exponentiation is much faster than this method. http://www.quora.com/Algorithms/What-is-the-most-efficient-algorithm-to-check-if-a-number-is-a-Fibonacci-Number Sumit Kesarwani Yo v3ga u r right…awsome..source thanks Sumit Kesarwani Yo v3ga u r right…awsome..source thanks iGanja How fast does it need to be? Are you really going to quibble over log(n)? rahul This code is great example why you should think simple. These ideas should only be used if they optimize your code. But i dont see this property helping in anyway from a programmer’s perspective. Its only increasing the running time and length of the code. Maths is supposed to make our lives easier not complicate it by giving unproductive results. devian “increasing the running time and length of the code” … compared to what? this solution is ridiculously faster than generating all the fib sequence up to n, and the code is just 4 lines rahul dude…4 lines doesnt mean easier:).we are not here for cramming…calulating square and all will take time… sumit tell me that if 100034355 is fibo number or not? This algorithm produces answer in log(n) time. Dude this is incredibly faster than O(n) algorithm. And so that you know log(n) time is because of checking sqrt condition. indian square of number will not be in range.. it has limits… iGanja try a double; it’s way big… Anonymous as Balaji said already, this is applicable only for first 22 fibs. but yes no one can deny the fact log(n) < O(n) Herman If I were to be asked this in an interview…I would slap the interviewer This shows nothing about your ability to code (it shows only that you happen to know the answer or that you are a math geek) rahul hahahaah…i agree with you..:)…this is not mathematics portal:) Matth I agree with you!there is nothing but math. The_Computing_Machine To be good in computer science you must be good in math too. Without math computer science has no existence. iGanja To be a good programmer, you must be able to apply math to real world problems. Never have I had to find the Nth Fibonacci in my real world endeavors. The ONLY reason I even know this particular algorithm is because interviewers do indeed like to torture applicants with it and others like it. It proves NOTHING about one’s ability to program real world solutions. Sandipan Manna “A number is Fibonacci if and only if one or both of 5n2+4 or 5×2-4 is a perfect square ” Typo : It should be 5n^2-4 GeeksforGeeks Thanks for pointing this out. We have updated the statement. Destined2workhard logic part is all important !! Jai ho @WIKI bibhas_abhishek Well implemented program Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
