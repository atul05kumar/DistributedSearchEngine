Sort elements by frequency | Set 2 - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Sort elements by frequency | Set 2 Given an array of integers, sort the array according to frequency of elements. For example, if the input array is {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12}, then modify the array to {3, 3, 3, 3, 2, 2, 2, 12, 12, 4, 5}. In the previous post, we have discussed all methods for sorting according to frequency. In this post, method 2 is discussed in detail and C++ implementation for the same is provided. Following is detailed algorithm. 1) Create a BST and while creating BST maintain the count i,e frequency of each coming element in same BST. This step may take O(nLogn) time if a self balancing BST is used. 2) Do Inorder traversal of BST and store every element and count of each element in an auxiliary array. Let us call the auxiliary array as ‘count[]’. Note that every element of this array is element and frequency pair. This step takes O(n) time. 3) Sort ‘count[]’ according to frequency of the elements. This step takes O(nLohn) time if a O(nLogn) sorting algorithm is used. 4) Traverse through the sorted array ‘count[]’. For each element x, print it ‘freq’ times where ‘freq’ is frequency of x. This step takes O(n) time. Overall time complexity of the algorithm can be minimum O(nLogn) if we use a O(nLogn) sorting algorithm and use a self balancing BST with O(Logn) insert operation. Following is C++ implementation of the above algorithm. 
// Implementation of above algorithm in C++.
#include <iostream>
#include <stdlib.h>
using namespace std;

/* A BST node has data, freq, left and right pointers */
struct BSTNode
{
    struct BSTNode *left;
    int data;
    int freq;
    struct BSTNode *right;
};

// A structure to store data and its frequency
struct dataFreq
{
    int data;
    int freq;
};

/* Function for qsort() implementation. Compare frequencies to
   sort the array according to decreasing order of frequency */
int compare(const void *a, const void *b)
{
    return ( (*(const dataFreq*)b).freq - (*(const dataFreq*)a).freq );
}

/* Helper function that allocates a new node with the given data,
   frequency as 1 and NULL left and right  pointers.*/
BSTNode* newNode(int data)
{
    struct BSTNode* node = new BSTNode;
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    node->freq = 1;
    return (node);
}

// A utility function to insert a given key to BST. If element
// is already present, then increases frequency
BSTNode *insert(BSTNode *root, int data)
{
    if (root == NULL)
        return newNode(data);
    if (data == root->data) // If already present
        root->freq += 1;
    else if (data < root->data)
        root->left = insert(root->left, data);
    else
        root->right = insert(root->right, data);
    return root;
}

// Function to copy elements and their frequencies to count[].
void store(BSTNode *root, dataFreq count[], int *index)
{
    // Base Case
    if (root == NULL) return;

    // Recur for left substree
    store(root->left, count, index);

    // Store item from root and increment index
    count[(*index)].freq = root->freq;
    count[(*index)].data = root->data;
    (*index)++;

    // Recur for right subtree
    store(root->right, count, index);
}

// The main function that takes an input array as an argument
// and sorts the array items according to frequency
void sortByFrequency(int arr[], int n)
{
    // Create an empty BST and insert all array items in BST
    struct BSTNode *root = NULL;
    for (int i = 0; i < n; ++i)
        root = insert(root, arr[i]);

    // Create an auxiliary array 'count[]' to store data and
    // frequency pairs. The maximum size of this array would
    // be n when all elements are different
    dataFreq count[n];
    int index = 0;
    store(root, count, &index);

    // Sort the count[] array according to frequency (or count)
    qsort(count, index, sizeof(count[0]), compare);

    // Finally, traverse the sorted count[] array and copy the
    // i'th item 'freq' times to original array 'arr[]'
    int j = 0;
    for (int i = 0; i < index; i++)
    {
        for (int freq = count[i].freq; freq > 0; freq--)
            arr[j++] = count[i].data;
    }
}

// A utility function to print an array of size n
void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

/* Driver program to test above functions */
int main()
{
    int arr[] = {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12};
    int n = sizeof(arr)/sizeof(arr[0]);
    sortByFrequency(arr, n);
    printArray(arr, n);
    return 0;
}
 Output: 3 3 3 3 2 2 2 12 12 5 4 Exercise: The above implementation doesn’t guarantee original order of elements with same frequency (for example, 4 comes before 5 in input, but 4 comes after 5 in output). Extend the implementation to maintain original order. For example, if two elements have same frequency then print the one which came 1st in input array. This article is compiled by Chandra Prakash. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Suryabhan Singh another solution in cpp without creating BST bool compare(pair a,pair b) { return(a.second > b.second); } void fun(int a[],int size) { sort(a,a+size); pair p; int i=0; vector<pair > v; while(i<size) { p.first=a[i]; p.second=1; while(a[i]==a[i+1]) { p.second++; i++; } v.push_back(p); i++; } i=0; sort(v.begin(),v.end(),compare); for(int j=0;j<size;) { while(v[i].second) { a[j]=v[i].first; v[i].second--; j++; } i++; } for(j=0;j<size;j++) cout<<a[j]<<" "; } Kai Luo we can use counting sort to reduce the time complexity down to O(n + len(array)) Jones number’s range is not fixed so count sort can’t be used. itengineer Space complexity would increase to max(a[n]) himanshu  
/*Here is an approach using sorting and without indexes of elements.First we sort the elements in decreasing order.Then we declare a structure which hold the element and its count.After this we fill this structure with the elements and its count.Then sort the array of structures in decreasing order according to the count.Then print the elements in the sorted structure 'count' number of times.*/

#include<stdio.h>
#include<stdio.h>
#include<malloc.h>
#define inf 100000000

struct b
{
    int val;
    int count;
};
void merge(int a[],int p,int q,int r)
{
    int i,j,k;

    int n1=q-p+1;
    int n2=r-q;
    int *l=(int *)malloc(sizeof(int)*(n1+1));
    int *ri=(int *)malloc(sizeof(int)*(n2+1));
    for(i=0; i<n1; i++)
        l[i]=a[p+i];
    for(j=0; j<n2; j++)
        ri[j]=a[q+1+j];

    l[n1]=-inf;
    ri[n2]=-inf;

    i=0;
    j=0;


    for(k=p; k<=r; k++)
    {
        if(l[i]<ri[j])
        {
            a[k]=ri[j];
            j++;

        }
        else
        {
            a[k]=l[i];
            i++;



        }
    }

}

void mergesort(int  a[],int p,int r)
{
    int q;

    if(p<r)
    {
        q=(p+r)/2;

        mergesort(a,p,q);
        mergesort(a,q+1,r);
        merge(a,p,q,r);

    }
    else
        return;

}
void merge1(struct b a[],int p,int q,int r)
{
    int i,j,k;

    int n1=q-p+1;
    int n2=r-q;
    struct b *l=(struct b*)malloc(sizeof(struct b)*(n1+1));
    struct b *ri=(struct b *)malloc(sizeof(struct b)*(n2+1));

    for(i=0; i<n1; i++)
        l[i]=a[p+i];
    for(j=0; j<n2; j++)
        ri[j]=a[q+1+j];

    l[n1].val=-inf;
    l[n1].count=-inf;
    ri[n2].val=-inf;
    ri[n2].count=-inf;

    i=0;
    j=0;


    for(k=p; k<=r; k++)
    {

        if(l[i].count<ri[j].count)
        {
            a[k]=ri[j];

            j++;

        }

        else if(l[i].count==ri[j].count)
        {
            if(l[i].val<ri[j].val)
            {
                a[k]=ri[j];
                j++;

            }
            else
            {
                a[k]=l[i];
                i++;


            }



        }
        else
        {
            a[k]=l[i];

            i++;


        }

    }

}

void mergesort1(struct b a[],int p,int r)
{
    int q;

    if(p<r)
    {
        q=(p+r)/2;

        mergesort1(a,p,q);
        mergesort1(a,q+1,r);
        merge1(a,p,q,r);

    }
    else
        return;

}


int main()
{
    int a[]= {1,2,3,3,4,4};
    int n=sizeof(a)/sizeof(int);

    mergesort(a,0,n-1);


    struct b arr[n];
    int i=0;
    int k=0;
    while(i<n)
    {
        int ele=a[i];
        int count=0;
        while(a[i]==ele && i<n)
        {
            count++;
            i++;

        }

        arr[k].val=ele;
        arr[k++].count=count;


    }

    mergesort1(arr,0,k-1);


    for(i=0; i<k; i++)
    {
        int count=arr[i].count;
        while(count!=0)
        {
            printf("%d ",arr[i].val);
            count--;
        }
    }




    return 0;
}


 Himanshu Can any one tell me what’s the problem with this approach i)can out one by one element from input and check in the other array ( a struct array having data and freq which is initially empty) if the element is present there than just increase the frequency otherwise add into array with frequency one. 2)sort that array by freq and print. i think its a simple one having extra space (same as above one)and time complexity again o(nlogn) sambhavsharma Size of the structure array? say you have an input array of size 50 and all the elements are 2. What would be the size of your structure array? itengineer21 how come it would be O(nlogn). You would need nlogn just to sort your struct array. You forgot to add the complexity for checking each n every element from input array and increasing the frequency of the same in the struct array. Arulmozhi we dont need a bst when we are going to store the count in auxiliary array. @Moderator please have a re-look at the post. alexchao I think we can use a map,to solve this problem;As map structure using red-black tree,its a nearly balanced binary search tree ! sambhavsharma There is no limit on an element’s value. So creating a freq array in not the right choice. hxgxs1   Please excuse the time complexity of this code, the logic is quit similar to the counting sort which keeps track of how many times a particular element occurs in the array. #include #include // find maximum from the counter array int find_max(int *c,int n) { int i,j,max=0,index=-1; for(i=0;i { if(max < c[i]) { index= i; max=c[i]; } } return ind; } int main() { int n,i,j,k,*a,*c,max=-9999,index; printf(“\nEnter the number of integers\n”); scanf(“%d”,&n); a=(int *)malloc(sizeof(int)*n); printf(“\nEnter the integers\n”); for(i=0;i { scanf(“%d”,&a[i]); if(max < a[i]) max=a[i]; } c=(int *)malloc(sizeof(int)*(max+1)); for(i=0;i<=max;i++) c[i]=0; for(i=0;i c[a[i]]++; for(k=0;k { for(i=0;i<(max+1);i++) { index=find_max(c,max+1); } if(index==-1) break; for(j=0;j { printf(“%d “,index); } c[index]=0; } } _naive_ We can use hashing if range of numbers is given. geminisdb Why can’t we just use QuickSort or MergeSort, with the only change being in the Comparator function? We can build a HashMap which keeps counts for each unique array element. Instead of comparing a[i] with a[j], we compare Count_HashMap.getValue(a[i]) with Count_HashMap.getValue(a[j]) . What is the advantage of using a BST over Quicksort or Mergesort? RAMBOAMIT #include #include #include #include #include #include #include #include #include #include #include #include using namespace std; //bool myfunction (int i,int j) { return (i bool comp(pair a, pair b){ if(a.first%100 == b.first%100) { return a.first > b.first; } return a.first%100 < b.first%100; } int main(){ int i,j,k; int n; vector< pair >v; mapm; map::iterator it; cin>>n; int a[100],b[100]; for(i=0;i { b[i]=0; } for(i=0;i { cin>>a[i]; b[a[i]]++; } for(i=0;i { m.insert(make_pair(a[i],i)); } for(it=m.begin();it!=m.end();it++) { int l=it->first; int m=it->second; b[l]=b[l]+m*100; } for(i=0;i v.push_back(make_pair(b[i],i)); } sort(v.begin(),v.end(),comp); for(i=v.size()-1;i>=0;i–){ //loop takes maximum o(n) time because for(j=0;j { //an element repeat maximum n times but after that cout< } } } atul Given method can be modified , so that it can work for cases where element have same frquency. add other parameter(int index) in bstnode. struct BSTNode { struct BSTNode *left; int data; int freq; int index; struct BSTNode *right; }; add another parameter in dataFreq struct dataFreq { int data; int index; int freq; }; now where element is inserted into the tree set index to the current index of arr[i].if element is already present then leave index as same and increment frequency. do inorder traversal and store in dataFreq and sort it according to freq , if frequency is equal then use index value to decide which one should come first.  
/* Paste your code here (You may delete these lines if not writing code) */
 saimadhu.cse@gmail.com here is the simple solution in c using arrays // Problem: Sorting the number according to the frequency // Coded by saimadhu.polamuri on 10may2013 #include main(){ int number,i,j; int frequence_count=0; printf(“Enter how many number you want: “); scanf(“%d”,&number); // Number of number to be sort for freqency order int number_array[number],reference_array[number],frequency_array[number]; for(i =0;i printf("Enter the number: "); scanf("%d",&number_array[i]); } for(i=0;i reference_array[i] = number_array[i]; } // For calculating the frequence for(i=0;i for(j=0;j if(number_array[i]==reference_array[j]){ frequence_count++; } } frequency_array[i] = frequence_count; frequence_count=0; } /* for(i=0;i printf("\n %d frequency is %d",number_array[i],frequency_array[i]); } */ // frequency sorting int frequency_referency_array[number]; for(i=0;i frequency_referency_array[i] = frequency_array[i]; } int temp; for(i=0;i for(j=0;j if(frequency_referency_array[i]>frequency_referency_array[j]){ temp = frequency_referency_array[i]; frequency_referency_array[i] = frequency_referency_array[j]; frequency_referency_array[j] = temp; } else{ frequency_referency_array[j] = frequency_referency_array[j]; } } } //printing the sorted frequency array /* for(i=0;i printf(“\t %d”,frequency_referency_array[i]); } */ printf(“\n*********************This is the sorted freqeuncy array********************”); printf(“\n”); //for getting the freqeuency sortted array int k; for(i=0;i for(j=0;j if(frequency_referency_array[i] == frequency_array[j]){ printf(“\t %d”,number_array[j]); frequency_array[j] = 0; } } } getch(); } gr81  
#include <iostream>
#include <stdlib.h>

using namespace std;

void swap(int &a, int &b)
{
        int tmp = a;
        a = b;
        b = tmp;
}

#ifdef DEBUG
void print(int *a, int num)
{
        for(int i = 0; i < num; ++i)
                cout << a[i] <<" ";
        cout << endl;
}
#endif

#include <map>
#include <vector>
#include <algorithm>
typedef pair<int, int> mypair;

bool compFunc(const pair<int, int> &lhs, const pair<int, int> &rhs)
{
        return lhs.second > rhs.second;
}
void sort_by_freq(int *a, int num)
{
        map<int, int> freq;
        for(int i = 0; i < num; ++i)
                freq[a[i]]++;

        vector<mypair> myvec(freq.begin(), freq.end());
        sort(myvec.begin(), myvec.end(), compFunc);

        vector<mypair>::iterator it;
        for(it = myvec.begin(); it != myvec.end(); ++it)
        {
                int cnt = it->second;
                for(int i = 0; i < cnt; ++i)
                        cout << it->first <<" ";
        }
        cout << endl;
}

 http://code.scottshipp.com Scott Shipp One possible solution in Java. Nicely formatted version at http://pastebin.com/1t4EpDCK. Visit my site, http://code.scottshipp.com.  
import java.util.LinkedHashMap;

/*
 * Given an array of integers, sort the array according to frequency of elements. 
 * For example, if the input array is {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12}, then 
 * modify the array to {3, 3, 3, 3, 2, 2, 2, 12, 12, 4, 5}.
 */
public class frequencySort1 {
	
	public static void main(String[] args) {
		int[] unsortedArray = { 2,12,3,2,4,2,3,3,3,12,5 };
		
		LinkedHashMap<Integer, Integer> valueAndItsCount = new LinkedHashMap<Integer, Integer>();
		
		for(int x : unsortedArray) {
			if(valueAndItsCount.containsKey(x)) {
				int xCount = valueAndItsCount.get(x);
				xCount++;
				valueAndItsCount.put(x, xCount);
			}
			else {
				valueAndItsCount.put(x, 1);
			}
		}
		
		int maxCount = 0;
		int theKey = 0;
		while(!valueAndItsCount.isEmpty()) {
			
		
			for(int x : valueAndItsCount.keySet()) {
				if(valueAndItsCount.get(x) > maxCount) {
					maxCount = valueAndItsCount.get(x);
					theKey = x;
				}
			}
			
			for(int i=0; i < maxCount; i++) {
				System.out.print(theKey + " ");
			}
			valueAndItsCount.remove(theKey);
			maxCount = 0;
		}
		
	} //end main
} just for fun package test.test; import java.util.Collections; import java.util.HashMap; import java.util.Map.Entry; public class ArrayByFrequecny { public static void main(String[] args) { int[] array={2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12}; HashMap store = new HashMap(); for (int i = 0; i < array.length; i++) { if(store.containsKey(array[i])){ int temp= store.get(array[i]); temp++; store.put(array[i],temp); }else{ store.put(array[i],0); } } int[] array2=new int[array.length]; int j=0; Integer key =0; while(key!=null){ for (Entry entry : store.entrySet()) { int maxValueInMap=(Collections.max(store.values())); if (entry.getValue()==maxValueInMap) { for (int i = 0; i <= maxValueInMap; i++) { array2[j]=entry.getKey(); j++; key=entry.getKey(); } } if(maxValueInMap==0) break; } if(key!=null) store.remove(key); if(store.size()==0) break; } System.out.println("Sort elements by frequency"); for (int i = 0; i < array2.length; i++) { System.out.println( array2[i]); } } } aghtyui Arrays Bit Magic C/C++ Puzzles Articles GFacts Linked Lists MCQ Misc Output Strings Trees Sort elements by frequency | Set 2 May 5, 2013 Given an array of integers, sort the array according to frequency of elements. For example, if the input array is {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12}, then modify the array to {3, 3, 3, 3, 2, 2, 2, 12, 12, 4, 5}. In the previous post, we have discussed all methods for sorting according to frequency. In this post, method 2 is discussed in detail and C++ implementation for the same is provided. Following is detailed algorithm. 1) Create a BST and while creating BST maintain the count i,e frequency of each coming element in same BST. This step may take O(nLogn) time if a self balancing BST is used. 2) Do Inorder traversal of BST and store every element and count of each element in an auxiliary array. Let us call the auxiliary array as ‘count[]‘. Note that every element of this array is element and frequency pair. This step takes O(n) time. 3) Sort ‘count[]‘ according to frequency of the elements. This step takes O(nLohn) time if a O(nLogn) sorting algorithm is used. 4) Traverse through the sorted array ‘count[]‘. For each element x, print it ‘freq’ times where ‘freq’ is frequency of x. This step takes O(n) time. Overall time complexity of the algorithm can be minimum O(nLogn) if we use a O(nLogn) sorting algorithm and use a self balancing BST with O(Logn) insert operation. Following is C++ implementation of the above algorithm. // Implementation of above algorithm in C++. #include #include using namespace std; /* A BST node has data, freq, left and right pointers */ struct BSTNode { struct BSTNode *left; int data; int freq; struct BSTNode *right; }; // A structure to store data and its frequency struct dataFreq { int data; int freq; }; /* Function for qsort() implementation. Compare frequencies to sort the array according to decreasing order of frequency */ int compare(const void *a, const void *b) { return ( (*(const dataFreq*)b).freq – (*(const dataFreq*)a).freq ); } /* Helper function that allocates a new node with the given data, frequency as 1 and NULL left and right pointers.*/ BSTNode* newNode(int data) { struct BSTNode* node = new BSTNode; node->data = data; node->left = NULL; node->right = NULL; node->freq = 1; return (node); } // A utility function to insert a given key to BST. If element // is already present, then increases frequency BSTNode *insert(BSTNode *root, int data) { if (root == NULL) return newNode(data); if (data == root->data) // If already present root->freq += 1; else if (data data) root->left = insert(root->left, data); else root->right = insert(root->right, data); return root; } // Function to copy elements and their frequencies to count[]. void store(BSTNode *root, dataFreq count[], int *index) { // Base Case if (root == NULL) return; // Recur for left substree store(root->left, count, index); // Store item from root and increment index count[(*index)].freq = root->freq; count[(*index)].data = root->data; (*index)++; // Recur for right subtree store(root->right, count, index); } Ahmed I. Khalil Here is the same algorithm in C++ without the need to have inorder tree traversal.  
#include <iostream>
#include <vector>
#include <algorithm>

struct Node {
    int data;
    Node *left;
    Node *right;
    int freq;
    Node(int data) {
        freq = 1;
        this->data = data;
        left = right = NULL;
    }
};


class BST {
    
public:
    BST() : root(0) { }
    
    void insert(int data) {
        if (root == NULL) {
            root = insertHelper(root, data);
        } else {
            insertHelper(root, data);
        }
    }
    
    std::vector<int> sortByFrequency() {
        std::sort(nodeHolder.begin(), nodeHolder.end(), compare);
        
        std::vector<int> result;
        
        for(int i = 0; i < nodeHolder.size(); i++) {
            for(int j = 0; j < nodeHolder[i]->freq; j++) {
                result.push_back(nodeHolder[i]->data);
            }
        }
        
        return result;
    }
    static bool compare(Node *a, Node *b)
    {
        return a->freq > b->freq;
    }
private:
    Node *insertHelper(Node *node, int data) {
        if (node == NULL) {
            Node* temp = new Node(data);
            nodeHolder.push_back(temp);
            return temp;
        } 
        if(node->data == data) {
            node->freq++;
        }
        else if( data < node->data) {
            node->left = insertHelper(node->left, data);
        }
        else if(data > node->data) {
            node->right = insertHelper(node->right, data);
        }
        
        return node;
    }
    
    std::vector<Node*> nodeHolder;
    
    Node *root;
};

int main(int argc, char **argv) {
    int arr[] = {2, 3, 2, 4, 5, 12, 2, 3, 3, 3, 12};
    int n = sizeof(arr)/sizeof(arr[0]);
    BST bstTree;
    for(int i = 0; i < n; i++)
        bstTree.insert(arr[i]);
    
    std::vector<int> sortedVector = bstTree.sortByFrequency();
    for(int i = 0; i < sortedVector.size(); i++) {
        std::cout << sortedVector[i] << "  ";
    }
    
    return 0;
}

 Subhajit @GeeksForGeeks This code is not having a complexity of O(nlog(n)) as this is not a balances BST insertion. The worst case complexity for this algorithm is O(n^2). AVL insertion logic has to to applied to get the complexity O(nlog(n)). cpbcrec Overall time complexity of the algorithm can be minimum O(nLogn) if we use a O(nLogn) sorting algorithm and use a self balancing BST with O(Logn) insert operation. It has been mentioned.Please read carefully.  
/* Paste your code here (You may delete these lines if not writing code) */
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
