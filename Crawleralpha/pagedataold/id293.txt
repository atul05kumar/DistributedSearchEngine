Check whether a given point lies inside a triangle or not - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Check whether a given point lies inside a triangle or not Given three corner points of a triangle, and one more point P. Write a function to check whether P lies within the triangle or not. For example, consider the following program, the function should return true for P(10, 15) and false for P'(30, 15) 
              B(10,30)
                / \
               /   \
              /     \
             /   P   \      P'
            /         \
     A(0,0) ----------- C(20,0) 
 Source: Microsoft Interview Question Solution: Let the coordinates of three corners be (x1, y1), (x2, y2) and (x3, y3). And coordinates of the given point P be (x, y) 1) Calculate area of the given triangle, i.e., area of the triangle ABC in the above diagram. Area A = [ x1(y2 – y3) + x2(y3 – y1) + x3(y1-y2)]/2 2) Calculate area of the triangle PAB. We can use the same formula for this. Let this area be A1. 3) Calculate area of the triangle PBC. Let this area be A2. 4) Calculate area of the triangle PAC. Let this area be A3. 5) If P lies inside the triangle, then A1 + A2 + A3 must be equal to A. 
#include <stdio.h>
#include <stdlib.h>

/* A utility function to calculate area of triangle formed by (x1, y1), 
   (x2, y2) and (x3, y3) */ 
float area(int x1, int y1, int x2, int y2, int x3, int y3)
{
   return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2.0);
}

/* A function to check whether point P(x, y) lies inside the triangle formed 
   by A(x1, y1), B(x2, y2) and C(x3, y3) */ 
bool isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y)
{   
   /* Calculate area of triangle ABC */
   float A = area (x1, y1, x2, y2, x3, y3);

   /* Calculate area of triangle PBC */   
   float A1 = area (x, y, x2, y2, x3, y3);

   /* Calculate area of triangle PAC */   
   float A2 = area (x1, y1, x, y, x3, y3);

   /* Calculate area of triangle PAB */    
   float A3 = area (x1, y1, x2, y2, x, y);
  
   /* Check if sum of A1, A2 and A3 is same as A */ 
   return (A == A1 + A2 + A3);
}

/* Driver program to test above function */
int main()
{
   /* Let us check whether the point P(10, 15) lies inside the triangle 
      formed by A(0, 0), B(20, 0) and C(10, 30) */
   if (isInside(0, 0, 20, 0, 10, 30, 10, 15))
     printf ("Inside");
   else
     printf ("Not Inside");

   return 0;
}
 Ouptut:  Inside Exercise: Given coordinates of four corners of a rectangle, and a point P. Write a function to check whether P lies inside the given rectangle or not. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. kkr its giving “not inside” for the input {0,0 ,2 ,0,1,1} p{1,0} but as the point lie on the base of the triangle out put should be “inside” Logic I wrote a complete article about point in triangle test. It shows the barycentric, parametric and dot product based methods. Then it deals with the accuracy problem occuring when a point lies exactly on one edge (with examples). Finally it exposes a complete new method based on point to edge distance. http://totologic.blogspot.fr/2014/01/accurate-point-in-triangle-test.html Enjoy ! mbrc Will checking for equality of floating numbers work? sachin Can anybody tell me if a point lies in a n vertices polygon? How to solve? abhishek08aug Will the same strategy not work? mungruez I rewrote the code so now it can calculate if the point lies in a triangle whose sides can be very long much long.  
#include<stdio.h>
#include <stdlib.h>
#include <inttypes.h>
/*NAME: Muhammad Zaakir Mungrue PROBLEM: 2153 -Playing with Triangles*/

long double area(int x1, int y1, int x2, int y2, int x3, int y3) {
   long double X= (x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2.0;
   if(X<0)return X*-1;
   return X;
}  
  
int isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y) {   
   long double A = area (x1, y1, x2, y2, x3, y3); 
   long double A1 = area (x, y, x2, y2, x3, y3);
   long double A2 = area (x1, y1, x, y, x3, y3);
   long double A3 = area (x1, y1, x2, y2, x, y);  
   
   if(A==(A1+A2+A3)) return 0;
   else return 1;
}  
   
int main() {
    int Ax,Ay,Bx,By,Cx,Cy,Dx,Dy;    
    scanf("%d %d",&Ax,&Ay);
    scanf("%d %d",&Bx,&By);
    scanf("%d %d",&Cx,&Cy);
    scanf("%d %d",&Dx,&Dy);

    if(isInside(Ax,Ay,Bx,By,Cx,Cy,Dx,Dy)==0) printf("%d\n",1);
    else printf("0\n");
   
    return 0;
}/*There is only one God*/

 vishnu #include “stdafx.h” int maxele=0; int max(int a[]) { for(int i=0;i=a[i]) continue; else maxele=a[i]; } return maxele; } int _tmain(int argc, _TCHAR* argv[]) { int a[3],b[3],resx,resy; for(int i=0;i<3;i++) { printf("enter x condernate of %d corner\n",i+1); scanf("%d",&a[i]); printf("enter y condernate of %d corner\n",i+1); scanf("%d",&b[i]); } int maxk=max(a); maxele=0; int maxy=max(b); printf("findout x coordinate\n"); scanf("%d",&resx); printf("findout y coordinate\n"); scanf("%d",&resy); if(resx<maxk&&resy<maxy) printf("coordinate is inside triangle\n"); else printf("outside the triangle\n"); return 0; } Vishnu This wont work. duke The above problem can also solve by taking the cross product of point to the one of the vertix of triangle and the two sides covering the point which gives the result that the point lies within the edges of triangle by doing the same process for three sides of triangle. I am pasting my code here…… #include using namespace std; typedef struct product { int val[3]; }; product crossproduct(product x,product y) { product z; z.val[0]=x.val[1]*y.val[2]-x.val[2]*y.val[1]; z.val[1]=x.val[2]*y.val[0]-x.val[0]*y.val[2]; z.val[2]=x.val[0]*y.val[1]-x.val[2]*y.val[1]; return z; } int Dotproduct(product l,product m) { product n; for(int i=0;i<3;i++) { n.val[i]=l.val[i]*m.val[i]; } return (n.val[0]+n.val[1]+n.val[2]); } product substract(product p,product q) { product s; for(int i=0;i=0) return true; else return false; } bool IsPointInsideTriangle(product p,product a,product b,product c) { if(sameside(p,a,b,c)&&sameside(p,b,a,c)&&sameside(p,c,a,b)) return true; else return false; } int main() { product a,b,c,p; cout<<"\n The co-ordinates of triangle "; cout<<"\n co-ordinate of A "; for(int i=0;i>a.val[i]; } cout<<"\n co-ordinate of B "; for(int i=0;i>b.val[i]; } cout<<"\n co-ordinate of C"; for(int i=0;i>c.val[i]; } cout<<"\n co-ordinate of point to find out whether lies inside or outside the triangle P "; for(int i=0;i>p.val[i]; } if(IsPointInsideTriangle(p,a,b,c)) cout<<"\n Inside"; else cout<<"\n Outside"; return 0; } kartik @Amandeep Singh & @Hongliang There should not be any precision problem because we divide integers by 2 and may get only 5 after after the point. Also, I think use of floats can be avoided altogether by taking 2 times of areas. Please see the following program.  
#include <stdio.h>
#include <stdlib.h>

/* A utility function to calculate area of triangle formed by (x1, y1),
   (x2, y2) and (x3, y3) */
int area(int x1, int y1, int x2, int y2, int x3, int y3)
{
   return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2)));
}

/* A function to check whether point P(x, y) lies inside the triangle formed
   by A(x1, y1), B(x2, y2) and C(x3, y3) */
bool isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y)
{
   /* Calculate area of triangle ABC */
   int A = area (x1, y1, x2, y2, x3, y3);

   /* Calculate area of triangle PBC */
   int A1 = area (x, y, x2, y2, x3, y3);

   /* Calculate area of triangle PAC */
   int A2 = area (x1, y1, x, y, x3, y3);

   /* Calculate area of triangle PAB */
   int A3 = area (x1, y1, x2, y2, x, y);

   /* Check if sum of A1, A2 and A3 is same as A */
   return (A == A1 + A2 + A3);
}

/* Driver program to test above function */
int main()
{
   /* Let us check whether the point P(10, 15) lies inside the triangle
      formed by A(0, 0), B(20, 0) and C(10, 30) */
   if (isInside(0, 0, 20, 0, 10, 30, 10, 15))
     printf ("Inside");
   else
     printf ("Not Inside");

   return 0;
}
 Amandeep Singh We can actually make equations for three lines and substitute the value of P’ in each equations. All the points lying on the same side of each line as that of P’ will give same sign. this can be used effectively and will not involve float calculation. Hence no precision problem will occur. Hongliang This solution is good, but it may lead to a precision problem: it introduces float number calculation, which may give, for example area = 100 and the summation of small areas = 99.999 or 100.001. It is hard to compare and may have potential pitfalls. Actually in Quora someone summarized some beautiful answers to all possible cases: http://www.quora.com/Algorithms/What-are-the-algorithms-for-determining-if-a-point-is-inside-an-arbitrary-closed-shape-or-not P.S. Your problem seems to put an triangle onto a lattice which has integer numbers for the positions. For this case, one can simply draw a vertical line and check how many (odd for outside, even for inside) intersections, it is a solution without float number calculation.  
/* Paste your code here (You may delete these lines if not writing code) */
 Hongliang Sorry, I meant to: draw a vertical ray (not line) and check how many intersections. Odd for inside, even for outside. I was typing too fast, sorry. kafee I don’t think odd or even will work rohan agrawal @varun If any one of A1, A2 or A3 == 0, then the point is on the triange. http://thoughtsofpramod.wordpress.com/ Pramod Ganapathi A very good concept. What about this idea? A triangle is a region formed when three lines intersect each other. Each line is of the form f(x, y) = 0. When we plug in the new point (a, b) in f(x, y) we may get + or – depending on where the point is. We plug in the point in each of the three functions of the lines f1(x, y), f2(x, y) and f3(x, y) and then check depending on signs whether the point is inside or outside. I think the idea works but it should be formalized more rigorously. Varun What about when point P is merged with any other point out of A,B, or C. In this case P doesn’t lies inside triangle ABC but still we will get output as true. How this algorithm will take care of this case where P is at Boundary of ABC?  
/* Paste your code here (You may delete these lines if not writing code) */
 rahul  
Nim Ayyan
 Harish just check if the area != o  
/* Paste your code here (You may delete these lines if not writing code) */
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
