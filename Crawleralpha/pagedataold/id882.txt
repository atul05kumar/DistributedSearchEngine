Counting Sort - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Counting Sort Counting sort is a sorting technique based on keys between a specific range. It works by counting the number of objects having distinct key values (kind of hashing). Then doing some arithmetic to calculate the position of each object in the output sequence. Let us understand it with the help of an example. 
For simplicity, consider the data in the range 0 to 9. 
Input data: 1, 4, 1, 2, 7, 5, 2
  1) Take a count array to store the count of each unique object.
  Index:     0  1  2  3  4  5  6  7  8  9
  Count:     0  2  2  0   1  1  0  1  0  0

  2) Modify the count array such that each element at each index 
  stores the sum of previous counts. 
  Index:     0  1  2  3  4  5  6  7  8  9
  Count:     0  2  4  4  5  6  6  7  7  7

The modified count array indicates the position of each object in 
the output sequence.
 
  3) Output each object from the input sequence followed by 
  decreasing its count by 1.
  Process the input data: 1, 4, 1, 2, 7, 5, 2. Position of 1 is 2.
  Put data 1 at index 2 in output. Decrease count by 1 to place 
  next data 1 at an index 1 smaller than this index.
 Following is C implementation of counting sort. 
// C Program for counting sort
#include <stdio.h>
#include <string.h>
#define RANGE 255

// The main function that sort the given string str in alphabatical order
void countSort(char *str)
{
    // The output character array that will have sorted str
	char output[strlen(str)];

	// Create a count array to store count of inidividul characters and
	// initialize count array as 0
	int count[RANGE + 1], i;
	memset(count, 0, sizeof(count));

    // Store count of each character
	for(i = 0; str[i]; ++i)
		++count[str[i]];

    // Change count[i] so that count[i] now contains actual position of
    // this character in output array
	for (i = 1; i <= RANGE; ++i)
		count[i] += count[i-1];

    // Build the output character array
	for (i = 0; str[i]; ++i)
	{
		output[count[str[i]]-1] = str[i];
		--count[str[i]];
	}

	// Copy the output array to str, so that str now
	// contains sorted characters
	for (i = 0; str[i]; ++i)
		str[i] = output[i];
}

// Driver program to test above function
int main()
{
	char str[] = "geeksforgeeks";//"applepp";

	countSort(str);

	printf("Sorted string is %s\n", str);
	return 0;
}
 Output: Sorted character array is eeeefggkkorss Time Complexity: O(n+k) where n is the number of elements in input array and k is the range of input. Auxiliary Space: O(n+k) Points to be noted: 1. Counting sort is efficient if the range of input data is not significantly greater than the number of objects to be sorted. Consider the situation where the input sequence is between range 1 to 10K and the data is 10, 5, 10K, 5K. 2. It is not a comparison based sorting. It running time complexity is O(n) with space proportional to the range of data. 3. It is often used as a sub-routine to another sorting algorithm like radix sort. 4. Counting sort uses a partial hashing to count the occurrence of the data object in O(1). 5. Counting sort can be extended to work for negative inputs also. Exercise: 1. Modify above code to sort the input data in the range from M to N. 2. Modify above code to sort negative input data. 3. Is counting sort stable and online? 4. Thoughts on parallelizing the counting sort algorithm. This article is compiled by Aashish Barnwal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Mayank http://www8.cs.umu.se/kurser/5DV011/VT13/F8.pdf for parallel counting sort.. Ayaan Ali what will b its output ? Nikhil Sreekumar For integers, add absolute value of largest negative number and then use counting sort. Jon Smith a good Referance: http://cybarlab.com/program-for-counting-sort Jon Smith A nice example about Program for Counting Sort: http://cybarlab.com/program-for-counting-sort Code_Addict About thoughts on parallelizing the counting sort algorithm- http://www.drdobbs.com/architecture-and-design/parallel-counting-sort/224700144 jay its complexity will be increased as u say …… for(i=0;i<RANGE;i++) { for(j=0;j<RANGE[i];j++) printf("%d",i); } …. complexity O(RANGE* RANGE[i]) … suppose array is 1 5 5 5 5 5 5 5 5 5 10 O(10*9)=90 …. which is much greater as compared to O(10+11) i.e. O(range+no. of elements) jay its complexity will be increased as u say …… for(i=0;i<RANGE;i++) { for(j=0;j<RANGE[i];j++) printf("%d",i); } …. complexity O(RANGE* RANGE[i]) … suppose array is 1 5 5 5 5 5 5 5 5 5 10 O(10*9)=90 …. which is much greater as cmpared to O(10+11) i.e. O(range+no. of elements) rakitic @geeks…i dont think there is any use of last step , in step 2 only…we can traverse through the count array and print the numbers based on the count . what do u say ?? jay its complexity will be increased as u say …… complexity O(RANGE* RANGE[i]) ankur jain  

#include<stdio.h>
#include<stdlib.h>
#include<string.h>


void countSort(char str[])
{
	int count[256]={0},len,i;
	int pos=0;
	len=strlen(str);
	for (i = 0; i < len ; ++i)
	{
		count[str[i]]++;
	}

	for (i = 0; i < 256 ; ++i)
	{
		if (count[i])
		{
			while(count[i])
			{
				str[pos]=i;
				pos++;
				count[i]--;
			}
		}
	}
	str[len]='\0';
}

int main()
{
	 char str[] = "geeksforgeeks";//"applepp";

    countSort(str);

    printf("Sorted string is %s\n", str);
    return 0;
}

 rk_roy @ankur jain……. i got it after seeing ur code…thnx and GFG u guys are worth ‘Hats off’…  
/* Paste your code here (You may delete these lines if not writing code) */
 AMIT Someone please give some thoughts on parallelizing the counting sort Dnyaneshwar #include main() { int n,nn,i,j; printf(“\nEnter the max val of array”); scanf(“%d”,&n); printf(“Enter the how many number u want”); scanf(“%d”,&nn); int a[nn],b[nn]; printf(“\nEnter the number smaller than %d\n”,n); for(i=1;i<=nn;i++) { scanf("%d",&a[i]); } for(i=1;i<=n;i++) { b[i]=0; } for(i=1;i<nn;i++) { b[a[i]]++; printf("%d ",a[i]); } printf("\nSorted Array\n"); for(i=1;i<=n;i++) { for(j=1;j<=b[i];j++) { printf(" %d",i); } } } gh05t Here is a code which works fro neagtive range,the code is very easy to parallelize…we can do this by assigning a thread for each chunk of data in each of the three steps. a=gets.to_i #range is [a,b] b=gets.to_i A=Hash.new(0) n=gets.to_i #no. of elements i=0 B=Array.new C=Array.new(n) while i<n k=gets.to_i B << k A[k]+=1 i+=1 end i=a while i<b if i!=a A[i]+=A[i-1] end i+=1 end i=0 while i<n C[A[B[i]]-1]=B[i] A[B[i]]-=1 i+=1 end C.each do |x| print x print " " end puts "" Can somebody tell me what goes inside   for ruby? nikhil What does online means here???? as test http://www.linkedin.com/in/ramanawithu Venki Nice exercise questions Aashish. Keep it up. 3. Counting sort can be made stable if we fill from backwards. If you fill in forward direction relative positions of equal elements will change. I won’t commit it is an online algorithm. There will be some gaps in between while moving the elements to their final position. However, at any point in time, the partial arrays will be in sorted position. So, online too. 4. Nice thought on parallel programming on counting sort. I will reply later. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
