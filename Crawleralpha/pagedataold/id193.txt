Dynamic Programming | Set 22 (Box Stacking Problem) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Dynamic Programming | Set 22 (Box Stacking Problem) You are given a set of n types of rectangular 3-D boxes, where the i^th box has height h(i), width w(i) and depth d(i) (all real numbers). You want to create a stack of boxes which is as tall as possible, but you can only stack a box on top of another box if the dimensions of the 2-D base of the lower box are each strictly larger than those of the 2-D base of the higher box. Of course, you can rotate a box so that any side functions as its base. It is also allowable to use multiple instances of the same type of box. Source: http://people.csail.mit.edu/bdean/6.046/dp/. The link also has video for explanation of solution. The Box Stacking problem is a variation of LIS problem. We need to build a maximum height stack. Following are the key points to note in the problem statement: 1) A box can be placed on top of another box only if both width and depth of the upper placed box are smaller than width and depth of the lower box respectively. 2) We can rotate boxes. For example, if there is a box with dimensions {1x2x3} where 1 is height, 2×3 is base, then there can be three possibilities, {1x2x3}, {2x1x3} and {3x1x2}. 3) We can use multiple instances of boxes. What it means is, we can have two different rotations of a box as part of our maximum height stack. Following is the solution based on DP solution of LIS problem. 1) Generate all 3 rotations of all boxes. The size of rotation array becomes 3 times the size of original array. For simplicity, we consider depth as always smaller than or equal to width. 2) Sort the above generated 3n boxes in decreasing order of base area. 3) After sorting the boxes, the problem is same as LIS with following optimal substructure property. MSH(i) = Maximum possible Stack Height with box i at top of stack MSH(i) = { Max ( MSH(j) ) + height(i) } where j < i and width(j) > width(i) and depth(j) > depth(i). If there is no such j then MSH(i) = height(i) 4) To get overall maximum height, we return max(MSH(i)) where 0 < i < n Following is C++ implementation of the above solution. 
/* Dynamic Programming implementation of Box Stacking problem */
#include<stdio.h>
#include<stdlib.h>

/* Representation of a box */
struct Box
{
  // h –> height, w –> width, d –> depth
  int h, w, d;  // for simplicity of solution, always keep w <= d
};

// A utility function to get minimum of two intgers
int min (int x, int y)
{ return (x < y)? x : y; }

// A utility function to get maximum of two intgers
int max (int x, int y)
{ return (x > y)? x : y; }

/* Following function is needed for library function qsort(). We
   use qsort() to sort boxes in decreasing order of base area. 
   Refer following link for help of qsort() and compare()
   http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/ */
int compare (const void *a, const void * b)
{
    return ( (*(Box *)b).d * (*(Box *)b).w ) –
           ( (*(Box *)a).d * (*(Box *)a).w );
}

/* Returns the height of the tallest stack that can be formed with give type of boxes */
int maxStackHeight( Box arr[], int n )
{
   /* Create an array of all rotations of given boxes
      For example, for a box {1, 2, 3}, we consider three
      instances{{1, 2, 3}, {2, 1, 3}, {3, 1, 2}} */
   Box rot[3*n];
   int index = 0;
   for (int i = 0; i < n; i++)
   {
      // Copy the original box
      rot[index] = arr[i];
      index++;

      // First rotation of box
      rot[index].h = arr[i].w;
      rot[index].d = max(arr[i].h, arr[i].d);
      rot[index].w = min(arr[i].h, arr[i].d);
      index++;

      // Second rotation of box
      rot[index].h = arr[i].d;
      rot[index].d = max(arr[i].h, arr[i].w);
      rot[index].w = min(arr[i].h, arr[i].w);
      index++;
   }

   // Now the number of boxes is 3n
   n = 3*n;

   /* Sort the array ‘rot[]’ in decreasing order, using library
      function for quick sort */
   qsort (rot, n, sizeof(rot[0]), compare);

   // Uncomment following two lines to print all rotations
   // for (int i = 0; i < n; i++ )
   //    printf("%d x %d x %d\n", rot[i].h, rot[i].w, rot[i].d);

   /* Initialize msh values for all indexes 
      msh[i] –> Maximum possible Stack Height with box i on top */
   int msh[n];
   for (int i = 0; i < n; i++ )
      msh[i] = rot[i].h;

   /* Compute optimized msh values in bottom up manner */
   for (int i = 1; i < n; i++ )
      for (int j = 0; j < i; j++ )
         if ( rot[i].w < rot[j].w &&
              rot[i].d < rot[j].d &&
              msh[i] < msh[j] + rot[i].h
            )
         {
              msh[i] = msh[j] + rot[i].h;
         }


   /* Pick maximum of all msh values */
   int max = -1;
   for ( int i = 0; i < n; i++ )
      if ( max < msh[i] )
         max = msh[i];

   return max;
}

/* Driver program to test above function */
int main()
{
  Box arr[] = { {4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32} };
  int n = sizeof(arr)/sizeof(arr[0]);

  printf("The maximum possible height of stack is %d\n",
         maxStackHeight (arr, n) );

  return 0;
}
 Output: The maximum possible height of stack is 60 In the above program, given input boxes are {4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32}. Following are all rotations of the boxes in decreasing order of base area. 
   10 x 12 x 32
   12 x 10 x 32
   32 x 10 x 12
   4 x 6 x 7
   4 x 5 x 6
   6 x 4 x 7
   5 x 4 x 6
   7 x 4 x 6
   6 x 4 x 5
   1 x 2 x 3
   2 x 1 x 3
   3 x 1 x 2 The height 60 is obtained by boxes { {3, 1, 2}, {1, 2, 3}, {6, 4, 5}, {4, 5, 6}, {4, 6, 7}, {32, 10, 12}, {10, 12, 32}} Time Complexity: O(n^2) Auxiliary Space: O(n) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: Dynamic Programming Tweet Writing code in comment? Please use ideone.com and share the link here. Anick Saha /* Compute optimized msh values in bottom up manner */ for (int i = 1; i < n; i++ ) for (int j = 0; j < i; j++ ) if ( rot[i].w < rot[j].w && rot[i].d < rot[j].d && msh[i] < msh[j] + rot[i].h ) { msh[i] = msh[j] + rot[i].h; } Why the above processs , and why not this.. : /* Compute optimized msh values in bottom up manner */ for (int i = 1; i < n; i++ ) for (int j = 0; j rot[i].w < rot[i].d) && msh[i] < msh[j] + rot[i].h ) { msh[i] = msh[j] + rot[i].h; } Guest for input : 77 20 30 89 24 36 11 43 70 Expected Ouput : 177 Actual Output : 210 prashant jha my c++ code for box stacking problem http://ideone.com/CNE9Vk Dheeraj Agrawal i sorted in increasing order .. and the answer is 64 now. why ? rahul those who are confused with 6 rotations and y 3 are taken.,.please read below. H*W*D: in the sol they have taken this 3 parameters in decreasing sequence…thats y 3 rotations and theats y w is max and depth is min.. if we want to take increasing sequence then we can take 3 in opposite side..that is width is min and depth is max. And if we are allowed to take mixture like for 123 6 permutations are there for incresing we have 123 2 13 3 12 same for decreasing…if we want to take mixture ,then we need to take all 3 perm. Nir Alfasi Maybe I’m missing something cause I have an issue with the solution: If we take the original list (4 boxes): {4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32} and take the maximum out of each box we’ll get: 7+3+6+32=48 so any solution above 48 is not possible. Actually, the solution that we got contains 7 boxes – so we need to remove the “duplicate” boxes (such as {3, 1, 2}, {1, 2, 3} for example) in order to get the *real* solution Vishnu You haven’t read the problem properly.. “It said that you can use multiple instances of the same type of box” Tanish Gupta can we do it in this way .Let there be 2 arrays of size 3n a and b.first we store 3n possible ways in array , then sorting according to breadth and applying LIS on length and updating array a according to height .similarly sorting according to length and applying LIS on breadth and updating array b according to height.finally finding max(max(a),max(b)). geekguy @all Who are confused like me , why we need to sort ? Here the problem is to find the maximum height stack. Lets say we sort the boxes in the increasing(non decreasing) order of their base area. Now If we apply LIS then we will get the answer =1, because ever box’s base area is larger/same than the boxes on its right. So, To maximize the height of the stack we need to sort then in decreasing base area. Hope this helps! ssd But after the sort, then no need to find LIS since from start to end already the longest…. geekguy We find LIS of strictly decreasing width and depth and not the base area. Sorting base area is for maximizing our chance ! ssd i think we both misunderstood it after watching the mit video explanation. The thing is that both the width and depth have to be smaller than the previous one. So a base area j < i th base area doesn't necessarily mean that both the width and depth are smaller than i. It might be one of them smaller than i th but still got smaller base area. We want to sort them in decreasing order so that we can find as many as width and depth strictly smaller boxes during iteration. geekguy That’s what I have written ! Meng Zhu I think this is a weak order to satisfy width(j) > width(i) and depth(j) > depth(i),which means it isn’t possible that having a sequence where two elements have reverse order in the decreasing order of box area Nir Alfasi base 3×3 is bigger than base 4×2 yet w(j) < w(i) Meng Zhu But 3×3 couldn’t be placed on the top of 4×2. I mean that 1. box(j) could be placed on box(i) implies area(j) must be smaller than area(i); 2. box(j) could be placed on box(i) equals width(j) > width(i) and depth(j) > depth(i); So in the sorted array, if box(j) could be placed on box(i), index j must be bigger than i. In the following LIS algorithm, we aim to find the satisfying box(j), width(j) > width(i) and depth(j) > depth(i). rishabh sharma Please tell why only 3 cases of rotation are considered because in a base any of the sides can be used as the depth or the width, or if box j is to be stacked above box i then any 1 dimension of box j base should be smaller than box i bases any one dimension,and the other dimension correspondingly. akki how is the rotation of boxes is considered. say we have 1 * 2 * 3 so if we rotate about any axis that will remain same. if we rotate about depth axis then we get 2 * 1 * 3 (depth remained same) if we rotate about width axis then we must get 3*2*1 width must remain same how we get 3*1*2(all three changed at same time…how is it possible ? on which axis we have rotated the box that all three get changed.?) geekguy There are 6 possible combinations and we are considering only 3 of them where depth is always smaller than or equal to width. suresharora Can u pls tell me that why i m geeting wrong ans when considering one 3 rotation andgot accepted when consisered all 6 rotations in problem http://www.spoj.com/problems/BABTWR/ the problem statement ask the same abhishek08aug Intelligent sawyer Does the solution ensures that every box will be used atleast once?  
/* Paste your code here (You may delete these lines if not writing code) */
 geekguy Nope! http://deepinanime.blogspot.com Leandro Hi, Does the output is 60 or 50? I can’t test the C code now. I made some changes to Java.  
Arrays.sort(rot);
...
public int compareTo(Box b) {
			int diff = b.d * b.w - this.d * this.w;
			if(diff > 0) return 1;
			if(diff < 0) return -1;
			return 0;
		}
...
 Hill Billy Admin, please explain why you have 1 box coming multiple times in the answer(with dimensions interchanged. Question doesnt say you can do this  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks Please take a closer look at the question, especially following lines. Of course, you can rotate a box so that any side functions as its base. It is also allowable to use multiple instances of the same type of box. SlashGeek In conditional part :  
/* if ( rot[i].w < rot[j].w &&
              rot[i].d < rot[j].d &&
              msh[i] < msh[j] + rot[i].h
            )
         {
              msh[i] = msh[j] + rot[i].h;
         } */
 I think this expression should be modified as :  
/* if (( rot[i].w < rot[j].w&&rot[i].d < rot[j].d )||( rot[i].w < rot[j].d&&rot[i].d < rot[j].w )&&
              msh[i] < msh[j] + rot[i].h
            )
         {
              msh[i] = msh[j] + rot[i].h;
         } */
 Please correct me if I am wrong .. sachin What is the significance of sorting according to decreasing base area ? I think it should be enough to srt by depth or width. sreeram Even if we sort the boxes just on the basis of length ..I know that the answer is a increasing sub sequence of the boxes sorted by length .. Is there any reason that we need to sort by base area? or am i missing some thing Please correct me if I am wrong … Sowmya How can we implemen2 ds program in C? vsureka How do we print the boxes which gives us the maximum height of the stack?  
/* Paste your code here (You may delete these lines if not writing code) */
 whoru Your code gives wrong output for the following set, {{5,2,4},{1,4,2},{4,4,2}} Correct output should be 13 where as your code shows 11. Any reason for this? For simplicity we can write above set as, {{5,2,4},{1,2,4},{4,2,4}} where w <= d Kartik 11 is the correct answer. Please take a closer look at the problem statement. The width and length of a lower box must be strictly smaller than the upper box. And we can take more than one instances of a box. Following are all possible rotations where first column is height. Highlighted boxes are selected for maximum height 11. 2 x 4 x 5 2 x 4 x 4 4 x 2 x 5 1 x 4 x 2 5 x 2 x 4 4 x 2 x 4 4 x 4 x 2 2 x 1 x 4 4 x 1 x 2 whoru What if we are allowed to have 1 instance per box. Can you suggest what to change? nomind Please reply the whoru question What if we are allowed to have 1 instance per box ? I think , it will make problem hard… Gaurav Yes , it would be very difficult if only 1 instance of box is allowed ,as sorting will not work in that case , because it is very possible that there may be different box instances between 2 rotations of same box instances , so it may be that same box instance already used in solution ……waiting for reply for correct solution…… hukka Why do we need the sort ? vdraceil After sorting the boxes by base dimensions, the maximum possible height of the stack will be all elements put in (in the same order of sorting), right? Why do we need to do make a LIS out of it? I think, I didn’t understand the problem clearly. Vigya If it was allowed to place boxes with smaller base area over larger base area even if 1 side had the same dimension, then this solution would not work. Right?  
/* Paste your code here (You may delete these lines if not writing code) */
 http://awesomecoder.blogspot.com rkt I think this is wrong : 1) A box can be placed on top of another box only if both width and depth of the upper placed box are greater than width and depth of the lower box respectively. It should be – smaller than  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks Thanks for pointing this out. There was a typo in explanation. We will change it soon. The code and other explanation remains same. GeeksforGeeks Corrected! rahul * MSH(i) = { Max ( MSH(j) ) + height(i) } where j width(i) and height(j) > height(i). I think it should be MSH(i) = { Max ( MSH(j) ) + height(i) } where j width(i) and depth(j) > depth(i). GeeksforGeeks @rahul: Thanks for pointing this out. We have corrected the expression. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
