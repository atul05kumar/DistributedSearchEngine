Swap all odd and even bits - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Swap all odd and even bits Given an unsigned integer, swap all odd bits with even bits. For example, if the given number is 23 (00010111), it should be converted to 43 (00101011). Every even position bit is swapped with adjacent bit on right side (even position bits are highlighted in binary representation of 23), and every odd position bit is swapped with adjacent on left side. If we take a closer look at the example, we can observe that we basically need to right shift (>>) all even bits (In the above example, even bits of 23 are highlighted) by 1 so that they become odd bits (highlighted in 43), and left shift (<<) all odd bits by 1 so that they become even bits. The following solution is based on this observation. The solution assumes that input number is stored using 32 bits. Let the input number be x 1) Get all even bits of x by doing bitwise and of x with 0xAAAAAAAA. The number 0xAAAAAAAA is a 32 bit number with all even bits set as 1 and all odd bits as 0. 2) Get all odd bits of x by doing bitwise and of x with 0x55555555. The number 0x55555555 is a 32 bit number with all odd bits set as 1 and all even bits as 0. 3) Right shift all even bits. 4) Left shift all odd bits. 5) Combine new even and odd bits and return. 
// C program to swap even and odd bits of a given number
#include <stdio.h>

unsigned int swapBits(unsigned int x)
{
    // Get all even bits of x
    unsigned int even_bits = x & 0xAAAAAAAA; 

    // Get all odd bits of x
    unsigned int odd_bits  = x & 0x55555555; 

    even_bits >>= 1;  // Right shift even bits
    odd_bits <<= 1;   // Left shift odd bits

    return (even_bits | odd_bits); // Combine even and odd bits
}

// Driver program to test above function
int main()
{
    unsigned int x = 23; // 00010111

    // Output is 43 (00101011)
    printf("%u ", swapBits(x));

    return 0;
}
 Output:  43 Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Check if binary representation of a number is palindrome Swap two nibbles in a byte How to turn off a particular bit in a number? Check if a number is multiple of 9 using bitwise operators How to swap two numbers without using a temporary variable? Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) Find position of the only set bit Add two bit strings Tweet Writing code in comment? Please use ideone.com and share the link here. Saurabh Verma #include #include #include int main() { unsigned int n; int i=1,t=3; printf(“enter value of n(less than 255)n”); scanf(“%d”,&n); while(i<8) { if((n&t)==pow(2,i)) n=n-pow(2,(i-1)); else if((n&t)<pow(2,i)&&(n&t)!=0) n=n+pow(2,(i-1)); i=i+2; t=t*4; } printf("after swapn%d",n); return 0; } rihansh i thought it to do this in this manner actually we have given t hat the number is represented in 32 bit unsigned integers form so for each even position if the bit and the next bit are same then move to the next bit otherwise if 0 1 this is the case then add 2^(pos-1) else if 1 0 this is the case then subtrct the same from the original number and return that number i hope u got me Ashwini Kumar nyc………. Ashwini Kumar nyc………. Saurabh Sharma #include int main() { int n, l, r, i, temp, x = 1; scanf(“%d”, &n); l = n <> 1; //right shifting for(i = 0; i < 4; i++) // setting all odd places as 0 of the left shiftednumber { temp = l & x; l = l ^ temp; x = x << 2; } x = 2; for(i = 0; i < 4; i++) //setting all even places as 0 of rightshifted number { temp = r & x; r = r ^ temp; x = x << 2; } n = l | r; printf("Number n after swapping = %dn", n); return 0; } Guest #include int main() { int n, l, r, i, temp, x = 1; scanf(“%d”, &n); l = n <> 1; for(i = 0; i < 4; i++) { temp = l & x; l = l ^ temp; x = x << 2; } x = 2; for(i = 0; i < 4; i++) { temp = r & x; r = r ^ temp; x = x << 2; } n = l | r; printf("Number n after swapping = %dn", n); return 0; } Rajdeep static void swapEvenAndOddBits(int num) { int res=0,odd=0,even=0,power=1; while(num>0) { odd=num & 1; num=num>>1; even=num &1; num=num>>1; res=even*power+res; power=power*2; res=odd*power+res; power=power*2; } System.out.println(res); } atiqwhiz //There is Another Basic approach …. A naive way. // Negative numbers will work too… without giving wrong impact. #include using namespace std; long int swapBit(long int n) { long int k=1,p=2; int temp1=0,temp2=0; int count=0; while(count<64) { temp1=temp2=0; if(n&k) temp1=1; if(p&n) temp2=1; if(temp1!=temp2) { n=n^k^p; } k<<=2; p<<=2; count+=2; } return n; } int main(void) { long int N=23; // change the value for different output. cout< return 0; } shivali 0×55555555 how this works atiqwhiz see write binary of ox55555555 (mark hexadecimal representation 5=0101) it will be like= 0101 0101 0101…..8 times see all odd bits are one…That is what you were required.  
/* Paste your code here (You may delete these lines if not writing code) */
 shivali 0xAAAAAAAA 0×55555555 how these are worki Rohit First, we are considering 32 bits. Divide these bits in groups of 4 bits. you will have 8 groups in the end. Now if you remember hexadecimal representation then these groups can represent a number from 0-15. where 0 :- 0000 1 :- 0001 so on.. until 10 is reached 10:- 1010 can also be written as A 11 :- B so on… 15 :- F Now if you analyze A :- you would see the 1’s are already put in the even positions 1010 and in case of 5.. 1’s are put in the odd positions 0101 now when you apply bitwise operator ‘AND’ between NUM(assume num is 4 bits now) ‘&’ A you would get the value of NUM in even positions.. Similarly for odd positions. Figure out how it works for ODD as task.  
/* Paste your code here (You may delete these lines if not writing code) */
 anupam We can also do it by swapping (moving from right to left) 1st ,2nd bit then 3rd,4th bit and so on … anukul Alternate method for the problem :–  
#include<stdio.h>
#include<conio.h>

void main()
{
int num,temp,mask=3,count=1;
clrscr();
printf("ENter number :\n");
scanf("%d",&num);

	while(count<=8)
	{
	temp=num & mask;

		if(temp%3==0 || temp==0)
		num=num;
		else
		{
		num=num^mask;    
		}
	mask=mask<<2;
	count++;
	}
printf("\nResultant number is :%d",num);
getch();
}
 vhajela Easy and clean!!!  
/* Paste your code here (You may delete these lines if not writing code) */
 Anukul Mohil  
#include<stdio.h>
#include<conio.h>

void main()
{
int num,temp,mask=3,count=1;
clrscr();
printf("ENter number :\n");
scanf("%d",&num);

	while(count<=8)//assuming your processor takes 16 bit for a number
	{
	temp=num & mask;

		if(temp%3==0 || temp==0)
		num=num;
		else
		{
		num=num^mask; 
		}
	mask=mask<<2;
	count++;
	}
printf("\nResultant number is :%d",num);
getch();
}

 rka143 i think there is problem in above logic because when MSB of the number is set it does not properly. let assume number is 101001001100… then & with 0xAAAAAAAA will give: 101000001000… and right shift: 110100000100… and & with 0x55555555: 000001000100… and left shift wll give: 000010001000… and OR operation will give: 110100000100… | 000010001000… == 110110001100 but the answer should be: 010110001100…. all other are correct except MSB bit in output herpus you’re doing a signed right shift, and he is using unsigned integers abhishek08aug  
#include<stdio.h>

int swap_even_odd_bits(int num) {
    int even_bits = num&0xAAAAAAAA;
    even_bits = even_bits>>1;
    
    int odd_bits = num&0x55555555;
    odd_bits = odd_bits<<1;
    return even_bits|odd_bits;
}

int main(){
    unsigned int x = 23; // 00010111
    printf("%u ", swap_even_odd_bits(x));
    return 0;
}
 moonlight i guess u just should swap the words even with odd in your explanation and code for this logic to work Pollob Cool Technique … Gopichand Godishala It is not getting compiled. Error in line no:10 unsigned int odd_bits = x & 0×55555555; // why???? GeeksforGeeks Looks like you are using Turbo C compiler. Please use a compiler where integers are 32 bits. Gopichand Godishala No i am using devC++….. d.mca.iitr its syntax error in the code …. correct multiplication symbol to x(alphabate ) i.e unsigned int odd_bits = x & 0×55555555; to unsigned int odd_bits = x & 0x55555555; it will work  
/* Paste your code here (You may delete these lines if not writing code) */
 Saravanakumaar J Hi, Why do you shift even bits to right and odd bits to left? Best regards, Saravanakumaar J kartik If we do it other way (means shift even bits to left and odd bits to right), then we will loose the leftmost and rightmost bits. Does this answer your question? Saravanakumaar J Kartik, Thanks for responding. I would like to know why do we require to shift the bits in the first place? atiqwhiz If we don’t do so…. Bit position will not get reversed(odd to even and vice versa)….and we get the same result. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
