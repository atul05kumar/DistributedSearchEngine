Print BST keys in the given range - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print BST keys in the given range Given two values k1 and k2 (where k1 < k2) and a root pointer to a Binary Search Tree. Print all the keys of tree in range k1 to k2. i.e. print all x such that k1<=x<=k2 and x is a key of given BST. Print all the keys in increasing order. For example, if k1 = 10 and k2 = 22, then your function should print 12, 20 and 22. Thanks to bhasker for suggesting the following solution. Algorithm: 1) If value of root’s key is greater than k1, then recursively call in left subtree. 2) If value of root’s key is in range, then print the root’s key. 3) If value of root’s key is smaller than k2, then recursively call in right subtree. Implementation: #include<stdio.h>

/* A tree node structure */
struct node
{
  int data;
  struct node *left;
  struct node *right;
};

/* The functions prints all the keys which in the given range [k1..k2].
    The function assumes than k1 < k2 */
void Print(struct node *root, int k1, int k2)
{
   /* base case */
   if ( NULL == root )
      return;

   /* Since the desired o/p is sorted, recurse for left subtree first
      If root->data is greater than k1, then only we can get o/p keys
      in left subtree */
   if ( k1 < root->data )
     Print(root->left, k1, k2);

   /* if root's data lies in range, then prints root's data */
   if ( k1 <= root->data && k2 >= root->data )
     printf("%d ", root->data );

  /* If root->data is smaller than k2, then only we can get o/p keys
      in right subtree */
   if ( k2 > root->data )
     Print(root->right, k1, k2);
}

/* Utility function to create a new Binary Tree node */
struct node* newNode(int data)
{
  struct node *temp = new struct node;
  temp->data = data;
  temp->left = NULL;
  temp->right = NULL;

  return temp;
}

/* Driver function to test above functions */
int main()
{
  struct node *root = new struct node;
  int k1 = 10, k2 = 25;

  /* Constructing tree given in the above figure */
  root = newNode(20);
  root->left = newNode(8);
  root->right = newNode(22);
  root->left->left = newNode(4);
  root->left->right = newNode(12);

  Print(root, k1, k2);

  getchar();
  return 0;
}
 Output: 12 20 22 Time Complexity: O(n) where n is the total number of keys in tree. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. CoderKnowledge Iterative Solution: Approach: 1) Do Inorder Traversal. 2) while printing the nodes check whether the data within range of n1 and n2 where n1 and n2 are keys otherwise donot print. psuedo Code: void keysInRange(struct node *root,int n1,int n2) { if(n1 > n2) { // swap n1 and n2 swap(n1,n2); // now n1 and n2 values interchanged. } stack s; while(1) { while(root) { /* All left sub tree elements are added */ Push(s,root); root = root->left; } root = pop(s); if(root->data >=n1 && root->data data); root = root ->right; /* if stack is empty */ if(stackIsEmpty(s)) break; } } Please correct if any mistakes are there. Guest Time Complexity: O(n) . We can also store the values in a vector, if we want to process these values further. #include #include #include #include using namespace std; typedef struct node { int data; struct node *left; struct node *right; }node; node *newNode(int data) { node *N=(node *)calloc(1,sizeof(node)); N->data=data; N->right=NULL; N->left=NULL; return N; } void FindKeys(node *root,int k1,int k2,vector&V) { if(!root) return; if(root->data>=k1 && root->datadata); FindKeys(root->left,k1,k2,V); FindKeys(root->right,k1,k2,V); } else if(root->dataright,k1,k2,V); } else if(root->data>k2) { FindKeys(root->right,k1,k2,V); } return; } int main() { vector V; int k1 = 10, k2 = 25; node *root = newNode(20); root->left = newNode(8); root->right = newNode(22); root->left->left = newNode(4); root->left->right = newNode(12); FindKeys(root,k1,k2,V); for(int i=0;i<V.size();i++) printf("%d ",V[i]); return 0; } miandfhy Do inorder traversal. At node apply the condition Does this work? sonali gupta #include #include #include typedef struct NODE { int info; struct NODE *left,*right; }node; node *temp; node *getnode() {return((node *)malloc(sizeof(node))); } node *newNode(int x) { temp=getnode(); temp->info=x; temp->left=NULL; temp->right=NULL; return temp; } void inorder(node *root,int k1,int k2) {if(root!=NULL) {inorder(root->left,k1,k2); if(root->info>=k1 && root->info< =k2) printf("%d ",root->info); inorder(root->right,k1,k2); } } int main() { int k1 = 10, k2 = 25; /* Constructing tree given in the above figure */ node *root = newNode(20); root->left = newNode(8); root->right = newNode(22); root->left->left = newNode(4); root->left->right = newNode(12); inorder(root, k1, k2); getchar(); return 0; } abhishek08aug C++ code:  
#include <iostream>
#include <stdlib.h>
using namespace std;
  
class tree_node {
  private:
    int data;
    tree_node * left;
    tree_node * right;
  public:
    tree_node() {
      left=NULL;
      right=NULL;
    }
    void set_data(int data) {
      this->data=data;
    }
    int get_data() {
      return this->data;
    }
    void set_left(tree_node * left) {
      this->left=left;
    }
    tree_node * get_left() {
      return this->left;
    }
    void set_right(tree_node * right) {
      this->right=right;
    }
    tree_node * get_right() {
      return this->right;
    }
    tree_node ** get_left_ref() {
      return &(this->left);
    }
    tree_node ** get_right_ref() {
      return &(this->right);
    }
};
  
class tree {
  private:
    tree_node * root;
    int size;
    void _recursive_insert(tree_node ** root_ref, int value);
    void _print_preorder(tree_node * root);
    void _print_inorder(tree_node * root);
    void _print_postorder(tree_node * root);
    int _find_size(tree_node * root);
    int _are_identical(tree_node * tn1, tree_node * tn2);
    int _find_height(tree_node * root);
    void _delete_tree(tree_node ** root);
    void _mirror(tree_node * root);
    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);
    void _print_array(int * array, int len);
    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);
    tree_node * _find_node(tree_node * root, int value);
    tree_node * _min_node(tree_node * root);
    void _print_level_order(tree_node * root);
    int _count_leaf_nodes(tree_node * root);
    int _is_bst(tree_node * root);
    int _children_sum(tree_node * root);
    void _ensure_children_sum(tree_node * root);
    int _diameter(tree_node * root);
    int _is_height_balanced(tree_node * root);
    int _leaf_path_sum(tree_node * root, int num);
    void _double_tree(tree_node * root);
    int _width(tree_node * root, int height, int level, int initialize_width_array);
    int _maximum(int array[], int len);
    void _print_k_distance_nodes(tree_node * root, int k, int distance);
    tree_node * _kth_smallest_element(tree_node * root, int k);
    int _get_level(tree_node * root, int key, int level);
    int _print_ancestors(tree_node * root, int key);
    void _print_keys_in_range(tree_node * root, int r1, int r2);
  public:
    tree() {
      root=NULL;
      size=0;
    }
    void insert(int value);
    void recursive_insert(int value);
    void print_preorder();
    void print_inorder();
    void print_postorder();
    int find_size();
    int get_size() {
      return this->size;
    }
    int are_identical(tree t);
    int find_height();
    void delete_tree();
    void mirror();
    void print_paths();
    tree_node * lowest_common_ancestor(int a, int b);
    tree_node * find_node(int value);
    tree_node * min_node();
    void print_level_order();
    int count_leaf_nodes();
    int is_bst();
    int children_sum();
    void ensure_children_sum();
    int diameter();
    int is_height_balanced();
    int leaf_path_sum(int num);
    void double_tree();
    int width();
    void print_k_distance_nodes(int k);
    tree_node * kth_smallest_element(int k);
    int get_level(int key);
    void print_ancestors(int key);
    void print_keys_in_range(int r1, int r2);
};
  
void tree::insert(int value) {
  if(root==NULL) {
    root=new tree_node;
    root->set_data(value);
  } else {
    tree_node * parent=NULL;
    tree_node * current=root;
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    while(current!=NULL) {
      if(value<=current->get_data()) {
        parent=current;
        current=current->get_left();
      } else {
        parent=current;
        current=current->get_right();
      }
    }
    if(value<=parent->get_data() && parent->get_left()==NULL) {
      parent->set_left(new_node);
    } else if(value>parent->get_data() && parent->get_right()==NULL) {
      parent->set_right(new_node);
    }
  }
  size++;
}
  
void tree::recursive_insert(int value) {
  _recursive_insert(&root, value);
  size++;
}
  
void tree::_recursive_insert(tree_node ** root_ref, int value) {
  if(*root_ref==NULL) {
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    *root_ref=new_node;  
  } else {
    if(value<=(*root_ref)->get_data()) {
      _recursive_insert((*root_ref)->get_left_ref(), value);
    } else {
      _recursive_insert((*root_ref)->get_right_ref(), value);
    }
  }
}
  
void tree::print_preorder() {
  if(root==NULL) {
    return;
  }
  _print_preorder(root);
  cout<<endl;
}
  
void tree::_print_preorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  cout<<root->get_data()<<" ";
  if(root->get_left()!=NULL)
    _print_preorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_preorder(root->get_right());
}
  
void tree::print_inorder() {
  if(root==NULL) {
    return;
  }
  _print_inorder(root);
  cout<<endl;
}
  
void tree::_print_inorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_inorder(root->get_left());
  cout<<root->get_data()<<" ";
  if(root->get_right()!=NULL)
    _print_inorder(root->get_right());
}
  
void tree::print_postorder() {
  if(root==NULL) {
    return;
  }
  _print_postorder(root);
  cout<<endl;
}
  
void tree::_print_postorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_postorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_postorder(root->get_right());
  cout<<root->get_data()<<" ";
}
 
int tree::find_size() {
  return _find_size(root);
}
 
int tree::_find_size(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return 1+_find_size(root->get_left())+_find_size(root->get_right());
  }
}
 
int tree::are_identical(tree t) {
  return _are_identical(this->root, t.root);
}
 
int tree::_are_identical(tree_node * tn1, tree_node * tn2) {
  if(tn1==NULL && tn2==NULL) {
    return 1;
  } else if((tn1==NULL && tn2!=NULL) || (tn1!=NULL && tn2==NULL) || (tn1->get_data()!=tn2->get_data())) {
    return 0;
  } else {
    return _are_identical(tn1->get_left(), tn2->get_left()) && _are_identical(tn1->get_right(), tn2->get_right());
  }
}
 
int tree::find_height() {
  return _find_height(root);
}
 
int tree::_find_height(tree_node * root) {
  if(root==NULL) {
    return 0;
  }
  else {
    return 1+max(_find_height(root->get_left()), _find_height(root->get_right()));
  }
}
 
void tree::delete_tree() {
  _delete_tree(&root);
  size=0;
}
 
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      _delete_tree((*root)->get_left_ref());
    }
    if((*root)->get_right()!=NULL) {
      _delete_tree((*root)->get_right_ref());
    }
    delete(*root);
    *root=NULL;
  }
}
 
/* alternate _delete_tree */
/*
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      tree_node * left_ref=(*root)->get_left();
      _delete_tree(&left_ref);
    }
    if((*root)->get_right()!=NULL) {
      tree_node * right_ref=(*root)->get_right();
      _delete_tree(&right_ref);
    }
    delete(*root);
    *root=NULL;
  }
}
*/
 
void tree::mirror() {
  _mirror(root);
}
 
void tree::_mirror(tree_node * root) {
  if(root==NULL) {
    return;
  }
 
  tree_node * temp=root->get_left();
  root->set_left(root->get_right());
  root->set_right(temp);
  _mirror(root->get_left());
  _mirror(root->get_right());
}
 
void tree::print_paths(){
   int max_path_length=find_height();
   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);
  _print_paths(root, path_nodes, 0);
}
 
void tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){
  if(root==NULL) {
    return;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_array(path_nodes, next_vacant_position);
  } else {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_paths(root->get_left(), path_nodes, next_vacant_position+1);
    _print_paths(root->get_right(), path_nodes, next_vacant_position+1);
  }
}
 
void tree::_print_array(int * array, int len) {
  int i;
  for(i=0; i<=len; i++) {
    cout<<*(array+i)<<" ";
  }
  cout<<endl;
}
 
tree_node * tree::find_node(int value) {
  return _find_node(root, value);
}
 
tree_node * tree::_find_node(tree_node * root, int value) {
  if(root==NULL || root->get_data()==value) {
    return root;
  } else if(value<=root->get_data()) {
    return _find_node(root->get_left(), value);
  } else {
    return _find_node(root->get_right(), value);
  }
}
 
tree_node * tree::lowest_common_ancestor(int a, int b) {
  return _lowest_common_ancestor(NULL, root, a, b);
}
 
tree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {
  if(root==NULL) {
    return root;
  } else if((root->get_data()==a && (root->get_left()->get_data()==b || root->get_right()->get_data()==b))
             || (root->get_data()==b && (root->get_left()->get_data()==a || root->get_right()->get_data()==a))) {
    return parent;
  } else if((_find_node(root->get_left(), a)!=NULL && _find_node(root->get_right(), b)!=NULL)
        || (_find_node(root->get_left(), b)!=NULL && _find_node(root->get_right(), a)!=NULL)) {
    return root;
  } else if(_find_node(root->get_left(), a)!=NULL && _find_node(root->get_left(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_left(), a, b);
  } else if(_find_node(root->get_right(), a)!=NULL && _find_node(root->get_right(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_right(), a, b);
  } else {
    return NULL;
  }
}
 
tree_node * tree::min_node() {
  return _min_node(root);
}
 
tree_node * tree::_min_node(tree_node * root) {
  if(root==NULL || root->get_left()==NULL) {
    return root;
  } else {
    return _min_node(root->get_left());
  }
}
 
int tree::count_leaf_nodes() {
  return _count_leaf_nodes(root);
}
 
int tree::_count_leaf_nodes(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _count_leaf_nodes(root->get_left())+_count_leaf_nodes(root->get_right());
  }
}
 
 
int tree::is_bst() {
  return _is_bst(root);
}
 
int tree::_is_bst(tree_node * root) {
  static tree_node * previous=NULL;
  if(root==NULL) {
    return 1;
  } else {
    if(!_is_bst(root->get_left())) {
      return 0;
    }
    if(previous!=NULL && (previous->get_data())>(root->get_data())) {
      return 0;
    }
    previous=root;
    if(!_is_bst(root->get_right())) {
      return 0;
    }   
  }
}
 
int tree::children_sum() {
  return _children_sum(root);
}
 
int tree::_children_sum(tree_node * root) {
  if(root==NULL) {
    return 1;
  }
  if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  }
  else if(_children_sum(root->get_left()) && _children_sum(root->get_right())){
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }
 
    if(left_data+right_data==root->get_data()) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}
 
void tree::ensure_children_sum() {
  _ensure_children_sum(root);
}
 
void tree::_ensure_children_sum(tree_node * root) {
  if(root==NULL || (root->get_left()==NULL && root->get_right()==NULL)) {
    return;
  } else {
    _ensure_children_sum(root->get_left());
    _ensure_children_sum(root->get_right());
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }
    root->set_data(left_data+right_data);
  }
}
 
int tree::diameter() {
  return _diameter(root);
}
 
int tree::_diameter(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return max(_find_height(root->get_left())+_find_height(root->get_right())+1, max(_diameter(root->get_left()), _diameter(root->get_left())));
  }
}
 
int tree::is_height_balanced() {
  return _is_height_balanced(root);
}
 
int tree::_is_height_balanced(tree_node * root) {
  if(root==NULL) {
    return 1;
  } else {
    int left_height=_find_height(root->get_left());
    int right_height=_find_height(root->get_right());
    if(abs(left_height-right_height)<=1 && _is_height_balanced(root->get_left()) && _is_height_balanced(root->get_left())) {
      return 1;
    } else {
      return 0;
    }
  }
}
 
int tree::leaf_path_sum(int sum) {
  return _leaf_path_sum(root, sum);
}
 
int tree::_leaf_path_sum(tree_node * root, int sum) {
  if(root==NULL) {
    return 0;
  } else if(root->get_data()==sum && root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _leaf_path_sum(root->get_left(), sum-root->get_data()) || _leaf_path_sum(root->get_right(), sum-root->get_data());
  }
}
 
void tree::double_tree() {
  _double_tree(root);
}
 
void tree::_double_tree(tree_node * root) {
  if(root==NULL) {
    return;
  } else {
    tree_node * new_node=new tree_node;
    new_node->set_data(root->get_data());
    tree_node * root_left=root->get_left();
    root->set_left(new_node);
    new_node->set_left(root_left);
    _double_tree(root_left);
    _double_tree(root->get_right());
  }
}
 
int tree::width() {
  int height=find_height();
  return _width(root, height, 0, 1);
}
 
int tree::_width(tree_node * root, int height, int level, int initialize_width_array) {
  static int width[]={0};
  if(initialize_width_array==1) {
    int i;
    for(i=0; i<height; i++) {
      width[i]=0; 
    }
  }
  if(root==NULL) {
    width[level]=width[level]+0;
  } else {
    width[level]=width[level]+1;
    _width(root->get_left(), height, level+1, 0);
    _width(root->get_right(), height, level+1, 0);
  }
  return _maximum(width, height);
}
 
int tree::_maximum(int array[], int len) {
  int i;
  int max=array[0];
  for(i=1; i<len; i++) {
    if(array[i]>max) {
      max=array[i];
    }
  }
  return max;
}
 
void tree::print_k_distance_nodes(int k) {
  _print_k_distance_nodes(root, k, 0);
  cout<<endl;
}
 
void tree::_print_k_distance_nodes(tree_node * root, int k, int distance) {
  if(root==NULL) {
    return;
  } else if(distance==k) {
    cout<<root->get_data()<<" ";
  } else {
    _print_k_distance_nodes(root->get_left(), k, distance+1);
    _print_k_distance_nodes(root->get_right(), k, distance+1);
  }
}
 
tree_node * tree::kth_smallest_element(int k) {
  return _kth_smallest_element(root, k);
}
 
tree_node * tree::_kth_smallest_element(tree_node * root, int k) {
  if(root==NULL) {
    return root;
  } else {
    int left_size=_find_size(root->get_left());
    if(left_size==k-1) {
      return root;
    } else if(left_size>=k) {
      return _kth_smallest_element(root->get_left(), k);
    } else {
      return _kth_smallest_element(root->get_right(), k-left_size-1);
    }
  }
}

int tree::get_level(int key) {
  return _get_level(root, key, 1);
}

int tree::_get_level(tree_node * root, int key, int level) {
  if(root==NULL) {
      return 0;
  } else if(root->get_data()==key) {
      return level;
  }
  else {
          return _get_level(root->get_left(), key, level+1)+_get_level(root->get_right(), key, level+1);
  }
}

void tree::print_ancestors(int key){
    _print_ancestors(root, key);
    cout<<endl;
}
    
int tree::_print_ancestors(tree_node * root, int key) {
    if(root==NULL) {
        return 0;
    } else if(root->get_data()==key) {
      return 1;
    } else {
        if(_print_ancestors(root->get_left(), key) || _print_ancestors(root->get_right(), key)) {
            cout<<root->get_data()<<" ";
            return 1;
        }
    }
}

void tree::print_keys_in_range(int r1, int r2) {
    _print_keys_in_range(root, r1, r2);
    cout<<endl;
}

void tree::_print_keys_in_range(tree_node * root, int r1, int r2) {
    if(root==NULL) {
        return;
    }
    if(root->get_left()!=NULL) {
        _print_keys_in_range(root->get_left(), r1, r2);
    }
    if(root->get_data()>=r1 && root->get_data()<=r2) {
        cout<<root->get_data()<<" ";
    }
    if(root->get_right()!=NULL) {
        _print_keys_in_range(root->get_right(), r1, r2);
    }
} 

int main() {
  tree t1;
 
  t1.recursive_insert(20);
  t1.recursive_insert(10);
  t1.insert(30);
  t1.insert(8);
  t1.recursive_insert(12);
  t1.recursive_insert(28);
  t1.recursive_insert(32);
  t1.recursive_insert(6);
  t1.recursive_insert(9);
  t1.recursive_insert(50);
  t1.insert(14);
  t1.insert(26);
 
  t1.print_inorder();
 
  t1.print_keys_in_range(15, 50);
  t1.print_keys_in_range(11, 500);
  t1.print_keys_in_range(0, 500);
  
  return 0;
}
 6 8 9 10 12 14 20 26 28 30 32 50 20 26 28 30 32 50 12 14 20 26 28 30 32 50 6 8 9 10 12 14 20 26 28 30 32 50 anonymous is this correct?  
void Print(struct node *root, int k1, int k2)
{
   /* base case */
   if ( NULL == root )
      return;
 
   /* Since the desired o/p is sorted, recurse for left subtree first
      If root->data is greater than k1, then only we can get o/p keys
      in left subtree */
   if ( k1 > root->data )
     Print(root->right, k1, k2);
 
   /* if root's data lies in range, then prints root's data */
   else if ( k1 <= root->data && k2 >= root->data )
    {
         Print(root->left, k1, k2);
         printf("%d ", root->data );
         Print(root->right, k1, k2);
         }
 
  /* If root->data is smaller than k2, then only we can get o/p keys
      in right subtree */
   else if ( k2 < root->data )
     Print(root->left, k1, k2);
}
 
/* Utility function to create a new Binary Tree node */
struct node* newNode(int data)
{
  struct node *temp = new struct node;
  temp->data = data;
  temp->left = NULL;
  temp->right = NULL;
 
  return temp;
}

 anonymous i want to know if this approach is better?? void Print(struct node *root, int k1, int k2) { /* base case */ if ( NULL == root ) return; /* Since the desired o/p is sorted, recurse for left subtree first If root->data is greater than k1, then only we can get o/p keys in left subtree */ if ( k1 > root->data ) Print(root->right, k1, k2); /* if root’s data lies in range, then prints root’s data */ else if ( k1 data && k2 >= root->data ) { Print(root->left, k1, k2); printf(“%d “, root->data ); Print(root->right, k1, k2); } /* If root->data is smaller than k2, then only we can get o/p keys in right subtree */ else if ( k2 data ) Print(root->left, k1, k2); } /* Utility function to create a new Binary Tree node */ struct node* newNode(int data) { struct node *temp = new struct node; temp->data = data; temp->left = NULL; temp->right = NULL; return temp; } http://shashank7s.blogspot.com WgpShashank I Think Sandeep It Misses Some Corner Cases Like We have to check that k1 root value because obviously data will be printed when k1<=x<=k2 isn't it ? so why missing some corner cases ? correct me if i missed something ? /* Paste your code here (You may delete these lines if not writing code) */ kartik @WgpShashank: It works for all the cases. The following condition takes care of equal to cases.  
   /* if root's data lies in range, then prints root's data */
   if ( k1 <= root->data && k2 >= root->data )
     printf("%d ", root->data );
  R.Srinivasan void Print(struct node *root, int k1, int k2) { if(root) { Print(root->left,k1,k2); if(k1 data && root->data data); Print(root->right,k1,k2); } } mrn i think the code is eating up extra space as well as time(making new stack frame each time and more cpu instructions).In my humble opinion the best case would be non-recursive inorder tree traversal and each time checking value within it (you are also doing this checking in each stack frame). And the time complexity : O(n) as said above. Udit In the Algorithm: In 1st point shouldn’t there be k2 instead of k1 and similarly in the 3rd point k1 instead of k2 1st and 3rd points acc. to me: 1) If value of root’s key is greater than k2, then recursively call in left subtree. 3) If value of root’s key is smaller than k1, then recursively call in right subtree. Plz correct me if I’m wrong yash khandelwal I think Udit is right.. following line should be corrected if ( k1 data ) // should be k2data Print(root->left, k1, k2); similarly, for if ( k2 > root->data ) // should be k1>root->data Print(root->right, k1, k2); correct me if i am wrong … yash khandelwal sorry.!! in line if(k1data) //should be k2data ajay we can do simply pre-order traversal and while printing data apply the condition . it will also run in o(n) time vipul.mittal  /*i think it could also work,if it wont then tell me :where did i mistake??*/
void Print(struct node *root, int k1, int k2)
{
   /* base case */
   if (root==NULL )
      return;
 
   /* Since the desired o/p is sorted, recurse for left subtree first
      If root->data is greater than k1 and less than k2, then only we can get o/p keys
     Print(root->left, k1, k2);
          int x = root->data;
      if(x>=k1 && x<=k2){
        printf("%d ", root->data );
        Print(root->right, k1, k2);
      }
 
 
}
 anonymous it’s O(n) geek4u O(n) is the correct upper bound. But a tighter bound could be O(k + h) where k is the number of nodes in the given range and h is the height of tree. For a balanced tree, height can always be bounded by O(k + Logn). So Kartik’s argument is also true for balanced BST. GeeksforGeeks @anonymous & @geek4u: Thanks for pointing this out. To make things simple, we have changed the complexity to O(n). Jing For the middle case where (k1 < = root->data&&root->data<=k2) Shouldn't we first recursively call left tree, then print root, then recursively call right tree? I don't see recursion in this case. GeeksforGeeks @Jing: Please take a closer look at the program. It wiil call for the left subtree when k1 < root->data and will call for right subtree when k2 > root->data. So when (k1 < root->data && root->data < k2), all the three conditions in if statements will become true. vipulkv How the TC is O(k + Logn)? kartik To understand this, we can take the corner cases first and then take the general case. 1) Corner cases a) If all the nodes are in the range [k1, k2], then k = n, the program becomes a simple inorder traversal program and complexity of traversal is O(n). b) If there are no nodes in the range [k1, k2], then all nodes will either be on the left side or right side of the range. I mean all the values would be either smaller than k1 or greater than k2. In this case program traverses the height of tree and complexity becomes O(Logn) 2) General Case: The program will print k nodes and then traverses rest of the tree along height. Palash Here is a code that trims a BST to have it’s elements in a new range [min,max]. This runs in log(n). Use this to trim the BST and then run inorder traversal to get the answer in O(k+log(n)). Hope this helps. node* trimBST(node* root, int min, int max) { if(!root)return NULL; else if(root->dataright,min,max); else if(root->data>max) return trimBST(root->left,min,max); else{ root->left=trimBST(root->left,min,max); root->right=trimBST(root->right,min,max); return root; } } Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
