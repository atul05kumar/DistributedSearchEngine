Remove BST keys outside the given range - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Remove BST keys outside the given range Given a Binary Search Tree (BST) and a range [min, max], remove all keys which are outside the given range. The modified tree should also be BST. For example, consider the following BST and range [-10, 13]. The given tree should be changed to following. Note that all keys outside the range [-10, 13] are removed and modified tree is BST. There are two possible cases for every node. 1) Node’s key is outside the given range. This case has two sub-cases. …….a) Node’s key is smaller than the min value. …….b) Node’s key is greater that the max value. 2) Node’s key is in range. We don’t need to do anything for case 2. In case 1, we need to remove the node and change root of sub-tree rooted with this node. The idea is to fix the tree in Postorder fashion. When we visit a node, we make sure that its left and right sub-trees are already fixed. In case 1.a), we simply remove root and return right sub-tree as new root. In case 1.b), we remove root and return left sub-tree as new root. Following is C++ implementation of the above approach. 
// A C++ program to remove BST keys outside the given range
#include<stdio.h>
#include <iostream>

using namespace std;

// A BST node has key, and left and right pointers
struct node
{
    int key;
    struct node *left;
    struct node *right;
};

// Resmoves all nodes having value outside the given range and returns the root
// of modified tree
node* removeOutsideRange(node *root, int min, int max)
{
   // Base Case
   if (root == NULL)
      return NULL;

   // First fix the left and right subtrees of root
   root->left =  removeOutsideRange(root->left, min, max);
   root->right =  removeOutsideRange(root->right, min, max);

   // Now fix the root.  There are 2 possible cases for toot
   // 1.a) Root's key is smaller than min value (root is not in range)
   if (root->key < min)
   {
       node *rChild = root->right;
       delete root;
       return rChild;
   }
   // 1.b) Root's key is greater than max value (root is not in range)
   if (root->key > max)
   {
       node *lChild = root->left;
       delete root;
       return lChild;
   }
   // 2. Root is in range
   return root;
}

// A utility function to create a new BST node with key as given num
node* newNode(int num)
{
    node* temp = new node;
    temp->key = num;
    temp->left = temp->right = NULL;
    return temp;
}

// A utility function to insert a given key to BST
node* insert(node* root, int key)
{
    if (root == NULL)
       return newNode(key);
    if (root->key > key)
       root->left = insert(root->left, key);
    else
       root->right = insert(root->right, key);
    return root;
}

// Utility function to traverse the binary tree after conversion
void inorderTraversal(node* root)
{
    if (root)
    {
        inorderTraversal( root->left );
        cout << root->key << " ";
        inorderTraversal( root->right );
    }
}

// Driver program to test above functions
int main()
{
    node* root = NULL;
    root = insert(root, 6);
    root = insert(root, -13);
    root = insert(root, 14);
    root = insert(root, -8);
    root = insert(root, 15);
    root = insert(root, 13);
    root = insert(root, 7);

    cout << "Inorder traversal of the given tree is: ";
    inorderTraversal(root);

    root = removeOutsideRange(root, -10, 13);

    cout << "\nInorder traversal of the modified tree is: ";
    inorderTraversal(root);

    return 0;
}
 Output: Inorder traversal of the given tree is: -13 -8 6 7 13 14 15
Inorder traversal of the modified tree is: -8 6 7 13 Time Complexity: O(n) where n is the number of nodes in given BST. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. OP Coder My solution: /*[i,j] represents range*/ node* prune(node *root, int i, int j) { if ( root == NULL) return root; if (root->data right, i, j); else if( root->data > j) return root = prune(root->left, i, j); else { root->left = prune(root->left, i , root->data – 1); root->right = prune(root->right, root->data, j); return root; } } Guest Wow Solution Shivam This can also be done using preorder: void distroy(node * root) { if(root==NULL) return ; distroy(root->left); distroy(root->right); free(root); } node *removeOutsideRange(node* root,int k1,int k2) { if(root==NULL) return NULL; if(root->data>=k1 && root->dataleft=removeOutsideRange(root->left,k1,k2); root->right=removeOutsideRange(root->right,k1,k2); } else if(root->dataright; distroy(root->left); delete (root); return removeOutsideRange(temp,k1,k2); } else if(root->data>k2) { node* temp=root->left; distroy(root->right); delete (root); return removeOutsideRange(temp,k1,k2); } return root; } time complexity-O(n) Patil Nice Solution, But i have a quary, why, make right node as root, why not left if (root->key right; delete root; return rChild; } Here, is also same as above why left , why not right if (root->key > max) { node *lChild = root->left; delete root; return lChild; } Sreenivas Doosa @Patil: For your Query –> why, make right node as root, why not left if (root->key right; delete root; return rChild; } Ans: While traversing in post order fashion, the left has already been processed before right and if your current node(root->key) is less than min that means all the elements in the left sub tree are less than min since it is BST and as per the above code all those left elements have already been deleted before the current node. And now we are left with right sub tree only. the elements in the right sub tree must be greater than the current node but they may be less than min or greater than max hence we need to return the right sub tree for further processing… Try with some example and do post order traversal you can understand easily… The answer to your second query is similar to the above answer but in reverse way.. Patil Thanks… http://atiqwhiz.blogspot.in/ atiq Awesome logic…. thank you I was hitting around BST properties at the time of traversal itself … but was a long code. HKB What if the initial root was not in the range? (The above code shall be wrong as it shall return the parent) Sreenivas Doosa If initial root is not in range, then the above code deletes the whole tree and returns NULL. The code works for all the cases. Thanks mrn Node *remove_out_range(Node *root,int l,int r){ if(root==NULL) return NULL; root->l=remove_out_range(root->l,l,r); root->r=remove_out_range(root->r,l,r); if(!(root->v>=l && root->v l) tmp=root->l; else tmp=root->r; delete root; return tmp; } return root; } Amit Singh It Can be Iteratively using the below Algorithm. 1) Traverse the Tree in level order and put the node in queue. 2) loop..while q is not empty 3) remove the front node form queue and if the node is outside the given range..delete the node. 3) if left child of above node is not null, put in queue. 4) if right child of node is not null, put in queue 5) exit while loop, when queue is empty rahul23 How will u remove from tree?u are removing queue?Plz give any example…Say root is out of range ?hw will u procede? Karanpreet Find the ceiling of smaller value and the floor of larger value in the BST. For the ceiling of smaller value cut off its left subtree , find an ancestor and make the link directly to its ancestor such that it is the left subtree of its ancestor. For the floor of larger value, cutoff its right subtree , find an ancestor and make the link directly to this ancestor such that it is right subtree of its ancestor. Finally find the LCA of floor and ceiling and cutoff any parents of LCA from it. Your answer is the subtree rooted at the LCA. bhavneet the above mentioned code traverse a lot of nodes that are not required the following code requires a utility function deleteTree(struct node *); // function needs to be called as func ( root, INT_MAX,INT_MIN, k1, k2);k1 and k2 are range struct node * func ( struct node * root, int max , int min , int k1, int k2) { if( root==NULL) return NULL ; if( max k1) return root; if ( root->data > k2 || root->data left = func ( root->left, root->data, min, k1, k2); root->right= func ( root->right, max, root->data, k1, k2); return root; }  
// function needs to be called as func ( root, INT_MAX,INT_MIN, k1, k2);k1 and k2 are range 
struct node * func ( struct node * root, int max , int min , int k1, int k2)
{
        if( root==NULL)
                return NULL ;

        if( max < k2 && min> k1)
                return root;

        if ( root->data > k2 || root->data <k1)
                {
                        deleteTree( root);
                        return NULL;

                }
        root->left = func ( root->left, root->data, min, k1, k2);
        root->right= func ( root->right, max, root->data, k1, k2);
        return root;
}

 comments, errors , improvements are welcome ! bhavneet oops some improvements  

struct node * func ( struct node * root, int max , int min , int k1, int k2)
{
        if( root==NULL)
                return NULL ;

        if( max < k2 && min> k1)
                return root;// the subtree will be in given range 

        if( max < k1 || min> k2)// subtree is outofrange 
        {
                deleteTree( root);
                return NULL;
        }

        //subtree can be in range or outof range 
        if ( root->data > k2)
        {
                struct node* temp= root->left;
                deleteTree( root->right); //right subtree is outof range
                free( temp);
                return func ( temp , max, min, k1, k2);
        }
        else if ( root->data < k1)
        {       
                struct node * temp= root->right;
                deleteTree( root->left);// left subtree is out of range
                free( root);
                return func ( temp, max, min , k1, k2);
        }
        else// present node is valid
        {
        root->left = func ( root->left, root->data, min, k1, k2);
        root->right= func ( root->right, max, root->data, k1, k2);

        return root;
        }
}

 Asap Dont u think there will be memory leak in this program as we are deleting only root ?  
/* Paste your code here (You may delete these lines if not writing code) */
 abhishek08aug Intelligent atul @geeksforgeeks: for range [7,13] , [14,15] , it is printing garbage value.  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks @atul: Thanks for pointing this out. We have fixed the issue. In the original post, the return value of removeOutsideRange() was not being assigned to root. viki One possible solution could be :  
//Remove BST keys outside the given range
#include<stdio.h>
#include<malloc.h>
struct node
{
    int info;
    struct node *left,*right;
};
struct node *newnode(int x)
{
    struct node *t = (struct node *)malloc(sizeof(struct node));
    t->info=x;
    t->left=t->right=NULL;
    return t;
}
void print_inorder(struct node *root)
{
    if(root)
    {
        print_inorder(root->left);
        printf("%d ",root->info);
        print_inorder(root->right);
    }
}
void destroy(struct node *root)
{
    if(root)
    {
        destroy(root->left);
        free(root);
        destroy( root->right );
    }

}
struct node * rmv_outside_keys(struct node **root,int min,int max)
{
    struct node *l,*r,*result,*input = *root;
    if(input==NULL) return NULL;
    if(input->info>max)
    {
        r= rmv_outside_keys(&input->left,min,max);
        destroy(input->right);
        free(input);
        return r;
    }
    if(input->info <min)
    {
        r= rmv_outside_keys(&input->right,min,max);
        destroy(input->left);
        free(input);
        return r;
    }
    input->left = rmv_outside_keys(&input->left,min,max);
    input->right = rmv_outside_keys(&input->right,min,max);
    return input;
}
int main()
{
    struct node *root;
    root = newnode(6);
    root->left = newnode(-13);
    root->right = newnode(14);
    root->right->left = newnode(13);
    root->right->right = newnode(15);
    root->right->left->left = newnode(7);
    root->left->right = newnode(-8);
    print_inorder(root);
    int min=-10, max = 13;
    rmv_outside_keys(&root,min,max);
    putchar('\n');
    print_inorder(root);
}

 maverick01 We can use the property of BST that left subtree of a node is always gonna carry keys < node->key and right subtree is always gonna carry keys >= node->key. So when we found the key falling outside the range, we can simply eliminate one of it’s subtrees entirely.  
strunct node * pruneBST(strunct node * root, lowerBound, UpperBound)
{

	if(root == NULL)
		return;
	
	if(root->key < lowerBound) 
	{
		deleteBST(root->left);
		root->left = NULL;
		delete root;	
		return pruneBST(root->right, lowerBound, upperBound); 
	}
	else if(root->key > upperBound)
	{
		deleteBST(root->right);
		root->right = NULL;
		delete root;
		return pruneBST(root->left, lowerBound, UpperBound); 
	}
	else
	{
		root->left = pruneBST(root->left, lowerBound, upperBound);
		root->right =  pruneBST(root->right, lowerBound, upperBound);
		return root;
	}
}

 arena_zp Correct. And the time is O(log N). Because we just do the same process as “searching a specified key in a BST”. Ramesh.Mxian I think still it is O(n) time complexity not O(log(n)) because if the requested rage is all elements between lowest and largest element then it will traverse all the nodes in the tree… Anish P  
/**
     * Responsible for deleting the values in the range[number1,number2]
     * It is assumed that number1 < number2
     * @param root 
     */
    private void deleteValuesInRange(Node node) {
	if (node != null) {
	    deleteValuesInRange(node.leftChild);
	    if ((node.data < this.minNumber) || (node.data > this.maxNumber)) {
		deleteNode(node.data);
	    }
	    deleteValuesInRange(node.rightChild);
	}
    }

/**
     * Responsible for deleting the specified node from the BST
     * @param value
     */
    private boolean deleteNode(int value) {
	boolean isDeleteSuccess = false;
	if (this.root == null) {
	    return isDeleteSuccess;
	}
	Node current = this.root;
	Node parent = null;
	boolean isLeftChid = false;
	while (current.data != value) {
	    parent = current;
	    if (value > current.data) {
		current = current.rightChild;
		isLeftChid = false;
	    } else {
		current = current.leftChild;
		isLeftChid = true;
	    }
	    if (current == null) {
		return isDeleteSuccess;
	    }
	}
	// Case 1 : When the node has no children
	if (current.leftChild == null && current.rightChild == null) {
	    if (current == this.root) {
		this.root = null;
	    } else if (isLeftChid) {
		parent.leftChild = null;
	    } else {
		parent.rightChild = null;
	    }
	    isDeleteSuccess = true;
	} else if (current.rightChild == null) { // Case 2 : (a)When the
						 // node has a single child
						 // associated with it
	    if (current == this.root) {
		this.root = current.leftChild;
	    } else if (isLeftChid) {
		parent.leftChild = current.leftChild;
	    } else {
		parent.rightChild = current.leftChild;
	    }
	    isDeleteSuccess = true;
	} else if (current.leftChild == null) {
	    if (current == this.root) {
		this.root = current.rightChild;
	    } else if (isLeftChid) {
		parent.leftChild = current.rightChild;
	    } else {
		parent.rightChild = current.rightChild;
	    }
	    isDeleteSuccess = true;
	} else { // Case 3: When the node has 2 children
		 // Find the successor
	    Node successor = getSuccessor(current);
	    if (current == successor) {
		this.root = successor;
	    } else if (isLeftChid) {
		parent.leftChild = successor;
	    } else {
		parent.rightChild = successor;
	    }
	    successor.leftChild = current.leftChild;
	    isDeleteSuccess = true;
	}
	return isDeleteSuccess;
    }

 Purushotham This can be achieved in O(logN) time complexity. Algo: 1.Locate the lower limit key say L in the Tree and do L.left = null. 1a.If L is not available, do the same for its inorder successor. 2. Similarly Locate the upper limit key say U in the Tree and do U.right=null. 2a.If U is not available, do the same for its inorder predecessor. 3. For L & U, find the closest common ancestor and make it as new root. This step is to handle the case with when both U & L are on same side of the old root. This algo takes 3LogN time complexity. Lemme know if there is any use case that breaks this algo.  
/* Paste your code here (You may delete these lines if not writing code) */
 arena_zp Your approach is apparently wrong. sreeram code is not coming properly ideone link http://ideone.com/zNvRX9 sreeram sry this link http://ideone.com/mklBXA sreeram You could have a much optimized version .Why to trim the trees when you know they are out of range.But nevertheless it visits each node atleast once   /* Paste your code here (You may delete these lines if not writing code) */ [/void deleterecur(node *root) { if(!root){ deleterecur(root->left); deleterecur(root->right); delete root;} } // Resmoves all nodes having value outside the given range and returns the root // of modified tree node* removeOutsideRange(node *root, int min, int max) { // Base Case if (root == NULL) return NULL; if(root->key >= min && root->key left = removeOutsideRange(root->left, min, max); root->right = removeOutsideRange(root->right, min, max);} if (root->key right; deleterecur(root); return rChild; } if (root->key > max) { node *lChild = root->left; deleterecur(root); return lChild; } return root; }] Guest we can do this better with preorder. a node x has to removes only in following 2 cases case 1: x.datamax then all nodes in x’s right subtree also greater than max. so both x and its right subtree should be deleted NOTE: we are doing preorder, but not visiting all nodes Node removeOutside(Node n, int min, int max){ if(n==null) return null; if(nmax) return removeOutside(n.left, min, max); else{ n.left = removeOutside(n.left, min, max); n.right = removeOutside(n.right, min, max); return n; } } Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
