Find a triplet that sum to a given value - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find a triplet that sum to a given value Given an array and a value, find if there is a triplet in array whose sum is equal to the given value. If there is such a triplet present in array, then print the triplet and return true. Else return false. For example, if the given array is {12, 3, 4, 1, 6, 9} and given sum is 24, then there is a triplet (12, 3 and 9) present in array whose sum is 24. Method 1 (Naive) A simple method is to generate all possible triplets and compare the sum of every triplet with the given value. The following code implements this simple method using three nested loops. 
# include <stdio.h>

// returns true if there is triplet with sum equal
// to 'sum' present in A[]. Also, prints the triplet
bool find3Numbers(int A[], int arr_size, int sum)
{
    int l, r;

    // Fix the first element as A[i]
    for (int i = 0; i < arr_size-2; i++)
    {
       // Fix the second element as A[j]
       for (int j = i+1; j < arr_size-1; j++)
       {
           // Now look for the third number
           for (int k = j+1; k < arr_size; k++)
           {
               if (A[i] + A[j] + A[k] == sum)
               {
                 printf("Triplet is %d, %d, %d", A[i], A[j], A[k]);
                 return true;
               }
           }
       }
    }

    // If we reach here, then no triplet was found
    return false;
}

/* Driver program to test above function */
int main()
{
    int A[] = {1, 4, 45, 6, 10, 8};
    int sum = 22;
    int arr_size = sizeof(A)/sizeof(A[0]);

    find3Numbers(A, arr_size, sum);

    getchar();
    return 0;
}
 Output: 
Triplet is 4, 10, 8
 Time Complexity: O(n^3) Method 2 (Use Sorting) Time complexity of the method 1 is O(n^3). The complexity can be reduced to O(n^2) by sorting the array first, and then using method 1 of this post in a loop. 1) Sort the input array. 2) Fix the first element as A[i] where i is from 0 to array size – 2. After fixing the first element of triplet, find the other two elements using method 1 of this post. 
# include <stdio.h>

// A utility function to sort an array using Quicksort
void quickSort(int *, int, int);

// returns true if there is triplet with sum equal
// to 'sum' present in A[]. Also, prints the triplet
bool find3Numbers(int A[], int arr_size, int sum)
{
    int l, r;

    /* Sort the elements */
    quickSort(A, 0, arr_size-1);

    /* Now fix the first element one by one and find the
       other two elements */
    for (int i = 0; i < arr_size - 2; i++)
    {

        // To find the other two elements, start two index variables
        // from two corners of the array and move them toward each
        // other
        l = i + 1; // index of the first element in the remaining elements
        r = arr_size-1; // index of the last element
        while (l < r)
        {
            if( A[i] + A[l] + A[r] == sum)
            {
                printf("Triplet is %d, %d, %d", A[i], A[l], A[r]);
                return true;
            }
            else if (A[i] + A[l] + A[r] < sum)
                l++;
            else // A[i] + A[l] + A[r] > sum
                r--;
        }
    }

    // If we reach here, then no triplet was found
    return false;
}

/* FOLLOWING 2 FUNCTIONS ARE ONLY FOR SORTING
    PURPOSE */
void exchange(int *a, int *b)
{
    int temp;
    temp = *a;
    *a   = *b;
    *b   = temp;
}

int partition(int A[], int si, int ei)
{
    int x = A[ei];
    int i = (si - 1);
    int j;

    for (j = si; j <= ei - 1; j++)
    {
        if(A[j] <= x)
        {
            i++;
            exchange(&A[i], &A[j]);
        }
    }
    exchange (&A[i + 1], &A[ei]);
    return (i + 1);
}

/* Implementation of Quick Sort
A[] --> Array to be sorted
si  --> Starting index
ei  --> Ending index
*/
void quickSort(int A[], int si, int ei)
{
    int pi;    /* Partitioning index */
    if(si < ei)
    {
        pi = partition(A, si, ei);
        quickSort(A, si, pi - 1);
        quickSort(A, pi + 1, ei);
    }
}

/* Driver program to test above function */
int main()
{
    int A[] = {1, 4, 45, 6, 10, 8};
    int sum = 22;
    int arr_size = sizeof(A)/sizeof(A[0]);

    find3Numbers(A, arr_size, sum);

    getchar();
    return 0;
}
 Output: 
Triplet is 4, 8, 10
 Time Complexity: O(n^2) Note that there can be more than one triplet with the given sum. We can easily modify the above methods to print all triplets. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Prateek Sharma Simple O(nlogn) solution.. import java.util.Arrays; public class TripletSumToAGivenValue { int arr[]= new int[]{2,3,5,3,5}; int value = 10; boolean flag = false; void tripletSumToValue(){ System.out.print(“Triplets are”); Arrays.sort(arr); int i = 0; int j = arr.length-1; int k = 1; while(k value) j–; else{ i++; k++; } } if( !flag) System.out.println(” not found for this value in array”); } public static void main(String args[]){ TripletSumToAGivenValue obj = new TripletSumToAGivenValue(); obj.tripletSumToValue(); } } chaks How about using this map technique for solving in O(n^2) ? #include #include void findTriplet(int arr[], int n, int sum) { std::map triplet; int flag = 0; for(int i = 0; i < n; i++) { for(int j = i+1; j < n; j++) { triplet[arr[j]] = false; } for(int j = i+1; j < n; j++) { if(triplet[sum-arr[i]-arr[j]] == true) { std::cout << "(" << arr[i] << "," << arr[j] << "," << sum-arr[i]-arr[j] << ")"; flag = 1; goto outer; } triplet[arr[j]] = true; } triplet[arr[i]] = true; } outer: if(flag == 0) { std::cout << "No triplet found !! "; } std::cout << std::endl; } int main() { int arr[] = {12, 3, 4, 1, 6, 9}; int size = sizeof(arr) / sizeof(int); int sum = 24; findTriplet(arr, size, sum); } Vivek recursive implementation int isTriplet(int *a, int n, int sum , int count) { if(sum==0) return 1; if(count ==3) return 0 else return isTriplet(a,n-1,sum-a[n],count+1) || isTriplet(a,n-1,sum,count); } Tushar In method 2 , Inner while loop can be replaced with a binary search as the array is sorted, which will reduce the search complexity to nLogn. In fact we can still do little correction , when we search the middle element , with left and right element already present, we can check weather the number to be found is within the range , if(! ( Sum – left – right ) > left && ( Sum – left – right ) < right)) break; Akhil  
#include<stdio.h>
#include<stdlib.h>
int compare(const void *a, const void *b)
{
    return (*(int*)a-*(int*)b);
}
int bSearch(int a[], int low, int high, int target)
{
    while(low<=high)
    {
        int mid = (low+high)/2;
        if(a[mid]==target)
            return mid;
        else if(a[mid]>target)
            high = mid-1;
        else
            low = mid+1;
    }
    return -1;
}
bool isTriplet(int a[], int size, int sum)
{
    /** Step:1 Sort the numbers **/
    qsort(a,size,sizeof(int),compare);
    /** Step:2 Fix higher and lower and,
        binary search on in-between elements to find 3rd element **/
    int low = 0;
    int high = size-1;
    while(low<high)
    {
        int third = sum - a[high] - a[low];
        if(third<0)
            high--;
        else
        {
            int index = bSearch(a,low+1,high-1,third);
            if(index != -1)
            {
                printf("The Triplet is %d %d %d\n",a[low],a[index],a[high]);
                return true;
            }
            else
                low++;
        }
    }
    return false;
}
int main()
{
    int a[] = {3,4,8,1,2,7,5};
    int size = sizeof(a)/sizeof(a[0]);
    if(isTriplet(a,size,20)== false)
        printf("No Triplet\n");
    return 0;
}

 Akhil My Bad! Doesn’t work for {1,2,3,4,5,6,7} find 6.  
/* Paste your code here (You may delete these lines if not writing code) */
 Akhil A simple Concise O(NLogN) Approach! #include<stdio.h> #include<stdlib.h> int compare(const void *a, const void *b) { return (*(int*)a-*(int*)b); } int bSearch(int a[], int low, int high, int target) { while(low<=high) { int mid = (low+high)/2; if(a[mid]==target) return mid; else if(a[mid]>target) high = mid-1; else low = mid+1; } return -1; } bool isTriplet(int a[], int size, int sum) { /** Step:1 Sort the numbers **/ qsort(a,size,sizeof(int),compare); /** Step:2 Fix higher and lower and, binary search on in-between elements to find 3rd element **/ int low = 0; int high = size-1; while(low<high) { int third = sum – a[high] – a[low]; if(third<0) high–; else { int index = bSearch(a,low+1,high-1,third); if(index != -1) { printf("The Triplet is %d %d %d\n",a[low],a[index],a[high]); return true; } else low++; } } return false; } int main() { int a[] = {3,4,8,1,2,7,5}; int size = sizeof(a)/sizeof(a[0]); if(isTriplet(a,size,20)== false) printf("No Triplet\n"); return 0; } jinzhi chen nice solution chirag i think u won’t be able to get the triplet when- a[]={4,5,6,8} & the sum of 3 is 15. venkatesh.bandaru  
public class Triplet {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
 int a[]={1,5,7,8,12,13};
 int size=6;
int i=0;
int j=i+1;
int k=size-1;
int s,sum=13;
   for(;;)
{

if( i<k && j< k)
{
s=a[i]+a[j]+a[k];

if(s==sum)
{
 System.out.println("i="+i+"j="+j+"k="+k);
break;
}
else{

if(s>sum)
k--;
else if(i+1==j)
j++;
else
i++;
    }
}
}
    }
}

 venkatesh.bandaru This is a O(n) algorithm, give me your comments if you find any bugs pritybhudolia Your solution will work only for sorted arrays. http://onseriousmass.com BIG BOOOBIES bandar venkatesh{ bool isSolutionCorrect(){ algo!=O(n); bugs=3+rand(n); printf(“you are an asshole”); return false; } } jinzhi chen yeah, but for small numbers, we can use radix sort to achieve O(n). pritybhudolia This wont work for {1,3,5,8,12} sum=21. Ravi Teja Vadrevu There is a simple solution for this on the same lines of finding a SUM by pair of numbers in a BST. Step 1. Store inorder traversal of a Tree into an arrayList; (sorted) Step 2. Now traverse through arrayList once to form a HashMap of sum to pairs. For ex { 1,2,3,4 } 1+2 = 3 – > {1,2}, 1+3 = 4 -> {1,3}, 1+4 , 2+3 = 5 -> {1,4}, {2,3} 2+4 =6 -> {2,4} 3+4 = 7 -> {3,4} Step 3. Now traverse through the array again and for each element try to find Sum – a[i] in the hash map. The resultant pair + i is our triplet Code : Class BinaryTripletSum{ private List arrayList = new ArrayList(); private TreeNode root; public BinaryTripletSum(root){ this.root = root; this.sum = sum; populateArray(); } private void populateArray(){ if(root == null){ return; } inOrderTraversal(root.getLeft(), sum); arrayList.add(root.getData()); inOrderTraversal(root.getRight(), sum); } public hasTripletSum(int sum){ Map<Integer, List> sumPairMap = new HashMap<Integer, List>(); for(int i =0; i< arrayList.size(); i++){ int a = arrayList.get(0); int sum = 0; for(int j = i + 1; j< arrayList.size(); j++){ int b = arrayList.get(j); sum = a + b; sumPairMap.put(sum, Lists.newArrayList(a,b)); } } for(int i = 0 ; i< arrayList.size(); i++){ int twoSum = sum – arrayList.get(i); if(sumPairMap.contains(twoSum)){ return true; } } return false; } } } /* Paste your code here (You may delete these lines if not writing code) */ coderAce Is O(n^2) the lower bound for this problem. Can anybody confirm on this? Nice solution though nikhil its upper bound.. fix 1st element.. then inner loop will run for n-1 time fix 2nd element.. then inner loop will run for n-2 times … finally = n-1 + n-2 +…. + 1 = n62  
/* Paste your code here (You may delete these lines if not writing code) */
 Amit  
/* Paste your code here (You may delete these lines if not writing code) */
#include <stdio.h>
int compare(const void *a, const void *b){
    return *(int *)a - *(int *)b;
} 
int getTriptel(int ar[], int ar_size,int n)
{
     qsort(ar,ar_size,sizeof(ar[0]),compare);
     int temp[ar_size],i=0,k=ar_size-1,p=0,flag = 0;
     for(i = 0;i<ar_size;i++){
           temp[i] = n - ar[i];
     }
     i = 0;
     while((i<ar_size && k>=0)&& p<ar_size &&(i<=k) ){
           if(ar[i]+ar[k] == temp[p] ){
                        if( i != k && i != p && p != k){
                        printf("Equal %d %d %d \n",ar[i],ar[k],ar[p]);
                        printf("\n");
                        }
                        i++;
                        k--;
           } 
           if(ar[i]+ar[k] <temp[p] ){
                        i++;
           }
           else if(ar[i]+ar[k] >temp[p] ){
                        k--;
           }
           if(i == ar_size - 1 || k ==0){
                p++;
                i = p;
                k= ar_size -1; 
           }          
     }
}
 
/* Diver function to test above function */
int main()
{
     //int ar[] = {2, 1,3,8,7,0,9,5};
     int ar[] ={1, 4, 45, 6, 10, 8};
     int n = sizeof(ar)/sizeof(ar[0]);
     int count = 0,i,k=0;
     int sum = 22;
     for(i = 0;i<n;i++){
           if(ar[i]<=sum){
                       count ++;
           } 
     }
     int temp[count];
     for(i = 0;i<n;i++){
           if(ar[i]<=sum){
                       temp[k] = ar[i];
                       k++;
           } 
     }     
     n = sizeof(temp)/sizeof(temp[0]);
     getTriptel(temp, n,sum);
     getch();
     return 0;
}
 joker  
bool solve(vector<int> a,int k)
{
   for(int i=0;i<a.size()-3;i++)
   for(int j=a.size()-1;j>i;j--)
   if(binary_search(a.begin()+i,a.begin()+j,k-(a[i]+a[j])))
   return true;
   return false;        
}
main()
{
    int n;
    int b[]={1, 4, 45, 6, 10, 8};
    vector<int> a(b,b+sizeof(b)/sizeof(int));
    sort(a.begin(),a.end());
    int k=22;
    puts(solve(a,k)?"yes":"no");
    system("pause");
    return 0;
}
 sid second method is very good and to print all the triplets the only need to change is type if( A[i] + A[l] + A[r] == sum) { printf(“Triplet is %d, %d, %d”, A[i],A[l],A[r]); l++; r–; } instead of if( A[i] + A[l] + A[r] == sum) { printf(“Triplet is %d, %d, %d”, A[i],A[l],A[r]); return true; } http://mitcsess10.comeze.com arvind I think u should add a constraint at this point in method2,   
 if( A[i] + A[l] + A[r] == sum && i!=l && i!=r && l!=r)     <---
            {
                printf("Triplet is %d, %d, %d", A[i], A[l], A[r]);
                return true;
            }

 wat say? Ravi #include void merge(int x[],int n) { int aux[n],i=0,j=0,k=0,l1=0,l2=0,u1=0,u2=0; int size=1; while(size<n) { l1=0,k=0; while(l1+size<n) { l2=l1+size; u1=l2-1; u2=(l2+size-1<n)?l2+size-1:n-1; for(i=l1,j=l2;i<=u1&&j<=u2;k++) { if(x[i]<=x[j]) aux[k]=x[i++]; else aux[k]=x[j++]; } for(;i<=u1;i++) aux[k++]=x[i]; for(;j<=u2;j++) aux[k++]=x[j]; l1=u2+1; } for(i=l1;k<n;i++) aux[k++]=x[i]; size=size*2; for(i=0;i<n;i++) x[i]=aux[i]; } } void sum(int x[],int n,int k1) { int i=0,j=0,k=0,temp=0,t1=0; merge(x,n); for(i=0;i<n;i++) { temp=x[i]; for(k=i+1,j=n-1;k<j;) { t1=k1-temp; if(x[k]+x[j]t1) j=j-1; else { printf(“the sum of three element %d %d %d\n”,x[i],x[k],x[j]); j=j-1; } } } } int main() { int x[]={1, 4, 45, 6, 10, 8}; sum(x,6,22); return 0; } Ravi  
#include<stdio.h>
void merge(int x[],int n)
{
    int aux[n],i=0,j=0,k=0,l1=0,l2=0,u1=0,u2=0;
    int size=1;
    while(size<n)
    {
        l1=0,k=0;
        while(l1+size<n)
        {
            l2=l1+size;
            u1=l2-1;
            u2=(l2+size-1<n)?l2+size-1:n-1;
            for(i=l1,j=l2;i<=u1&&j<=u2;k++)
            {
                if(x[i]<=x[j])
                    aux[k]=x[i++];
                else
                    aux[k]=x[j++];
            }
            for(;i<=u1;i++)
                aux[k++]=x[i];
            for(;j<=u2;j++)
                aux[k++]=x[j];
            l1=u2+1;
        }
        for(i=l1;k<n;i++)
            aux[k++]=x[i];
        size=size*2;
        for(i=0;i<n;i++)
            x[i]=aux[i];
    }
}
void sum(int x[],int n,int k1)
{
    int i=0,j=0,k=0,temp=0,t1=0;
    merge(x,n);
    for(i=0;i<n;i++)
    {
        temp=x[i];
        for(k=i+1,j=n-1;k<j;)
        {
            t1=k1-temp;
            if(x[k]+x[j]<t1)
                k=k+1;
            else if(x[k]+x[j]>t1)
                 j=j-1;
            else
            {
                printf("the sum of three element %d %d %d\n",x[i],x[k],x[j]);
                j=j-1;
            }
        }
    }

}
int main()
{
    int x[]={1, 4, 45, 6, 10, 8};
    sum(x,6,22);
    return 0;
}

 luv Here’s an method for finding the triplets. It uses Backtracking.  

#include<stdio.h>

int S=3;		//SUM for which elements are to be found

int sumcheck(int el[],int si,int ei,int arr[],int cnt)
{


	if(cnt==2)
	{
	int sum=arr[0]+arr[1]+arr[2];
	
	if(sum==S)
	printf("(%d, %d, %d) ",arr[0],arr[1],arr[2]);

	return;
	
	}
	
	if(si>ei || cnt>2)
	return;

	int i=si;

					//take this element	
	arr[++cnt]=el[i];
	sumcheck(el,si+1,ei,arr,cnt);
	arr[cnt]=0;				//don't take this element
	cnt--;
	sumcheck(el,si+1,ei,arr,cnt);





}




int main()
{
int arr[3]={0,0,0};
int cnt=-1;
int el[]={-1, 0, 1, 2, -1,-4};	
int size=sizeof(el)/sizeof(el[0]);

sumcheck(el,0,size-1,arr,cnt);


return 0;

}




 Sravan Vurapalli How about constructing BST with array. Then recussively calculate the combination at root level . I am not sure if this works , let me try and come back to you.  
/* Paste your code here (You may delete these lines if not writing code) */
 udp A O(n^2Logn) solution 1) Sort A[] 2) Generate all pairs of two elements from A[]. Do following for every pair. ……a) Calculate sum of the current pair. ……b) Binary Search for sum minus sum of current pair. If the difference is found in array, then return true. 3) Return false. Yogesh counter example:- array have distinct elements and you are looking for sum=12, a pair you have choosen (6,3) now remaining sum left is 3 and you are searching 3 in the array which is present but you have already included it, it will give true. and why are implemeting O(n^2Logn)approach if O(n^2) solution has already given above.  
/* Paste your code here (You may delete these lines if not writing code) */
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
