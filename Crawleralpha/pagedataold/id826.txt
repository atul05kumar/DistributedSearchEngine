Find duplicates in O(n) time and O(1) extra space - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find duplicates in O(n) time and O(1) extra space Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and using only constant memory space. For example, let n be 7 and array be {1, 2, 3, 1, 3, 6, 6}, the answer should be 1, 3 and 6. This problem is an extended version of following problem. Find the two repeating elements in a given array Method 1 and Method 2 of the above link are not applicable as the question says O(n) time complexity and O(1) constant space. Also, Method 3 and Method 4 cannot be applied here because there can be more than 2 repeating elements in this problem. Method 5 can be extended to work for this problem. Below is the solution that is similar to the Method 5. Algorithm: traverse the list for i= 0 to n-1 elements
{
  check for sign of A[abs(A[i])] ;
  if positive then
     make it negative by   A[abs(A[i])]=-A[abs(A[i])];
  else  // i.e., A[abs(A[i])] is negative
     this   element (ith element of list) is a repetition
} Implementation: 
#include <stdio.h>
#include <stdlib.h>

void printRepeating(int arr[], int size)
{
  int i;
  printf("The repeating elements are: \n");
  for (i = 0; i < size; i++)
  {
    if (arr[abs(arr[i])] >= 0)
      arr[abs(arr[i])] = -arr[abs(arr[i])];
    else
      printf(" %d ", abs(arr[i]));
  }
}

int main()
{
  int arr[] = {1, 2, 3, 1, 3, 6, 6};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}
 Note: The above program doesn’t handle 0 case (If 0 is present in array). The program can be easily modified to handle that also. It is not handled to keep the code simple. Output: The repeating elements are: 1 3 6 Time Complexity: O(n) Auxiliary Space: O(1) Please write comments if you find the above codes/algorithms incorrect, or find better ways to solve the same problem.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Rocky Here is a bug. If all elements are 0, it doesn’t work. So the range should be 1-n. I agree with Vivek, but pay more attention to very large array with overflow problem. gaja 4,2,3,3,3,3,1,4,5,6,1,2,5. Hello guys the above code doesn’t work for this series. o/p : 3 3 3 4 1 2 5 3 is repeating in the output. anonymous @geeksforgeeks:disqus Please help solve this issue. What about elements that repeat more than once, as mentioned in this example? Abdulkhadar //find repeated elements from single dimentional array class searchDemo{ public static void main(String args[]){ int a[]={2,0,3,2,2,9,1,2,1,1,3,10,99,3,2,9,9,0,2,1,2,9,9,1,3,9,1,2}; boolean rep=false,si=false; int c=1; for(int i=0;i<a.length;i++){ rep=false; c=1; for(int k=0;k<i;k++){ if(a[i]==a[k]){ rep=true; } } for(int j=i+1;j<a.length;j++){ si=false; if(!rep){ if(a[i]==a[j]){ c++; }else{ si=true; } } } if(c!=1 || si){ System.out.println(a[i]+" is repeated "+c+" times"); } } } } Mukesh This solution will not work If element value is greater than array length. example, just add a element having value 20. Vivek for i=0 to n-1 arr[arr[i]] + = n; for i=0 to n-1 if(arr[i]>=2n) // means i is repeated print i; jedi if 1 is repeating more than once, this program gives output 1,1,3,6 instead of 1,3,6….please clarify… wasseypuriyan Any number which repeats more than once will be printed using this code. for (i = 0; i = 0) arr[abs(arr[i])] = -arr[abs(arr[i])]; else ” printf(” %d “, abs(arr[i])); ” //This statement is executed when //number is repeated } ChennaiWarrior This may be a solution. Please correct me if i am wrong. #include using namespace std; #include int main() { int n; cout<>n; int a[n]; for(int i=0;i>a[i]; cout<<"The repeated elements are: ; for(int i=0;i0 && a[abs(a[i])]n); /// do nothing already printed else { cout<<" "<<abs(a[i]); a[abs(a[i])]=n+5; } } } return 0; } prakash –>this program wont work if total array size is les than the maximum value element in array –>only works with positive number set Nagaraju They clearly mentioned in problem statement that numbers are from 0–n-1 so max value never exceeds array size. Numbers are from 0 to n-1 so negative numbers does not come in this space draganwarrior Can anyone explain how this method will work always http://readerszone.com ajaypathak This does not work if the element occurs more then twice input : 1, 2, 3, 1, 3, 6, 6,1 it will show 1,3,6,1 Sanjay Agarwal @geeksforgeeks:disqus Please tell us how to handle such scenarios. Guest i hope this solves your problem plus it contains zero case too correct me if I m wrong … void print_repeat(int a[],int size) { int count=0; FOR(i,size,0) { if(!a[i]) { if(count==1) { cout<<a[i]<=0) a[abs(a[i])]*=-1; else { if(a[abs(a[i])]!=-9999) { cout<<abs(a[i])<<" "; a[abs(a[i])]=-9999; } } } } Suryabhan Singh void print_repeat(int a[],int size) { int count=0; for(int i=0;i<size;i++) { if(!a[i]) { if(count==1) { cout<<a[i]<=0) a[abs(a[i])]*=-1; else { if(a[abs(a[i])]!=-9999) { cout<<abs(a[i])<<" "; a[abs(a[i])]=-9999; } } } } Suryabhan Singh I hopes it solves your problem , it involves the cases where zero is the element if you find difficulty to read the code , plz go to following pastebin link- http://pastebin.com/HFucjSQH and correct me if logic is wrong TPSA Please try with different data set. Eg. {1, 2, 1000, 1000, 3, 6, 6} GeeksforGeeks Please take a closer look at the problem statement. It says “Given an array of n elements which contains elements from 0 to n-1″ TPSA Please try with different data set. Eg. {1, 2, 1000, 1000, 3, 6, 6} http://www.geeksforgeeks.org/find-duplicates-in-on-time-and-constant-extra-space/ kc we can just add n in array at index=a[i]. means just add n as a[a[i]]+=n. than in second scan u will have the count equl to how much time n is added. correct me if I am wrong. Sanjay Agarwal But this approach won’t satisfy the requirement of O(1) space complexity. Ranjan following code finds the repeating numbers in an array of positive numbers. It prints only once if a number is repeated multiple times.  
#include <stdio.h>
#include <stdlib.h>
  
void printRepeating(int arr[], int size)
{
  int temp = 0;
  int t =0;
  printf("The repeating elements are: \n");
  for (int i = 0; i < size; i++)
  {
      if(temp & (1 << arr[i]))
      {
              if(t &(1<<arr[i]))
              {
                   printf("%d \t", arr[i]);
                   t = t^(1<<arr[i]);
              }
      }
     
      else
      {
          temp = (temp|(1<<arr[i]));
          t = (t | (1<<arr[i]));
      }
  }
}
  
int main()
{
  int arr[] = {1111161, 2, 18, 0, 0, 0, 2, 1111161, 3, 3, 3};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}

 Piyush Agarwal The method i am using Take only O(n) time and O(1) extra space #include using namespace std; int main() { int n,k,i; cin>>n; // n is limit of elements i.e range is from 0 to n-1 cin>>k; /* k is the size of array having elements ranging from 0 to n-1*/ int a[k+1]; for(i=0;i>a[i]; } for(i=0;i<k;i++) { a[a[i]%n]+=n; } for(i=0;i<k;i++) { //cout<<"value "<< a[i]<=2) cout<<i<<" "; } return 0; } Sanjay Agarwal Take arr[] = {0, 1, 32, 33, 0}; output should be 1, 32, 33 But your program’s output is 32, 33 http://myvedham.blogspot.in/ Karthic Check the below link for java implementation : http://myvedham.blogspot.in/2013/03/print-duplicate-numbers-in-array-java.html?view=sidebar  
/* Paste your code here (You may delete these lines if not writing code) */
 Umar fails for  
 int [] arr = {1, 2, 18, 0, 1, 3, 3 };
 Umar My bad.. didn’t read the following: “Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times” Sabaru This code will the expected result:  
public class FindDuplicates {
 
    public static void main(String[] args) {
        int arr[] = {1, 4 , 7 , 1 , 0, 1, 7 , 4 };
        findDuplicates(arr);
    }
 
    private static void findDuplicates(int[] arr) {
            HashSet<Integer> S1=new HashSet<Integer> ();
            HashSet<Integer> dup=new HashSet<Integer> ();
            for (int temp : arr ){
                if(S1.contains(temp)){
                    dup.add(temp) ;
                } else {
                    S1.add(temp) ;
                }
            }
            System.out.println("Duplicates:"+ dup ) ;
    }
} Sanjay Agarwal @d5e1ff9f81c8e0d297ee9e31c4fca962:disqus Input should be in the range 1 to n-1 where n is the size of the array. Your array size is 7. But your array contains 18 which violates the constraint on the input. Also, the case when array contains zero is not handled here.Please check. Ganesh You can find java code here: /** * Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times. * Find these repeating numbers in O(n) and using only constant memory space. * For example, let n be 7 and array be {1, 2, 3, 1, 3, 6, 6}, the answer should be 1, 3 and 6. * * @author GAPIITD * */ public class FindDuplicates { public static void main(String[] args) { int arr[] = {1, 2, 3, 1, 3, 6, 6}; findDuplicates(arr); } private static void findDuplicates(int[] arr) { for (int i = 0; i < arr.length; i++) { int value = Math.abs(arr[i]); if (arr[value] < 0) System.out.println("Duplicate: " + value); else arr[value] = -arr[value]; } } } NNAVNEET Given correct answer for the cases where zeros are involved. it would rather work for number from 1 to n. Not 0 to n-1.  
/* Paste your code here (You may delete these lines if not writing code) */
 Niks How about this solution?  
#include <stdio.h>
#include <stdlib.h>
 
void printRepeating(int arr[], int size)
{
  int temp = 0;
  printf("The repeating elements are: \n");
  for (int i = 0; i < size; i++)
  {
	  if(temp & (1 << arr[i]))
		  printf("%d \n", arr[i]);
    
	  else
		  temp = (temp|(1<<arr[i]));
  }
}
 
int main()
{
  int arr[] = {0,0,1, 2, 3, 1, 3, 6, 6};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}
 AlgoBaba What if your array is of size 100 or so. Your temp variable can store only up to 32 bits (being integer). So all a[i] with values greater than 32 will be simply neglected by your code’s this part  
 if(temp & (1 << arr[i]))
 Or even if you say it works for a specific compiler, it is definitely not safe. aikinz I think this is actually a great answer (as a normal case). But can someone explain how it works please? I just don’t quite get the ‘&’ and ‘|’ part. How these are represented in decimal calculation? Thanks! Sanjay Agarwal Take arr[] = {0,1,32,33,0} Nathan what if the duplicate element repeats 3 times or more? the result will be printed more than one time,right?  
/* Paste your code here (You may delete these lines if not writing code) */
 Vratika This will handle repeated printing.  
#include <stdio.h>
#include <stdlib.h>
 
void printRepeating(int arr[], int size)
{
  int i;
  printf("The repeating elements are: \n");
  for (i = 0; i < size; i++)
  {
    if (arr[abs(arr[i])]>=size) {
    	//Do nothing, Repeated element already printed
    }	
    else if (arr[abs(arr[i])] >= 0) 
      arr[abs(arr[i])] = -arr[abs(arr[i])];
    else {
      printf(" %d ", abs(arr[i]));
      arr[abs(arr[i])] = size-arr[abs(arr[i])] ;	//already printed value (say x) will become n-(-x) = n+x 
    }
  }
}
 
int main()
{
  int arr[] = {1, 2, 3, 1, 3, 6, 6, 6, 6, 6};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}
 http://nothing.wern ghatiya thanks Algobaba @Vratika your code don’t work for below case 6,6,6,3,0,2,2 //it prints only 6 and not 2 Vratika Thanx for pointing out my mistake Below is the correction. Note: The above program doesn’t handle 0 case (If 0 is present in array). The program can be easily modified to handle that also. It is not handled to keep the code simple.  
#include <stdio.h>
#include <stdlib.h>
 
void printRepeating(int arr[], int size)
{
  int i, x;
  printf("The repeating elements are: \n");
  for (i = 0; i < size; i++)
  {
    if (arr[i]>size)
    	x = arr[i]-size ;
    else 
    	x = arr[i] ; 
    if (arr[abs(x)]>=size) {
    	//Do nothing, Repeated element already printed
    }	
    else if (arr[abs(x)] >= 0) 
      arr[abs(x)] = -arr[abs(x)];
    else {
      printf(" %d ", abs(x));
      arr[abs(x)] = size-arr[abs(x)] ;	//alredy printed value (say x) will become n-(-x) = n+x 
    }
  }
}
 
int main()
{
  int arr[] = {6,6,6,3,0,2,2};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}
 Nikhil Agrawal Java Version for avoiding repeated printing when any element is repeated more than 2 times  
 public static void duplicates(int input[])
    {        
        
        if(input.length==0) 
            return ;
        
        int i;
        System.out.println("\nDuplicate elements:");
       for(i=0;i<input.length;i++)
       {
         //  v=input[Math.abs(input[i])];
                     
          if(Math.abs(input[i])<input.length) 
          {
           if(input[Math.abs(input[i])]<=0)
           {
               System.out.println(Math.abs(input[i]));
               input[Math.abs(input[i])]=input.length;
           }
           else if(Math.abs(input[i])<input.length && input[Math.abs(input[i])]==input.length)
               continue;
           else
           input[Math.abs(input[i])]=-input[Math.abs(input[i])];
          }
          else
              continue;
       }
        
    }
    
 Sidhant Panda A better algorithm would be keep on XORing subsequent elements in the array. If the result comes out to be zero, then the element is repeated. So print it. And XOR it with the element again to get a non zero XOR. Berkay It does not work. XOR will only be zero when all elements in the sequence repeated even number of times. anonymous yes it will work,when the an element is encountered for the second time it will get printed see this http://www.geeksforgeeks.org/find-duplicates-in-on-time-and-constant-extra-space/#comment-8146 vishal ritolia check the output for this case “arr[] = {1, 2, 5, 1, 5, 0, 6};” it will not print “5” as the repeating element…  
/* Paste your code here (You may delete these lines if not writing code) */
 Rishabh Yes it didnot work !!!1any explaination?  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks Thanks for pointing this out. The code doesn’t handle the case with 0 in the array. We have added a note for this. We will update the post with code to handle 0 case also. rakitic what change to be done in algorithm to handle zeroes too…?? Ajit Verma I have an array be {1, 2, 3, 1, 3, 3,0, 6}.The answer should be more duplicate element in array .eg.- {3,3,3} nv_vivek the above mentioned logic wont work if the array has 0 in its first index and the array has more than one ‘0’ elements in it . eg – arr[]={0, 2, 3, 1, 3, 0, 5}; kamal It’s a known issue and mentioned in the post. cracker But this method alters the original array.. how to fix this and avoid altering the original array ?? abhishek Hi, I did not this algo to find the duplicate number. How can abs check helpful for find the duplicate number into n array. For Ex: n=5 {1,2,3,3,5} Can we find the duplicate number into above case kartik @abhishek: Take a closer look at the problem statement. The array given by you is not a valid input array. Since n = 5, the elements of array can be from 0 to 4. http://n/p abhishek I sincerely apologize but really I could not understand above algo. can you explain little bit more above algorithm http://n/p abhishek @adding small thing. I face same interview question in which he asked me to find out duplicate number from 1 to n. ex n=5 {1,2,3,3,5} How can we find the duplicate number in this case kartik The basic idea is to use the fact that numbers are in range from 0 to n-1. Possible indexes in the array are also from 0 to n-1. We traverse through the input array and for every element, we use it as index and mark it as visited by making the array value negative at this index. For handling you case, you can modify the code to following  
#include <stdio.h>
#include <stdlib.h>

void printRepeating(int arr[], int size)
{
  int i;
  printf("The repeating elements are: \n");
  for(i = 0; i < size; i++)
  {
    if(arr[abs(arr[i])-1] >= 0)
      arr[abs(arr[i])-1] = -arr[abs(arr[i])-1];
    else
      printf(" %d ", abs(arr[i]));
  }
}

int main()
{
  int arr[] = {1, 2, 3, 3, 5};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}

 http://avidullu.wordpress.com Avi Don’t you think that by modifying the input array you are *actually* using O(n) space? In general, the signature of such a function would be void GetDups(const vector& arr, vector* output); and no O(n) memory usage in the function? sudohack Space Complexity = O(2) // constant time complexity =O(1) use two variable to store the result of XOR value of array. logic : traverse the array for 1 to n and store the their xor in flag1 and flag 2. if flag1 ==0 , which tells about repetition ,print a[i].and revert back it by using flag2.// flag1=flag2  
flag1=flag2=0
for(i=1;i<=n;i++)
flag1^=a[i];
if(flag1==0) // which tells about repetition 
   { print a[i];
    flag1=flag2;// set back flag1=flag2 ,to revert flag1 back to its previous state

    } else
   flag2=flag1;




 agrawal25  
#include<stdio.h>
#include<stdlib.h>
void printRepeating(int arr[], int size)
{
  int i,index=0;
  printf("The repeating elements are: \n");
  for(i = 0; i < size; i++)
  {
 index=abs(arr[i])%size;
    if(arr[index] == 0)
       arr[index]=-size;
    else if(arr[index]>0 && arr[index]<size){
      arr[index]+=size;
      arr[index] = -arr[index];}
    else if(arr[index]<0)
      {
      printf("%d     %d\n", abs(arr[i]%size), abs(arr[index])/size+1);
      arr[index]=-arr[index];
      arr[index]+=size;
      arr[index]=-arr[index];
   
     }
  }
  //restore previous array/
  for(i=0;i<size;i++)
  arr[i]=abs(arr[i])%size;
}
 
int main()
{
  int arr[] = {1, 1,1,1,1,1,2,2,3,0,0,0};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}

 Mady I like your solution. Good work. Venkatesh This code may not work and overruns array if the is n = 4 and input is 6 4 3 2. arr[abs(arr[i])] = arr[6] // array overrun for(i = 0; i = 0) arr[abs(arr[i])] = -arr[abs(arr[i])]; else printf(” %d “, abs(arr[i])); } kartik @Venkatesh: The input given by you is not a valid input. Take a closer look at the problem statement. It clearly says: “array of n elements must contain elements from 0 to n-1″  
/* Paste your code here (You may delete these lines if not writing code) */
 Venkatesh My bad. Thanks kartik for the clarification. kamlesh meghwal It says no. can be repeated any no. of times . But program given above on input of {4,4,4} gives output {4,4}.Should not it give just 4???? kartik 4 is repeated two times, that is why u get 4 two times. Manna void findDuplicate(int *arr, int size) { int i , zeroCount = 0 , index ; for ( i = 0 ; i 0 && arr[index] < size ) arr[index] = – arr[index] ; else { if ( arr[index] 1 ) printf ( ” 0″) ; } Lavanya Hi I’ve a code here which displays both the repeated elements and their number of occurrences and replaces the array at last. main() { int a[30],n,j,index; scanf(“%d”,&n); for(int i=0;i<n;i++) scanf("%d",&a[i]); for(int i=0;i<n;i++) { index=a[i]%n; a[index]+=n; } for(int i=0;in && (a[index]/n)>1 ) { printf(“\n%d repeated %d times:”,index,a[index]/n); a[index]%=n; } } getch(); } Correct me if i’m wrong. Keshav_singla correct  
/* Paste your code here (You may delete these lines if not writing code) */
 anonymous remove this check (a[index]/n)>1 and put it inside the loop otherwise loop may get break in between 0 to n if the check results false for(int i=0;i1 ) Gaurav Hi, What if i also want the number of occurrences of the duplicates in the same o(n) time and o(1) space.is there a way to do this by modifying the array? Gaurav Gaurav Hi Sandeep, I came across similar question in an interview.The question is how can also find the number of times the duplicates are repeated in the same O(n)time and O(1) space?How to modify the exisiting array in that case. Gaurav amitp49 To find out how many times repeated occurance, -> add size of array to element rather than just making it negative while scanning.. care should be taken while reading this modified element using modulo by size -> second scan to get the count and divide by size each element http://sachinguptacse.blogspot.com/ sachin gupta MNNIT  
/* the above solution print for arr[]={1,1,1,2,2,2}
  output 1 ,1,2,2;
i am giving a solution which will print repeated element once and handle case of 0 
 <hapysachin91@gmail.com>
  */
#include<stdio.h>
#include<stdlib.h>
void printRepeating(int arr[], int size)
{
  int i,index=0;
  printf("The repeating elements are: \n");
  for(i = 0; i < size; i++)
  { 
 index=abs(arr[i])%size;
    if(arr[index] == 0)
       arr[index]=-size;
    else if(arr[index]>0 && arr[index]<size)
      arr[index] = -arr[index];
    else if(arr[index]<0)
      {
      printf(" %d ", abs(arr[i]));
      arr[index]=-arr[index];
      arr[index]+=size;
     }
  }
  //restore previous array
  for(i=0;i<size;i++)
  arr[i]=abs(arr[i])%size;
}
 
int main()
{
  int arr[] = {1, 1,1,1,1,1,2,2,3,0,0,0};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
}
 Arvind Mohan What if there is only repeating number which is greater than size of array. suppose {6,6,6,6,6} and also with less number of 6’s. Fanendra Nath Tripathi In this case this approach will fail nikhil the question says number must be less than or equal to the size of array…in ur case size is 5 and 6>5 agrawal25 #include #include void printRepeating(int arr[], int size) { int i,index=0; printf(“The repeating elements are: \n”); for(i = 0; i < size; i++) { index=abs(arr[i])%size; if(arr[index] == 0) arr[index]=-size; else if(arr[index]>0 && arr[index] arr[index]+=size; arr[index] = -arr[index];} else if(arr[index]<0) { printf(“%d %d\n”, abs(arr[i]%size), abs(arr[index])/size+1); arr[index]=-arr[index]; arr[index]+=size; arr[index]=-arr[index]; } } //restore previous array/ for(i=0;i arr[i]=abs(arr[i])%size; } int main() { int arr[] = {1, 1,1,1,1,1,2,2,3,0,0,0}; int arr_size = sizeof(arr)/sizeof(arr[0]); printRepeating(arr, arr_size); getchar(); return 0; } Mohit we can use inplace counting sort here ? R.Srinivasan The important advantage of this algo is that the “array is restored back to its original” although it is modified. It also places the elements where it belongs i.e initial sublist is sorted. Run Time Complexity: 0(n) Space Somplexity: 0(1)  
//The important advantage of this algo is that the "array is restored back to its original" although it is modified.
 
//It also places the elements where it belongs i.e initial sublist is sorted.
 
//It also handles 0 case
 
#include <stdio.h>
 
void swap(int *p,int *q)
{
     int temp;
     temp=*p;
     *p=*q;
     *q=temp;
}   
 
void printRepeating(int arr[], int size)
{
   int i,j;
 
   for(i=0;i<size;i++)
       while(arr[i]!=i)
          if(arr[i]!=arr[arr[i]])
               swap(&arr[i],&arr[arr[i]]);
          else
                break;
    //Initial sublist is sorted
    for(i=0;i<size-1&&arr[i]<arr[i+1];i++,j=i) ;
 
    if(i==size-1)
    {
        printf("There are no repeating elements\n");
        return;
    }
    else
        printf("The repeating elements are: ");              
 
    //Printing duplicates
    for(i=i+1;i<size;i++)
    {
       if(arr[i]!=i && arr[arr[i]]>=0 && arr[i]==arr[arr[i]])
       {
          printf("%d ",arr[i]);
          arr[arr[i]]=-1;
       }
    }
    //Restoring to oirginal
    for(i=0;i<=j;i++)
       if(arr[i] == -1) arr[i]=i;
}                                       
 
void printArray(int a[],int size)
{
     int i;
     for(i=0;i<size;i++)
        printf("%d ",a[i]);
     printf("\n");
}        
 
int main()
{
    int arr[] = {1, 2, 3, 1, 3, 0, 6};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
    printRepeating(arr, arr_size);
    printf("\nIt also places the elements where it belongs i.e initial sublist is sorted\n");
    printArray(arr,arr_size);
 
    getchar();
    return 0;
}                           
 Ratnakar Sandeep if the array is like [255,284,289,256,284,289] i hope this logic will not work Sandeep @Ratnakar: Please take a closer look at the question statement. The array [255,284,289,256,284,289] is not a valid input. kk What if the array has an element like 2020, then we will store something like arr[2020] = -2020 , what happens to the memory allocation?? Lakshmi This input will give an undesirable output. input:1 2 2 5 3 5 5 the output must be: 2 5 but the obtained output is:2 5 5 In the problem statement it has been specified any number of times. But this output is not the desirable one. Sandeep Yes, the program prints 5 twice because 5 is repeated 2 times. gunjan i am getting wrong result for this input {1,2,3,4,0,1,1,3} Sandeep @gunjan: Thanks for pointing this out. There was a typo in program that caused this issue. It should work fine now. samujjal Ohh Sorry, By Bad. Thanks samujjal How will it work for negative numbers in the array and sparse numbers like 10, -4, 4, 5, 900, 21, -2123 Sandeep Please take a closer look at the problem statement. It says “Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times” nutcracker How would case of zero be handled, imagine that the array is {0,0} ? nutcracker in case the element is zero, we can change it to n and then the code would look like  
int _tmain(int argc, _TCHAR* argv[])
{ /*This program can't handle the case for 0  as 0 can't be made negative*/

	int a[]={1,2,1,0,3,4,5,0};
	int numOfEle=8;
	for (int i=0;i0) && (a[abs(a[i])] < numOfEle)) /*the lement is not marked negative and hence is not duplicate*/
			a[abs(a[i])]= -a[abs(a[i])];
		else if (a[abs(a[i])] == 0) a[abs(a[i])]= numOfEle;
		else
		{
			/* Since it is negative, it is reoccuring*/
			printf("\n    %d is a duplicate element", abs(a[i]));
		}
	}
	return 0;
}
 kartik @nutcracker: following is a simpler modification.  #include <stdio.h>
#include <stdlib.h>
 
void printRepeating(int arr[], int size)
{
  int i;
  printf("The repeating elements are: \n");
  for(i = 0; i < size; i++)
  {
    if(arr[abs(arr[i])] >= 0)
    {
      if(arr[i] == 0)                  
        arr[0] = -size; //put some negative value, could be anything negative
      else  
        arr[abs(arr[i])] = -arr[abs(arr[i])];
    }  
    else
      printf(" %d ", abs(arr[i]));
  }
}
 
int main()
{
  int arr[] = {0, 0};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printRepeating(arr, arr_size);
  getchar();
  return 0;
} Anil @Kartik: For an input : {1,0,1}, this algorithm goes wrong. Please Correct me if I am wrong. Best. Sreeram In order to address the issue of 0 appearing as an input, what if we go ahead and add 1 to all elements of the list. Then, we can follow the above method, but adjusting it to the fact that we have added a 1. Thus:  
#include<stdio.h>  
void printRepeating(int arr[], int size) 
{
   int i;
   for(i = 0; i < size; i++)
   {
	arr[i]++;
   }

   printf("The repeating elements are: \n");

   for(i = 0; i  0)
       arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1];
     else
      printf(" %d ", abs(arr[i])-1);
   }
 }

int main()
{
   int arr[] = {1, 2, 3, 1, 3, 0, 6};
   int arr_size = sizeof(arr)/sizeof(arr[0]);
   printRepeating(arr, arr_size);
   getchar();
   return 0;
}
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
