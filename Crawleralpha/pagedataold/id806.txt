Block swap algorithm for array rotation - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Block swap algorithm for array rotation Write a function rotate(ar[], d, n) that rotates arr[] of size n by d elements. Rotation of the above array by 2 will make array Algorithm: 
Initialize A = arr[0..d-1] and B = arr[d..n-1]
1) Do following until size of A is equal to size of B

  a)  If A is shorter, divide B into Bl and Br such that Br is of same 
       length as A. Swap A and Br to change ABlBr into BrBlA. Now A
       is at its final place, so recur on pieces of B.  

   b)  If A is longer, divide A into Al and Ar such that Al is of same 
       length as B Swap Al and B to change AlArB into BArAl. Now B
       is at its final place, so recur on pieces of A.

2)  Finally when A and B are of equal size, block swap them.
 Recursive Implementation: 
#include<stdio.h>

/*Prototype for utility functions */
void printArray(int arr[], int size);
void swap(int arr[], int fi, int si, int d);

void leftRotate(int arr[], int d, int n)
{ 
  /* Return If number of elements to be rotated is 
    zero or equal to array size */  
  if(d == 0 || d == n)
    return;
    
  /*If number of elements to be rotated is exactly 
    half of array size */  
  if(n-d == d)
  {
    swap(arr, 0, n-d, d);   
    return;
  }  
    
 /* If A is shorter*/              
  if(d < n-d)
  {  
    swap(arr, 0, n-d, d);
    leftRotate(arr, d, n-d);    
  }    
  else /* If B is shorter*/              
  {
    swap(arr, 0, d, n-d);
    leftRotate(arr+n-d, 2*d-n, d); /*This is tricky*/
  }
}

/*UTILITY FUNCTIONS*/
/* function to print an array */
void printArray(int arr[], int size)
{
  int i;
  for(i = 0; i < size; i++)
    printf("%d ", arr[i]);
  printf("%\n ");
} 

/*This function swaps d elements starting at index fi
  with d elements starting at index si */
void swap(int arr[], int fi, int si, int d)
{
   int i, temp;
   for(i = 0; i<d; i++)   
   {
     temp = arr[fi + i];
     arr[fi + i] = arr[si + i];
     arr[si + i] = temp;
   }     
}     

/* Driver program to test above functions */
int main()
{
   int arr[] = {1, 2, 3, 4, 5, 6, 7};
   leftRotate(arr, 2, 7);
   printArray(arr, 7);
   getchar();
   return 0;
}    
 Iterative Implementation: Here is iterative implementation of the same algorithm. Same utility function swap() is used here. 
void leftRotate(int arr[], int d, int n)
{
  int i, j;
  if(d == 0 || d == n)
    return;
  i = d;
  j = n - d;
  while (i != j)
  {
    if(i < j) /*A is shorter*/
    {
      swap(arr, d-i, d+j-i, i);
      j -= i;
    }
    else /*B is shorter*/
    {
      swap(arr, d-i, d, j);
      i -= j;
    }
    // printArray(arr, 7);
  }
  /*Finally, block swap A and B*/
  swap(arr, d-i, d, i);
}
 Time Complexity: O(n) Please see following posts for other methods of array rotation: http://geeksforgeeks.org/?p=2398 http://geeksforgeeks.org/?p=2838 References: http://www.cs.bell-labs.com/cm/cs/pearls/s02b.pdf Please write comments if you find any bug in the above programs/algorithms or want to share any additional information about the block swap algorithm.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tags: array Tweet Writing code in comment? Please use ideone.com and share the link here. cool wats d logic in ‘2d-n’??explain pls!! venkat there “among the first (d) elements last (n-d) elements are replaced so in the remaining elements the number of elements to be rotated is (d-(n-d)) i.e., (2d-n)… Eg: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9} and rotate by (d= 6). after first block swap {7, 8, 9, 4, 5, 6, 1, 2, 3} now we have to rotate array {4, 5, 6, 1, 2, 3} by 2*6 – 9 = 3 I hope understood……..:) Anonymous The following code takes O(d)/O(n-d) time whichever is larger. But has a space complexity of O(d). The following code stores the array the array to be swapped in another array.  
#include<stdio.h>
#include<stdlib.h>

void rotateArray(int a[],int d,int n)
{
    d%=n;
    int i,j=0;
    int *b=(int *) calloc (d,sizeof(int));
    for(i=0;i<d;i++)
        b[i]=a[i];
    for(i=d;i<n;i++)
        a[i-d]=a[i];
    for(i=n-d;i<n;i++)
        a[i]=b[i-n+d];
}

int main()
{
    int n,a[]={1,2,3,4,5,6,7},i,d=7;
    n=sizeof(a)/sizeof(a[0]);
    if((d%n)>0)
        rotateArray(a,d,n);
    for(i=0;i<n;i++)
        printf("%d ",a[i]);
    return 0;
}

 Vanathi Algo: Rotate array(arr[] , d, length) 1.Initialize A[] of given input array size. 2.store j = d ,i=0 3.Iterate the array til i < array.length a. if j < array.length add the elements array[j] into A[i]; increment i; increment j; b. else assign j=0; iterate till j!= d add the element array[j] into A[i]; increment i; increment j; return A; /* Paste your code here (You may delete these lines if not writing code) */ package arrays; public class RotateArray { public static void main(String[] args){ int[] array=new int[4]; array[0]=1; array[1]=2; array[2]=3; array[3]=4; int k=10; array=RotateArray.rotationArray(array,k); } private static int[] rotationArray(int[] array, int k) { int[] rotateArray=new int[array.length]; int j=k; int i=0; if(j>array.length){ j=j/array.length; } k=j; while(i < rotateArray.length){ if(j<array.length){ if(j>i){ rotateArray[i]=array[j]; j++; i++; }else{ while(j<k){ rotateArray[i]=array[j]; j++; i++; } } }else{ j=0; } } for(i=0;i<rotateArray.length;i++){ System.out.println(rotateArray[i]); } return rotateArray; } } naresh  
Here is the block-swap implementation in java (block swap can be replaced with native method like Array.copyArry etc.. method not sure about it)

package com.nbethi;
 
import java.util.Arrays;
 
public class BlockSwapArray {
 
    public static void main(String[] args) {
        int[] array;
        int size = 17;
        array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = i;
        }
        System.out.println(Arrays.toString(array));
        rotateLeft(array, 7);
        System.out.println(Arrays.toString(array));
        System.out.println("DONE");
 
    }
 
    public static void rotateLeft(int[] arr, int d) {
        rotate(arr, 0, arr.length, d, arr.length - d);
    }
 
    public static void rotate(int[] arr, int start, int end, int m, int n) {
        System.out.println(Arrays.toString(arr) + " #" + start + " #" + end + " #" + m + " #" + n);
 
        if(m==n){
            blockSwap(arr, start, end - m, n);
            return;
        }
        if (m < n) {
            blockSwap(arr, start, end - m, m);
            rotate(arr, start, end - m, m, n - m);
        } else {
            blockSwap(arr, start, end - n, n);
            rotate(arr, start + n, end, m - n, n);
        }
    }
 
    private static void blockSwap(int[] arr, int l, int r, int size) {
        for (int i = 0; i < size; i++) {
            swap(arr, l + i, r + i);
        }
    }
 
    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}
 ar The algorithm does not handle the above example: [1,2,3,4,5,6,7] with d = 2 Because at final step you will have [3,5,4,6,7,1,2] And A = [5,4] and B=EMPTY So if d==n, then we should swap the numbers. This case should be corrected in the above algorithm.  
/* Paste your code here (You may delete these lines if not writing code) */
 red swap the first d elements with the next d elements (swapping one element at a time. this would require just one auxiliary varaible). continue this until the no of elements left in the array is less than d. in that move the last few elements to the left as required. time complexity O(n) space complexity O(1) KK123 Here my recursive implementation its pretty easy than above one  
#include<iostream>
using namespace std;

void rotate(int *arr, int d, int n, int index);

int main()
{
    int n, d, arr[100];
    cin >> n;
    for(int i=0; i> arr[i];
       
    cout <> d;
    
    rotate(arr, d, n, 0);
    
    for(int i=0; i<n; i++)
       cout << arr[i] << " ";
       
    cout << endl; 
       
    system("pause");
    return 0;
}

void rotate(int *arr, int d, int n, int index)
{
     if(index == n)
         return ;
     
     int data = arr[(index + 2) % n];
     rotate(arr, d, n, index + 1);
     arr[index] = data;
}
 GeeksforGeeks @Jagdish: This post only explains Block Swap Algorithm for array rotation. We have separates for other approaches of array rotation. Please see below http://geeksforgeeks.org/?p=2398 http://geeksforgeeks.org/?p=2838 Also, please see http://www.cs.bell-labs.com/cm/cs/pearls/s02b.pdf for comparison of the standard rotation algorithms. Jagdish this is so complex logic, here is a simple one Reverse the two array [0,d] and [d,n] == { 2,1,7,6,5,4,3} Reverse whole array = {3,4,5,6,7,1,2} Asit good logic! ranga Too good…Fantastic…Thanks alot. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
