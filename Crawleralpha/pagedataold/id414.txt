Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) Given two binary strings that represent value of two integers, find the product of two strings. For example, if the first bit string is “1100” and second bit string is “1010”, output should be 120. For simplicity, let the length of two strings be same and be n. A Naive Approach is to follow the process we study in school. One by one take all bits of second number and multiply it with all bits of first number. Finally add all multiplications. This algorithm takes O(n^2) time. Using Divide and Conquer, we can multiply two integers in less time complexity. We divide the given numbers in two halves. Let the given numbers be X and Y. For simplicity let us assume that n is even X =  Xl*2n/2 + Xr    [Xl and Xr contain leftmost and rightmost n/2 bits of X]
Y =  Yl*2n/2 + Yr    [Yl and Yr contain leftmost and rightmost n/2 bits of Y] The product XY can be written as following. XY = (Xl*2n/2 + Xr)(Yl*2n/2 + Yr)
   = 2n XlYl + 2n/2(XlYr + XrYl) + XrYr If we take a look at the above formula, there are four multiplications of size n/2, so we basically divided the problem of size n into for sub-problems of size n/2. But that doesn’t help because solution of recurrence T(n) = 4T(n/2) + O(n) is O(n^2). The tricky part of this algorithm is to change the middle two terms to some other form so that only one extra multiplication would be sufficient. The following is tricky expression for middle two terms. XlYr + XrYl = (Xl + Xr)(Yl + Yr) - XlYl- XrYr So the final value of XY becomes XY = 2n XlYl + 2n/2 * [(Xl + Xr)(Yl + Yr) - XlYl - XrYr] + XrYr With above trick, the recurrence becomes T(n) = 3T(n/2) + O(n) and solution of this recurrence is O(n1.59). What if the lengths of input strings are different and are not even? To handle the different length case, we append 0’s in the beginning. To handle odd length, we put floor(n/2) bits in left half and ceil(n/2) bits in right half. So the expression for XY changes to following. XY = 22ceil(n/2) XlYl + 2ceil(n/2) * [(Xl + Xr)(Yl + Yr) - XlYl - XrYr] + XrYr The above algorithm is called Karatsuba algorithm and it can be used for any base. Following is C++ implementation of above algorithm. 
// C++ implementation of Karatsuba algorithm for bit string multiplication.
#include<iostream>
#include<stdio.h>

using namespace std;

// FOLLOWING TWO FUNCTIONS ARE COPIED FROM http://goo.gl/q0OhZ
// Helper method: given two unequal sized bit strings, converts them to
// same length by adding leading 0s in the smaller string. Returns the
// the new length
int makeEqualLength(string &str1, string &str2)
{
    int len1 = str1.size();
    int len2 = str2.size();
    if (len1 < len2)
    {
        for (int i = 0 ; i < len2 - len1 ; i++)
            str1 = '0' + str1;
        return len2;
    }
    else if (len1 > len2)
    {
        for (int i = 0 ; i < len1 - len2 ; i++)
            str2 = '0' + str2;
    }
    return len1; // If len1 >= len2
}

// The main function that adds two bit sequences and returns the addition
string addBitStrings( string first, string second )
{
    string result;  // To store the sum bits

    // make the lengths same before adding
    int length = makeEqualLength(first, second);
    int carry = 0;  // Initialize carry

    // Add all bits one by one
    for (int i = length-1 ; i >= 0 ; i--)
    {
        int firstBit = first.at(i) - '0';
        int secondBit = second.at(i) - '0';

        // boolean expression for sum of 3 bits
        int sum = (firstBit ^ secondBit ^ carry)+'0';

        result = (char)sum + result;

        // boolean expression for 3-bit addition
        carry = (firstBit&secondBit) | (secondBit&carry) | (firstBit&carry);
    }

    // if overflow, then add a leading 1
    if (carry)  result = '1' + result;

    return result;
}

// A utility function to multiply single bits of strings a and b
int multiplyiSingleBit(string a, string b)
{  return (a[0] - '0')*(b[0] - '0');  }

// The main function that multiplies two bit strings X and Y and returns
// result as long integer
long int multiply(string X, string Y)
{
    // Find the maximum of lengths of x and Y and make length
    // of smaller string same as that of larger string
    int n = makeEqualLength(X, Y);

    // Base cases
    if (n == 0) return 0;
    if (n == 1) return multiplyiSingleBit(X, Y);

    int fh = n/2;   // First half of string, floor(n/2)
    int sh = (n-fh); // Second half of string, ceil(n/2)

    // Find the first half and second half of first string.
    // Refer http://goo.gl/lLmgn for substr method
    string Xl = X.substr(0, fh);
    string Xr = X.substr(fh, sh);

    // Find the first half and second half of second string
    string Yl = Y.substr(0, fh);
    string Yr = Y.substr(fh, sh);

    // Recursively calculate the three products of inputs of size n/2
    long int P1 = multiply(Xl, Yl);
    long int P2 = multiply(Xr, Yr);
    long int P3 = multiply(addBitStrings(Xl, Xr), addBitStrings(Yl, Yr));

    // Combine the three products to get the final result.
    return P1*(1<<(2*sh)) + (P3 - P1 - P2)*(1<<sh) + P2;
}

// Driver program to test aboev functions
int main()
{
    printf ("%ld\n", multiply("1100", "1010"));
    printf ("%ld\n", multiply("110", "1010"));
    printf ("%ld\n", multiply("11", "1010"));
    printf ("%ld\n", multiply("1", "1010"));
    printf ("%ld\n", multiply("0", "1010"));
    printf ("%ld\n", multiply("111", "111"));
    printf ("%ld\n", multiply("11", "11"));
}
 Output: 120
60
30
10
0
49
9 Time Complexity: Time complexity of the above solution is O(n1.59). Time complexity of multiplication can be further improved using another Divide and Conquer algorithm, fast Fourier transform. We will soon be discussing fast Fourier transform as a separate post. Exercise The above program returns a long int value and will not work for big strings. Extend the above program to return a string instead of a long int value. References: Wikipedia page for Karatsuba algorithm Algorithms 1st Edition by Sanjoy Dasgupta, Christos Papadimitriou and Umesh Vazirani http://courses.csail.mit.edu/6.006/spring11/exams/notes3-karatsuba http://www.cc.gatech.edu/~ninamf/Algos11/lectures/lect0131.pdf Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Check if binary representation of a number is palindrome Swap two nibbles in a byte How to turn off a particular bit in a number? Check if a number is multiple of 9 using bitwise operators How to swap two numbers without using a temporary variable? Find position of the only set bit Swap all odd and even bits Add two bit strings Tags: Divide and Conquer Tweet Writing code in comment? Please use ideone.com and share the link here. Spanky Mistake : O(n^159) -> O(n^158) ~= log2(3) anvesh can any one write code for complex numbers multiplication using FFT frenzydude This can be done even faster in O(nlogn) using FFT. sudhanshu can any1 pls tell me wht are floor n ceil values ?? Himanshu Dagar floor means greatest integer less than or equal to that no and ceil is least integer greater than or equal to that no e.g floor(2.6)=2; ceil(2.6)=3; defined in math.h Sanjeet /******Sanjeet from NIT allahabad ********/ you can simply adjust the value of i & j to get the multiplication of two strings . #include #include int convertbin(char a[]); int main() { char string1[4]=”0111″; char string2[4]=”0111″; int DecimalNum1=0; int DecimalNum2=0; int Product=0; DecimalNum1=convertbin(string1); DecimalNum2=convertbin(string2); Product=DecimalNum1*DecimalNum2; printf(“Product of two string =%dn”,Product); return 0; } int convertbin(char a[]) { double num=0; int i=0,j=0; int temp=0; for(i=0,j=4;i<=3 && j–;i++) { temp=a[i]-'0'; num=num+temp*pow(2,j); } return num; } sanjeet8.23@gmail.com Shabaz Ahmed The point here is to do the multiplication in less than O(n^2)..! Sanjeet /******Sanjeet from NIT allahabad ********/ you can simply adjust the value of i & j to get the multiplication of two strings . #include #include int convertbin(char a[]); int main() { char string1[4]=”0111″; char string2[4]=”0111″; int DecimalNum1=0; int DecimalNum2=0; int Product=0; DecimalNum1=convertbin(string1); DecimalNum2=convertbin(string2); Product=DecimalNum1*DecimalNum2; printf(“Product of two string =%dn”,Product); return 0; } int convertbin(char a[]) { double num=0; int i=0,j=0; int temp=0; for(i=0,j=4;i<=3 && j–;i++) { temp=a[i]-'0'; num=num+temp*pow(2,j); } return num; } sanjeet8.23@gmail.com Raunak Lakhwani public class Main { static String first = “1”, second = “00110”; /** * @param args */ public static void main(String[] args) { //int n = makeEqualString(first, second); System.out.println(multiplication(first, second)); } public static int makeEqualString(StringBuffer a, StringBuffer b) { if (a.length() > b.length()) { for (int i = b.length(); i a.length()) { for (int i = a.length(); i < b.length(); i++) { a.insert(0, "0"); } } return a.length(); } public static int multiplySingleBit(String a, String b) { int mul = 0; mul = (a.charAt(0) – '0') * (b.charAt(0) – '0'); return mul; } public static int multiplication(String a, String b) { StringBuffer stringA = new StringBuffer(a); StringBuffer stringB = new StringBuffer(b); int len = makeEqualString(stringA, stringB); a = stringA.toString(); b = stringB.toString(); if (len == 0) { return 0; } if (len == 1) { return multiplySingleBit(a, b); } int fh = len / 2; int sh = len – fh; String leftHalf1, rightHalf1, leftHalf2, rightHalf2; leftHalf1 = new String(a.substring(0, fh)); rightHalf1 = new String(a.substring(fh)); leftHalf2 = new String(b.substring(0, fh)); rightHalf2 = new String(b.substring(fh)); int p1 = multiplication(leftHalf1.toString(), leftHalf2.toString()); int p2 = multiplication(rightHalf1.toString(), rightHalf2.toString()); String firstFull = getFull(leftHalf1, rightHalf1); String secondFull = getFull(leftHalf2, rightHalf2); int p3 = multiplication(firstFull, secondFull); int mul = p1 * (1 << 2 * sh) + ((p3 – p1 – p2) * (1 <= 0; i–) { int firstBit = left.charAt(i) – ‘0’; int secondBit = right.charAt(i) – ‘0’; int sum = (firstBit ^ secondBit ^ carry); carry = (firstBit & secondBit) | (secondBit & carry) | (carry & firstBit); full = sum + full; } if (carry == 1) { full = “1” + full; } return full; } } Trilok Typo mistake .. XY = 2n XlYl + 2ceil(n/2) * [(Xl + Xr)(Yl + Yr) – XlYl – XrYr] + XrYr http://coderpages.blogspot.in/ komal #include #include #include using namespace std; int pow(int x,int n) { if(x==0) return 0; if(n==0) return 1; if(n==1) return (x); return (x*pow(x,n-1)); } void print(string s) { for(int i=0;i<=s.size();i++) cout<<s[i]<<" "; cout<<endl; } int b2d(string s) /* binary 2 deciaml */ { int dec=0; for(int i=0;i<s.size();i++) if(s[i]-'0') dec=dec+pow(2,(s.size()-i-1)); return dec; } /* driver program */ int main() { string s1="1001"; string s2="10"; cout<<(b2d(s1)*b2d(s2))<<endl; cout<<(b2d("1111")*b2d("00"))<<endl; cout<<(b2d("101111")*b2d("0001"))<<endl; return 0; } please feel to improvise this code and correct it. akshat gupta 1.you are entering a number in binary representation(serves no purpose here), 2.converting it to decimal, 3.printing the multiplication… PROBLEM: question asks you to find an algorithm for “fast multiplication of 2 numbers”.. akshat gupta int karatsuba(int n1,int n2) { int l1,l2,l; int i,mask1=1; int a,b,c,d; int res1,res2,res3; l1=dig(n1);//returns number of digits l2=dig(n2); if(n1==0 || n2==0) return(0); l=min(l1,l2); if(l>1) { for(i=1;i<=l/2;i++) mask1=mask1*10; a=n1/mask1; b=n1%mask1; c=n2/mask1; d=n2%mask1; res1=karatsuba(a,c); res2=karatsuba(b,d); res3=karatsuba(a+b,c+d); if(l%2==0) return( res1*pow(10,l) + (res3-res1-res2)*pow(10,l/2) + res2 ); else return( res1*pow(10,l-1)+ (res3-res1-res2)*pow(10,l/2) + res2); } return(n1*n2); } akshat gupta C IMPLEMENTATION: int karatsuba(int n1,int n2) { int l1,l2,l; int i,mask1=1; int a,b,c,d; int res1,res2,res3; l1=dig(n1);//returns number of digits l2=dig(n2); if(n1==0 || n2==0) return(0); l=min(l1,l2); if(l>1) { for(i=1;i<=l/2;i++) mask1=mask1*10; a=n1/mask1; b=n1%mask1; c=n2/mask1; d=n2%mask1; res1=karatsuba(a,c); res2=karatsuba(b,d); res3=karatsuba(a+b,c+d); if(l%2==0) return( res1*pow(10,l) + (res3-res1-res2)*pow(10,l/2) + res2 ); else return( res1*pow(10,l-1)+ (res3-res1-res2)*pow(10,l/2) + res2); } return(n1*n2); } Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
