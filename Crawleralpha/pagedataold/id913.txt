Print Matrix Diagonally - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print Matrix Diagonally Given a 2D matrix, print all elements of the given matrix in diagonal order. For example, consider the following 5 X 4 input matrix. 
    1     2     3     4
    5     6     7     8
    9    10    11    12
   13    14    15    16
   17    18    19    20 Diagonal printing of the above matrix is 
    1
    5     2
    9     6     3
   13    10     7     4
   17    14    11     8
   18    15    12
   19    16
   20 Following is C++ code for diagonal printing. The diagonal printing of a given matrix ‘matrix[ROW][COL]’ always has ‘ROW + COL – 1′ lines in output 
#include <stdio.h>
#include <stdlib.h>

#define ROW 5
#define COL 4

// A utility function to find min of two integers
int min(int a, int b)
{ return (a < b)? a: b; }

// A utility function to find min of three integers
int min(int a, int b, int c)
{ return min(min(a, b), c);}

// A utility function to find max of two integers
int max(int a, int b)
{ return (a > b)? a: b; }

// The main function that prints given matrix in diagonal order
void diagonalOrder(int matrix[][COL])
{
    // There will be ROW+COL-1 lines in the output
    for (int line=1; line<=(ROW + COL -1); line++)
    {
        /* Get column index of the first element in this line of output.
           The index is 0 for first ROW lines and line - ROW for remaining
           lines  */
        int start_col =  max(0, line-ROW);

        /* Get count of elements in this line. The count of elements is
           equal to minimum of line number, COL-start_col and ROW */
         int count = min(line, (COL-start_col), ROW);

        /* Print elements of this line */
        for (int j=0; j<count; j++)
            printf("%5d ", matrix[min(ROW, line)-j-1][start_col+j]);

        /* Ptint elements of next diagonal on next line */
        printf("\n");
    }
}

// Utility function to print a matrix
void printMatrix(int matrix[ROW][COL])
{
    for (int i=0; i< ROW; i++)
    {
        for (int j=0; j<COL; j++)
            printf("%5d ", matrix[i][j]);
        printf("\n");
    }
}

// Driver program to test above functions
int main()
{
    int M[ROW][COL] = {{1, 2, 3, 4},
                       {5, 6, 7, 8},
                       {9, 10, 11, 12},
                       {13, 14, 15, 16},
                       {17, 18, 19, 20},
                      };
    printf ("Given matrix is \n");
    printMatrix(M);

    printf ("\nDiagonal printing of matrix is \n");
    diagonalOrder(M);
    return 0;
}
 Output: Given matrix is
    1     2     3     4
    5     6     7     8
    9    10    11    12
   13    14    15    16
   17    18    19    20

Diagonal printing of matrix is
    1
    5     2
    9     6     3
   13    10     7     4
   17    14    11     8
   18    15    12
   19    16
   20 This article is compiled by Ashish Anand and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. alien can u please explain the algorithm? raj print or access elements of a general matrix was never so straightforward. Thanks to the contributer for the code. I needed it to write a parallel code for finding the longest common subsequence problem Nag class MatrixDiagonalDisplay { public static void main(String[] args) { int [][] ipArray = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; int m = 5, n = 4; displayArray(ipArray, m, n); displayArrayAsDigonals(ipArray, m,n); } static void displayArray(int [][] ipArray, int m, int n){ System.out.println(“The input arry is : “); for (int i = 0; i < m; i++) { for (int j = 0; j < n; j++) { System.out.print(ipArray[i][j]+" "); } System.out.println('n'); } } static void displayArrayAsDigonals(int[][] ipArray, int m, int n) { int j,k; System.out.println("The diagonal display is : "); for (int i = 0; i < (m+n-1); i++) { if(i = 0 && j = 0 && k < n){ System.out.print(ipArray[j][k] + " "); j–; k++; } System.out.println('n'); } } } Nag class MatrixDiagonalDisplay { public static void main(String[] args) { int [][] ipArray = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; int m = 5, n = 4; displayArray(ipArray, m, n); displayArrayAsDigonals(ipArray, m,n); } static void displayArray(int [][] ipArray, int m, int n){ System.out.println(“The input arry is : “); for (int i = 0; i < m; i++) { for (int j = 0; j < n; j++) { System.out.print(ipArray[i][j]+" "); } System.out.println('n'); } } static void displayArrayAsDigonals(int[][] ipArray, int m, int n) { int j,k; System.out.println("The diagonal display is : "); for (int i = 0; i < (m+n-1); i++) { if(i = 0 && j = 0 && k < n){ System.out.print(ipArray[j][k] + " "); j–; k++; } System.out.println('n'); } } } Sunny void printDiagonal(int (&m)[100][100], int row, int col) { int i = 0, j = 0; for(int k = 0; k = 0 && i = 0 && j < col) { printf("%d ", m[i][j]); i--; j++; } printf("n"); if(j == col) i += 2, j--; else i++; } } int main() { int a[100][100] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; printDiagonal(a, 5, 4); return 0; } anonym void printDiagonal(int (&m)[100][100], int row, int col) { int i = 0, j = 0; for(int k = 0; k = 0 && i = 0 && j < col) { printf("%d ", m[i][j]); i--; j++; } printf("n"); if(j == col) i += 2, j--; else i++; } } int main() { int a[100][100] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; printDiagonal(a, 5, 4); return 0; } Budweiser Can’t it be done in O(n) time complexity with using queue and some auxiliary space O(n) Enqueue left top while(!queue.isEmpty()) dequeue element. Enqueue its right and lower elements if exists and havn’t been visited. Print the element dequeued. Correct me if I am wrong Guest ur approach is working, but one modification is reqiured to denote where current level end in order to print new line. Here is working code in c++. #include #include #include using namespace std; void printDiagonally(vector<vector > arr) { if(!arr.size()) return; int row=arr.size(); int col=arr[0].size(); int i,j; queue<pair > q; // queue of 2d index q.push(make_pair(0,0)); q.push(make_pair(-1,-1)); while(q.front().first!=-1) { while(q.front().first!=-1) { i=q.front().first; j=q.front().second; printf(“%4d”,arr[i][j]); q.pop(); if(i<row-1) // to check if i is not the last row q.push(make_pair(i+1,j)); // push below element } q.pop(); if(j<col-1) // to check for last element of ith row q.push(make_pair(i,j+1)); // push right element q.push(make_pair(-1,-1)); // to denote end of level printf("n"); } q.pop(); } int main() { int row,col; printf("Enter Row and Coln"); scanf("%d%d",&row,&col); int a; vector<vector > arr; //vector v; for(int i=0;i<row;i++) { vector v; for(int j=0;j<col;j++) { scanf("%d",&a); v.push_back(a); } arr.push_back(v); } printDiagonally(arr); } Ankit Chaudhary ur approach is working, but one modification is required to denote where current level end in order to print new line. Aravindan B I think there is a pattern in printing the newline in this method. say 4 x 2 ROW = 4 if(ROW-1) – ODD then the n is to printed after 1, 2, 3, 2, 1 elements. (here 1, 2 represent number of elements after which n has to be printed) ROW = 5 if(ROW-1 is even) pattern is 1, 2, 3, 4, 4, 3, 2, 1 This pattern follows for all m x n. So instead of printing the element dequeued , if we can keep the numbers in the queue itself, we can print the n in the above fashion. Correct me if i am wrong. Aravindan B Sorry it is max(Row, col)-1 is odd or even. Naruto_Koder Hope this will do #define ROW 5 #define COL 4 void diag(int a[][COL]) { int maxc=COL,maxr=ROW,i; int r=ROW-1,l=0; while( r>=0 && maxc>l ) { for(i=0;i<=r;i++) printf("%d\n",a[i][l]); l++; for(i=l;i<maxc;i++) printf("%d \n",a[r][i]); r–; printf("\n"); } } int main() { int M[ROW][COL] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; printf ("\nDiagonal printing of matrix is \n"); diag(M); return 0; } saroj07 saroja #include #define ROW 5 #define COL 4 void printMatrix(int M[ROW][COL]); void diagonalOrder(int M[ROW][COL]) { int a=1; int i,j,k,l=1; for(i=0;i<9;i++) { k=i; if(k-1 < 0) { printf("%d ",M[k][k]); } else { if(k=0 && k>=0) { if(k<ROW && j<COL) { printf("%d ",M[k][j]); k–; j++; } else { break; } } a++; } else { j=l; int y=k-l; while(j+1<ROW) { printf("%d ",M[y][j]); j++; y–; } a++; l++; } } printf("\n"); } } void printMatrix(int matrix[ROW][COL]) { int i,j; for (i=0; i< ROW; i++) { for (j=0; j<COL; j++) printf("%d ", matrix[i][j]); printf("\n"); } } int main() { int M[ROW][COL] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; printf ("Given matrix is \n"); printMatrix(M); printf ("\nDiagonal printing of matrix is \n"); diagonalOrder(M); return 0; } saroj just chek thi soln.. skulldude How about the following code? It does not require any in-depth analysis of the properties of matrices and their diagnol elements.  
void printMatrixDiagonally(int a[MAX_DIM][MAX_DIM],int r,int c){
	if(!a || r<=0 || c<=0)
		return;
		
	for(int i=0;i<r;++i)
		printDiagonal(a,i,0,c);
	
	for(int j=1;j<c;++j)
		printDiagonal(a,r-1,j,c);
	
	return;
}

void printDiagonal(int a[MAX_DIM][MAX_DIM],int x,int y,int c){
	int i=x,j=y;
	while(i>=0 && j<c){
		printf("%d ",a[i--][j++]);
	}
	printf("\n");
	return;
}

Please comment if you find any bugs in it.

Thanks,
Balasubramanian.N
 Ashish Here is a simple C++ implemntation using two variables.  
#include<iostream>
using namespace std;
int main()
{
    int row,col,i,j;
    cin>>row>>col;
    int ar[row][col];
    for(i=0;i<row;i++)
    for(j=0;j<col;j++)
    cin>>ar[i][j];
    int a=0,b=0,a1=a,b1=b;
    cout<<ar[a1][b1]<<endl;
    while(true)
    {
        
        if(a<row-1)
        a++;
        else if(a==row-1 && b<col-1)
        {
            b++;
        }
        else if(a==row-1 && b==col-1 )
        {
            break;
        }
        a1=a;b1=b;
       while(a1<row && a1>=0 && b1<col && b1>=0)
       {
           cout<<ar[a1][b1]<<" ";
           a1--;
           b1++;
       }
       cout<<endl;
    }
    return 0;
}
 Happy Coding bpsingh //m=row count, n=column count, arr=Array that holds input  
for(i=0; i<m+n-1; i++){
 j=i<m?0:i-m+1; //initialize starting column position
 k=i<m?i:m; //initialize starting row position
 while(k>=0 && j<n){
  printf("%d ", arr[k][j]);
  k--; j++;
 } 
}
 bpsingh missed printf(“\n”) after while loop pritybhudolia #include #include # define R 5 # define C 4 int main() { int i=0,j,flag=0,count,k=0,p=0; int M[6][5] = {{1, 2, 3, 4,5}, {6, 7, 8,9,10}, {11, 12,13,14,15}, {16, 17, 18,19,20}, {21, 22,23, 24,25}, {26,27,28,29,30} }; count=(R+1)+(C+1)-1; /* int M[5][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; */ printf (“\nGiven matrix is \n”); for(i=0;i<=R;i++) { for(j=0;j<=C;j++) printf(” %d”,M[i][j]); printf(“\n”); } printf (“\nDiagonal printing of matrix is \n”); while(count) { if(k==R) { for(j=p,i=k;j<=C;j++,i–) printf(” %d”,M[i][j]); p++; } else { for(j=0,i=k;j<=k;j++,i–) printf(” %d”,M[i][j]); k++; } printf(“\n”); count–; } getch(); return 0; } prity  
/* #include<stdio.h>
#include<conio.h>
# define R 5
# define C 4
int main()
{
     int i=0,j,flag=0,count,k=0,p=0;
    int M[6][5] =     {{1, 2, 3, 4,5},
                       {6, 7, 8,9,10},
                       {11, 12,13,14,15},
                       {16, 17, 18,19,20},
                       {21, 22,23, 24,25},
                       {26,27,28,29,30}
                      };
    count=(R+1)+(C+1)-1;
                      
  /*  int M[5][4] = {{1, 2, 3, 4},
                       {5, 6, 7, 8},
                       {9, 10, 11, 12},
                       {13, 14, 15, 16},
                       {17, 18, 19, 20},
                      }; */
printf ("\nGiven matrix is \n");
for(i=0;i<=R;i++)
{
                 for(j=0;j<=C;j++)
                 printf(" %d",M[i][j]);
                 printf("\n");
}
   
printf ("\nDiagonal printing of matrix is \n");
     while(count)
    {
                     if(k==R)
                     {
                             
                             for(j=p,i=k;j<=C;j++,i--)
                             printf(" %d",M[i][j]);
                             p++;
                                      
                     
                     }
                     else
                     {
                              for(j=0,i=k;j<=k;j++,i--)
                              printf(" %d",M[i][j]);
                              k++;                     
                     }
                     printf("\n");
                     count--;
    }

    getch();
    return 0;
}
*/
 Muthukumar Suresh isnt this a much simpler solution: #include<iostream> using namespace std; #define row 5 #define column 4 void diagonalOrder(int abc[row][column]){ int i,j,k; for(i=0;i<row;i++){ j=0;k=i; while(k>=0&&j<=(column-1)){ cout<<abc[k][j]<<"\t"; k=k-1; j=j+1; } cout<<"\n"; } for(j=1;j<column;j++){ k=j;i=row-1; while(k<=(column-1)&&i>=0){ cout<<abc[i][k]<<"\t"; i=i-1; k=k+1; } cout<<"\n"; } } int main() { int M[row][column] = {{1, 2,3, 4}, {5, 6, 7, 8}, {9,10,11,12}, {13,14,15,16}, {17,18,19,20}, }; cout<<"Given matrix is \n"; cout<<"\nDiagonal printing of matrix is \n"; diagonalOrder(M); return 0; } cyberphyte #include<iostream> #include <stdio.h> #include <stdlib.h> #define ROW 5 #define COL 4 void printMatrix(int matrix[ROW][COL]) { for (int i=0; i< ROW; i++) { for (int j=0; j<COL; j++) printf("%5d ", matrix[i][j]); printf("\n"); } } void print_matrix_diagonally(int a[][COL]) { int i=0,j=0; for(;i<ROW-1;i++) { int print_i=i,print_j=0; while(print_i>=0) printf("%d ",a[print_i–][print_j++]); printf("\n"); } for(j=0;j<COL;j++) { int print_i=ROW-1,print_j=j; while(print_j<=COL-1) printf("%d ",a[print_i–][print_j++]); printf("\n"); } } int main() { int M[ROW][COL] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, }; printf ("Given matrix is \n"); printMatrix(M); printf ("\nDiagonal printing of matrix is \n"); print_matrix_diagonally(M); return 0; } AAA I think this will not work for something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 aasshishh Hi AAA Thanks for pointing this out. The post have been updated. Cheers anonymous  
void diagonalOrder(int a[ROW][COL]){
     int i,j;
     int flag;
     for(i=1;i<=ROW+COL-1;i++){
                              int startcol = max(0,i-ROW);
                              int count = min(i,COL-startcol);
                              flag = i<ROW?i:5;                
                              for(j=0;j<count;j++){
                                                   flag--;
                                                   printf("%5d",a[flag][startcol+j]);
                              }
                              printf("\n");
     }
}
 anonymous  
change flag = i<ROW?i:5; to flag = i<ROW?i:ROW;
 Kanhaiya https://github.com/kanhaiyakumawat/myprograms/blob/master/cplusplusprograms/print_matrix_diagonally.cpp gh05t here you go,working code in ruby n=gets.to_i m=gets.to_i A=Array.new(m){Array.new(n)} i=j=0 while i<m while j<n A[i][j] =gets.to_i j+=1 end i+=1 j=0 end B=Array.new(m+n-1) {Array.new} i=j=0 while j<n while i<m B[i+j] << A[i][j] i+=1 end j+=1 i=0 end i=0 while i<m+n-1 B[i].each do |x| print x;print " " end puts "" i+=1 end rajiv kumar  
public static void main(String[] args) {
		int[][] arr = {{1,2,3},{4,5,6},{7,8,9}};
		int i=0,j=0;
		for(int k=0; k<arr.length + arr[0].length - 1; k++){
			for(int a=i,b=j; a>=0 && (b<=i || b<arr[0].length); a--,b++)
				System.out.print(arr[a][b]+" ");
			System.out.println();
			int temp = (k<arr.length-1)?i++:j++;
		}
	}
 http://effprog.blogspot.com Sambasiva  
#include <stdio.h>

void printDiagnolUpwards(int r, int c, int m[]) {
  int i, j, k;

  for (i = 0; i < r; i++) {
    for (j = i, k = 0; k < c && j >= 0; j--, k++) {
      printf("%d ", m[j][k]);
    }
    printf("\n");
  }

  for (i = 1; i < c; i++) {
    for (j = r - 1, k = i; k < c && j >= 0; j--, k++) {
      printf("%d ", m[j][k]);
    }
    printf("\n");
  }
}

void printDiagnolDownwards(int r, int c, int m[]) {
  int i, j, k;

  for (i = 0; i < c; i++) {
    for (j = 0, k = i; k >= 0 && j < r; j++, k--) {
      printf("%d ", m[j][k]);
    }
    printf("\n");
  }

  for (i = 1; i < r; i++) {
    for (j = i , k = c - 1; k >= 0  && j < r; j++, k--) {
      printf("%d ", m[j][k]);
    }
    printf("\n");
  }
}

int main() {

  int m[][4] = {
      { 1,     2,     3,     4},
      { 5,     6,     7,     8},
      { 9,     10,    11,    12},
      { 13,    14,    15,    16},
      { 17,    18,    19,    20}
  };

  printDiagnolUpwards(5, 4, m);
  printf("\n\n");
  printDiagnolDownwards(5, 4, m);
  return 0;
}
 pooja int i,j,k; for(k=0;k=0) { printf(matrix[i][j]); i–; j++; } printf(“\n”); } k=row-1; m=1; while(m=0) { printf(matrix[i][j]); i–; j++; } printf(“\n”); } somesh  
void printDiagonal(int mat[][], int m, int n)
{
int row=0, col=0, start_row, start_col;
while(col < n)
{
start_row = row;
start_col = col;
while(row>=0 and col<n)
{
printf("%d ",mat[row][col]);
row--;
col++;
}
if(row < m-1)
{
row = start_row+1;
col = start_col;
}
else
{
row = m-1;
col = start_col + 1;
}
}
}
 $am //Driver.cpp #include using namespace std; class matrix { int row,col; int **ptr; public: matrix(int x,int y) { cout<<"matrix is \n"; row = x; col = y; ptr = (int **)new int[row]; for(int i = 0;i<row;i++) { ptr[i]=new int [col]; } for(int i = 0;i< row;i++) { for(int j = 0;j<col;j++) { ptr[i][j] = (i+1)*(j+1); cout<<ptr[i][j]<< " "; } cout<<"\n"; } } matrix() { } void printdiagonally(); }; void matrix::printdiagonally() { int loop = row + col – 1; int temprow = 0,tempcol = 0; for(int i = 0;i<=loop;i++) { if(i< row) { temprow = i; tempcol = 0; } else { temprow = row -1; tempcol = i – row; if(!tempcol) continue; } for(int j = temprow,k = tempcol;k<=temprow; j–,k++) { cout<<ptr[j][k]<<" "; } cout<printdiagonally(); } Vishesh Srivastava  
#include<stdio.h>
void print(int ar[100][100],int r,int c,int i,int j)
{
    if(i>=r||i<0||j>=c||j<0)
        return;
    printf("%d\t",ar[i][j]);
    print(&ar[0][0],r,c,i-1,j+1);
}
int main()
{
    int i,j,r,c,ar[100][100];
     ar=[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]];
r=5;
c=5;
    for(i=0;i<r;i++)
    {
        print(&ar[0][0],r,c,i,0);
        printf("\n");
    }
    for(i=1;i<c;i++)
    {
        print(&ar[0][0],r,c,r-1,i);
        printf("\n");
    }
    return 0;
}

 Sunil Kumar Java function :: public static void diagonalOrder(int matrix[][], int row, int col) { int x = 0; for(int i=0; i= row) { k = row-1; x++; j = x; } while(j = 0) { System.out.print(matrix[k][j] + “\t”); j++; k–; } System.out.println(); } } Sunil Kumar public static void diagonalOrder(int matrix[][], int row, int col) { int x = 0; for(int i=0; i= row) { k = row-1; x++; j = x; } while(j = 0) { System.out.print(matrix[k][j] + “\t”); j++; k–; } System.out.println(); } } asitdhal  
#include <stdio.h>
#include <stdlib.h>
 
#define ROW 5
#define COL 4
 
// Utility function to print a matrix
void printMatrix(int matrix[ROW][COL])
{
    for (int i=0; i< ROW; i++)
    {
        for (int j=0; j<COL; j++)
            printf("%5d ", matrix[i][j]);
        printf("\n");
    }
}

void diagonalOrder(int matrix[ROW][COL])
{
	//5 x 4

	int row_intr=0;

	for(int row=0; row<ROW;)
	{
		row_intr = row;	
		int col = 0;
		for(;col<COL && row_intr >= 0;)
		{
			printf("%5d", matrix[row_intr][col]);
			row_intr--;
			col++;
		}

		printf("\n");

		if ( row < ROW )
			row++;	
	}

	row_intr = ROW-1;

	int col = 1;
	while ( col < COL )
	{
		int col_intr = col;
		col ++;

		for ( row_intr = ROW-1; row_intr >=0 && col_intr < COL; row_intr --, col_intr++)
		{
			printf("%5d", matrix[row_intr][col_intr]);
		}

		printf("\n");
	}

}
 
// Driver program to test above functions
int main()
{
    int M[ROW][COL] = {{1, 2, 3, 4},
                       {5, 6, 7, 8},
                       {9, 10, 11, 12},
                       {13, 14, 15, 16},
                       {17, 18, 19, 20},
                      };
    printf ("Given matrix is \n");
    printMatrix(M);
 
    printf ("\nDiagonal printing of matrix is \n");
    diagonalOrder(M);
    return 0;
}
 dk #include<iostream> #define row 5 #define col 4 using namespace std; int main() { int a[row][col],i,j; for(i=0;i<row;i++) {for(j=0;j<col;j++) cin>>a[i][j]; } int len=row+col-1; for(i=0;i<len;i++) { for(int k=i,j=0;k>=0&&j<col;k–,j++) { if(k>=row) continue; else cout<<a[k][j]<<"\t"; } cout<<"\n\n"; } return 0; } Niks  
void diagonalOrder(int matrix[][COL])
{
	for(int i=0; i<(ROW+COL); i++)
	{
		static int x = 0;
		int k = i;
		int	j = 0;
		if(k >= ROW)
		{
			k = ROW-1;
			x++;
			j = x;
		}

		while(j < COL && k>=0)
		{
			printf("%d \n", matrix[k][j]);
			j++;
			k--;
		}


	}
	return;
}

 Sreenivas Doosa  
for(int i = 0; i < ROWS + COLS - 1; i++) 
{

	int row, col;
	
	if(i < ROWS) 
	{
		row = i;
		col = 0; // first column
	} 
	else 
	{
		row = ROWS - 1; // last row
		col = i - ROWS + 1;
	}
	
	while(row >= 0 && col < COLS) 
	{
		printf(" %d", MATRIX[row][col]);
		row--; // decrease the row
		col++; // increase the colomn
	}
	// print line
	printf("\n");
}
 http://pnadityalabs.com/ Aditya def matrix_diagnol(matrix,row,col): count = 0 lines = row + col while count < row: temp = count result = "" for i in range(0,count+1): result = result +str(matrix[temp][i])+" " temp = temp – 1 print result count = count + 1 count = 1 Column = 1 while count < col+1: result = "" start = row – 1 diff = start – count + 1 #print "Diff "+str(diff)+" count "+str(count) temp = Column for j in range(1,diff+1): result = result+ str(matrix[start][temp])+" " start = start-1 temp = temp + 1 Column = Column + 1 print result count = count + 1 def main(): matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]] matrix_diagnol(matrix,5,5) if __name__ == ‘__main__': main() atul another way of printing :-  

void diagonalOrder(int matrix[][COL])
{
int line,row=0,col=0,nextCol=0;
	for (line=2; line<=(ROW + COL); line++)
	{
		while(row>=0 && col>=0)
		{
			if(col>=COL)
				break;
			printf("%5d ",matrix[row][col]);
			row--;
			col++;
		}
		if(line<=ROW)
		{
			row=line-1;
			col=0;
		}
		else
		{
			row=ROW-1;
			nextCol++;
			col=nextCol;
		}
		printf("\n");
	}
}
 atul changing while loop to below one.  
while(row>=0 && col<COL)
        {
            printf("%5d ",matrix[row][col]);
            row--;
            col++;
        }
 kiran This can be done by printing the upperhalf of diagonal matrix and Lower half in two seperate loops. public class MatrixDiagonalPrint { /** * @param args */ public static void main(String[] args) { int rows = 5, cols = 4; int[][] a = new int[rows][cols]; int k=0; for(int i=0; i<rows; i++) { for(int j=0; j<cols; j++) { a[i][j] = ++k; } } System.out.println("Original Matrix"); for (int[] is : a) { for (int i : is) { System.out.print("\t"+i); } System.out.println(""); } System.out.println("Diagonal Matrix"); //Print the Upper Half of the diagonal Matrix //Start with first row first element int i=0,j=0; for(i=0; i<rows; i++) { int row=i,col=0; while(col<cols && row>=0) { System.out.print("\t"+a[row–][col++]); } System.out.println(""); } /** Print the lower half of the diagonal Matrix * Start with last row, second element * (j=1, row = i-1, since i has already crossed Rows by 1 in last FOR loop) */ for(j=1; j<cols; j++) { int row=i-1,col=j; while(col<cols && row>=0) { System.out.print("\t"+a[row–][col++]); } System.out.println(""); } } } shadow Did same way but i like the solution presented above  
/* Paste your code here (You may delete these lines if not writing code) */
 yelnatz Have 2 crawlers. One goes down the column first, the other goes right along the row.  
// given matrix[ROW][COLUMN]
// row = last row, column = last column

int Arow = 0, Acol = 0, Brow = 0, Bcol = 0;
int tempRow, tempCol;

do{
 tempRow = Arow; tempCol = Acol;

 // print first crawler
 cout << matrix[Arow][Acol] << " ";

 // print the stuff in between them
 while( tempRow != Brow || tempCol != Bcol ){
  tempRow--;
  tempCol++;
  cout << matrix[tempRow][tempCol] << " ";
 }
 
 cout << endl;

 // move the crawlers
 if ( Arow < row ) Arow++;
 else Acol++;

 if( Bcol < column ) Bcol++;
 else Brow++;

}while ( (Arow <= row) && (Acol <= column) );



 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
