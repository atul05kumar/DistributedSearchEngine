Union and Intersection of two Linked Lists - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Union and Intersection of two Linked Lists Given two Linked Lists, create union and intersection lists that contain union and intersection of the elements present in the given lists. Order of elments in output lists doesn’t matter. Example: 
Input:
   List1: 10->15->4->20
   lsit2:  8->4->2->10
Output:
   Intersection List: 4->10
   Union List: 2->8->20->4->15->10
 Method 1 (Simple) Following are simple algorithms to get union and intersection lists respectively. Intersection (list1, list2) Initialize result list as NULL. Traverse list1 and look for its each element in list2, if the element is present in list2, then add the element to result. Union (list1, list2): Initialize result list as NULL. Traverse list1 and add all of its elements to the result. Traverse list2. If an element of list2 is already present in result then do not insert it to result, otherwise insert. This method assumes that there are no duplicates in the given lists. Thanks to Shekhu for suggesting this method. Following is C implementation of this method. 
#include<stdio.h>
#include<stdlib.h>

/* Link list node */
struct node
{
    int data;
    struct node* next;
};

/* A utility function to insert a node at the begining of a linked list*/
void push (struct node** head_ref, int new_data);

/* A utilty function to chec if given data is present in a list */
bool isPresent (struct node *head, int data);

/* Function to get union of two linked lists head1 and head2 */
struct node *getUnion (struct node *head1, struct node *head2)
{
    struct node *result = NULL;
    struct node *t1 = head1, *t2 = head2;

    // Insert all elements of list1 to the result list
    while (t1 != NULL)
    {
        push(&result, t1->data);
        t1 = t1->next;
    }

    // Insert those elements of list2 which are not present in result list
    while (t2 != NULL)
    {
        if (!isPresent(result, t2->data))
            push(&result, t2->data);
        t2 = t2->next;
    }

    return result;
}

/* Function to get intersection of two linked lists head1 and head2 */
struct node *getIntersection (struct node *head1, struct node *head2)
{
    struct node *result = NULL;
    struct node *t1 = head1;

    // Traverse list1 and search each element of it in list2. If the element
    // is present in list 2, then insert the element to result
    while (t1 != NULL)
    {
        if (isPresent(head2, t1->data))
            push (&result, t1->data);
        t1 = t1->next;
    }

    return result;
}

/* A utility function to insert a node at the begining of a linked list*/
void push (struct node** head_ref, int new_data)
{
    /* allocate node */
    struct node* new_node =
        (struct node*) malloc(sizeof(struct node));

    /* put in the data */
    new_node->data = new_data;

    /* link the old list off the new node */
    new_node->next = (*head_ref);

    /* move the head to point to the new node */
    (*head_ref) = new_node;
}

/* A utility function to print a linked list*/
void printList (struct node *node)
{
    while (node != NULL)
    {
        printf ("%d ", node->data);
        node = node->next;
    }
}

/* A utilty function that returns true if data is present in linked list
else return false */
bool isPresent (struct node *head, int data)
{
    struct node *t = head;
    while (t != NULL)
    {
        if (t->data == data)
            return 1;
        t = t->next;
    }
    return 0;
}

/* Drier program to test above function*/
int main()
{
    /* Start with the empty list */
    struct node* head1 = NULL;
    struct node* head2 = NULL;
    struct node* intersecn = NULL;
    struct node* unin = NULL;

    /*create a linked lits 10->15->5->20 */
    push (&head1, 20);
    push (&head1, 4);
    push (&head1, 15);
    push (&head1, 10);

    /*create a linked lits 8->4->2->10 */
    push (&head2, 10);
    push (&head2, 2);
    push (&head2, 4);
    push (&head2, 8);

    intersecn = getIntersection (head1, head2);
    unin = getUnion (head1, head2);

    printf ("\n First list is \n");
    printList (head1);

    printf ("\n Second list is \n");
    printList (head2);

    printf ("\n Intersection list is \n");
    printList (intersecn);

    printf ("\n Union list is \n");
    printList (unin);

    return 0;
}
 Output: 

 First list is
10 15 4 20
 Second list is
8 4 2 10
 Intersection list is
4 10
 Union list is
2 8 20 4 15 10
 Time Complexity: O(mn) for both union and intersection operations. Here m is the number of elements in first list and n is the number of elements in second list. Method 2 (Use Merge Sort) In this method, algorithms for Union and Intersection are very similar. First we sort the given lists, then we traverse the sorted lists to get union and intersection. Following are the steps to be followed to get union and intersection lists. 1) Sort the first Linked List using merge sort. This step takes O(mLogm) time. Refer this post for details of this step. 2) Sort the second Linked List using merge sort. This step takes O(nLogn) time. Refer this post for details of this step. 3) Linearly scan both sorted lists to get the union and intersection. This step takes O(m + n) time. This step can be implemented using the same algorithm as sorted arrays algorithm discussed here. Time complexity of this method is O(mLogm + nLogn) which is better than method 1’s time complexity. Method 3 (Use Hashing) Union (list1, list2) Initialize the result list as NULL and create an empty hash table. Traverse both lists one by one, for each element being visited, look the element in hash table. If the element is not present, then insert the element to result list. If the element is present, then ignore it. Intersection (list1, list2) Initialize the result list as NULL and create an empty hash table. Traverse list1. For each element being visited in list1, insert the element in hash table. Traverse list2, for each element being visited in list2, look the element in hash table. If the element is present, then insert the element to result list. If the element is not present, then ignore it. Both of the above methods assume that there are no duplicates. Time complexity of this method depends on the hashing technique used and the distribution of elements in input lists. In practical, this approach may turn out to be better than above 2 methods. Source: http://geeksforgeeks.org/forum/topic/union-intersection-of-unsorted-lists Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Given a linked list, reverse alternate nodes and append at the end Pairwise swap elements of a given linked list by changing links Self Organizing List | Set 1 (Introduction) Merge a linked list into another linked list at alternate positions QuickSort on Singly Linked List Delete N nodes after M nodes of a linked list Design a stack with operations on middle element Swap Kth node from beginning with Kth node from end in a Linked List Tweet Writing code in comment? Please use ideone.com and share the link here. Himanshu Dagar In the third method of Using Hash Table what will be its complexity?? Will it be O(m+n) or O(mn)?? If searching for an element in hash table ,it will take O(n) time then surely it will be done in O(mn) .So is it true?? nanda No. Intersection is quite clear as it says two different traversals. Union would be O(m+n), it is like traversing both the lists at the same time with in one single loop, the loop condition would be to check if both are not nulls. As an alternative, you can traverse the first list, put each in a hash table and output all of them. And then traverse the second and output the ones not present in the first. Nishanth what will be the size of hash array? that is , the integer can be -ve too right?? then how can we hash it?? Sumit Poddar I think there is one more method which will take time complexity of O(n) where n is the number of elements in the list which has maximum number of elements. Below is the code in Java.  
public class SplitList {

    public static void main(String[] args) {
        Node n1 = new Node(20, null);
        Node n2 = new Node(4, n1);
        Node n3 = new Node(15, n2);
        Node n = new Node(10, n3);

        Node m1 = new Node(10, null);
        Node m2 = new Node(2, m1);
        Node m3 = new Node(4, m2);
        Node m = new Node(8, m3);

        split(n, m);
    }

    private static void split(Node n, Node m) {
        Node union = null, inter = null;
        boolean[] itemList1 = new boolean[256];
        Node nTemp = n;
        while (nTemp != null) {
            itemList1[nTemp.data] = true;
            nTemp = nTemp.next;
        }

        while (m != null) {
            if (itemList1[m.data]) {
                inter = insertNodeHead(inter, m);
            } else {
                union = insertNodeHead(union, m);
            }
            m = m.next;
        }

        while (n != null) {
            union = insertNodeHead(union, n);
            n = n.next;
        }

    }

    private static Node insertNodeHead(Node node, Node m) {
        if (node == null) {
            return new Node(m.data, null);
        } else {
            return new Node(m.data, node);
        }

    }
}

class Node {
    int data;
    Node next;

    public Node(int data, Node next) {
        super();
        this.data = data;
        this.next = next;
    }

}
 Please let me know if I am wrong. Arun 1 more method to find the intersection: 1. Sort the 1 list with n elements -> O(nlogn). 2. Use binary search for finding each element of list 2(m) in the sorted list1 -> O(mlogn). Hence we get the results in overall O((m+n)logn) which is better than the Method 2 suggest above using merge sort. gaurav I think we can get union also by this method with little modification Initialize union with first list initialize intersection with null while performing binary search –> 1.element is there in first list–>add to intersection list 2.element not present–>add to union list correct if i am wrong.. Gupta I think it is also asymptotically better than above merge sort method… coz we will select the list to sort which has less number of nodes, by checking countnodes1 and countnodes2… so time complexity will become O((m+n)logn), where n<m, which is better than O(mlogm+nlogn). please correct me if i am wrong.. eragon And how do you do a logn binary search on a singly linked list? linux.kindle how abt. we maintain a BST for implementing intersection of LLs? We can then traverse the tree to get the output. Rediff  
/* Paste your code here (You may delete these lines if not writing code) */
 public class UnionIntersection{ public static Node unionOfTwoLists ( Node a, Node b){ HashMap commons = new HashMap(); Node union = null; while(a!=null){ if(union == null){ union = new Node(a.data); commons.put(a.data, null); } if(!commons.containsKey(a.data) && union != null) { commons.put(a.data, null); union.addAtEnd(a.data); } a = a.link; } while(b!=null){ if(union == null){ union = new Node(b.data); commons.put(b.data, null); } if(!commons.containsKey(b.data) && union != null) { commons.put(b.data, null); union.addAtEnd( b.data); } b = b.link; } return union; } public static Node intersectionOfTwoLists(Node a, Node b){ HashMap commons = new HashMap(); Node intersect = null; while(a!=null){ if(!commons.containsKey(a.data)) commons.put(a.data,null); a = a.link; } while(b!=null){ if(commons.containsKey(b.data)){ if(intersect !=null) intersect.addAtEnd(b.data); else intersect = new Node(b.data); commons.remove(b.data); } b = b.link; } return intersect; } public static void main(String asd[]){ Node a = new Node(22); a.addAtEnd( 2); a.addAtEnd( 15); a.addAtEnd( 22); a.addAtEnd( 11); a.addAtEnd( 19); a.addAtEnd( 25); a.addAtEnd( 12); a.addAtEnd( 98); a.printAll(); Node b = new Node(11); b.addAtEnd( 99); b.addAtEnd( 22); b.addAtEnd( 15); b.addAtEnd( 19); b.addAtEnd( 12); b.addAtEnd( 98); b.addAtEnd( 22); b.addAtEnd( 16); b.addAtEnd( 17); b.printAll(); Node union = unionOfTwoLists(a,b); union.printAll(); Node intersect = intersectionOfTwoLists(a,b); intersect.printAll(); } } public class Node { int data; Node link; Node( int data) { this.data = data; } public void addAtEnd ( int b){ Node a = this; while(a.link!=null) a = a.link; a.link = new Node(b); } public void printAll(){ Node temp = this; while(temp!=null) { System.out.print(temp.data + ” “); temp = temp.link; } System.out.println(); } } GeeksforGeeks @Shekhu: The method 1 assumes that there are no duplicates in the input lists. You can modify the intersection function to following to handle duplicates.  
/* Function to get intersection of two linked lists head1 and head2 */
struct node *getIntersection (struct node *head1, struct node *head2)
{
    struct node *result = NULL;
    struct node *t1 = head1;

    while (t1 != NULL)
    {
        // Note the second condition  
        if (isPresent(head2, t1->data) && !isPresent(result, t1->data))
            push (&result, t1->data);
        t1 = t1->next;
    }

    return result;
}
 Shekhu The first Method given above would not work when the first list is having duplicate values. e.g. List1={1->4->5->1->4} List2={1->4->9->78} Intersection result would be {1->4->1->4} whereas it should have been {1->4} only. Ritesh Dude ,when they are talking about union and intersection assume that the list given will follow the property of a set.  
/* Paste your code here (You may delete these lines if not writing code) */
 http://ostechnoinfo.blogspot.com Nitin Gupta Well i have another solution for this…. First traverse First linked list and build a binary tree (say it BIF) ( for duplicate element , put it on the left of that element ) complexity O(n logn) then traverse second list ( complexity O(n) ) and and take each element of Second list and match to element in BIF tree…if it found then put it in a Intersection Linked and if not found then connect that element in BIF tree. Complexity ( n logn ) On Result you have a Intersection Linked List and A BIF Tree which is Your Union List …Build a Linked List using BIF Tree….. ( Note when you traverse whole BIF tree then delete it) Total complexity O(n log n ) This technique will also handle duplicate element . Using this technique you can reduce complexity to O(n).  
/* Paste your code here (You may delete these lines if not writing code) */
  
/* Paste your code here (You may delete these lines if not writing code) */
 anonymous very nice solution.  
/* Paste your code here (You may delete these lines if not writing code) */
 anonymous what should be intersection & union list when, list1 : 1->2->3 list2 : 2->2->2  
/* Paste your code here (You may delete these lines if not writing code) */
 coder there is one problem if input is like below List 1 :- 4 6 8 9 List 2 :- 5 2 2 10 Now as you said if element is not found then add to the BT of the 1st List so 1st 2 of the List 2 will be added to the Binary Tree so your BT will have 4 6 8 9 2 now for the next 2 of the List 2 element will be found in the BT and that will be added to the intersection (this is wrong) because intersection of both list is {} , not {2}. so better unmatched elements should be added to BT only after list 2 elements are exhausted Shouri Hashing the two sets would yield better time complexity right. GeeksforGeeks @Shouri: Thanks for suggesting the hashing method. We have added it to the original post. Nishanth how to hash when negative integers are there?? what ll be the size of the hash array?? bharatkrayra Create a vector by scanning first list and putting elements in sorted order. Complexity (nlogn) Now scan second list and put its element in sorted order in the previous vector, if element exists put it into second vector (no need to keep it sorted this time). Compelexity (nlogn) Finally you will get first vector in sorted order (UNION) and second vector may be unsorted (who need the sorted one) (INTERSECTION). Overall complexity = (nlogn) If you have integer data in list what you can do is sort first and second list in an array using any sorting technique of O(n). then using merge sort merge procedure to separate out UNION and INTERSECTION in O(n). Complexity = O(n)… (Happy Now!) numid good one! gauravjain I think there is some mistake above in the example. You have swapped union list and intersection list.  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks @gauravjain: Thanks for pointing this out. We have updated the post. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
