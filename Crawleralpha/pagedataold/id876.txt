Construction of Longest Monotonically Increasing Subsequence (N log N) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Construction of Longest Monotonically Increasing Subsequence (N log N) In my previous post, I have explained about longest monotonically increasing sub-sequence (LIS) problem in detail. However, the post only covered code related to querying size of LIS, but not the construction of LIS. I left it as an exercise. If you have solved, cheers. If not, you are not alone, here is code. If you have not read my previous post, read here. Note that the below code prints LIS in reverse order. We can modify print order using a stack (explicit or system stack). I am leaving explanation as an exercise (easy). 
#include <iostream>
#include <string.h>
#include <stdio.h>
using namespace std;

// Binary search
int GetCeilIndex(int A[], int T[], int l, int r, int key) {
   int m;

   while( r - l > 1 ) {
      m = l + (r - l)/2;
      if( A[T[m]] >= key )
         r = m;
      else
         l = m;
   }

   return r;
}

int LongestIncreasingSubsequence(int A[], int size) {
   // Add boundary case, when array size is zero
   // Depend on smart pointers

   int *tailIndices = new int[size];
   int *prevIndices = new int[size];
   int len;

   memset(tailIndices, 0, sizeof(tailIndices[0])*size);
   memset(prevIndices, 0xFF, sizeof(prevIndices[0])*size);

   tailIndices[0] = 0;
   prevIndices[0] = -1;
   len = 1; // it will always point to empty location
   for( int i = 1; i < size; i++ ) {
      if( A[i] < A[tailIndices[0]] ) {
         // new smallest value
         tailIndices[0] = i;
      } else if( A[i] > A[tailIndices[len-1]] ) {
         // A[i] wants to extend largest subsequence
         prevIndices[i] = tailIndices[len-1];
         tailIndices[len++] = i;
      } else {
         // A[i] wants to be a potential condidate of future subsequence
         // It will replace ceil value in tailIndices
        int pos = GetCeilIndex(A, tailIndices, -1, len-1, A[i]);

        prevIndices[i] = tailIndices[pos-1];
        tailIndices[pos] = i;
      }
   }
   cout << "LIS of given input" << endl;
   for( int i = tailIndices[len-1]; i >= 0; i = prevIndices[i] )
      cout << A[i] << "   ";
   cout << endl;

   delete[] tailIndices;
   delete[] prevIndices;

   return len;
}

int main() {
   int A[] = { 2, 5, 3, 7, 11, 8, 10, 13, 6 };
   int size = sizeof(A)/sizeof(A[0]);

   printf("LIS size %d\n", LongestIncreasingSubsequence(A, size));

   return 0;
}
 Exercises: 1. You know Kadane‘s algorithm to find maximum sum sub-array. Modify Kadane’s algorithm to trace starting and ending location of maximum sum sub-array. 2. Modify Kadane‘s algorithm to find maximum sum sub-array in a circular array. Refer GFG forum for many comments on the question. 3. Given two integers A and B as input. Find number of Fibonacci numbers existing in between these two numbers (including A and B). For example, A = 3 and B = 18, there are 4 Fibonacci numbers in between {3, 5, 8, 13}. Do it in O(log K) time, where K is max(A, B). What is your observation? — Venki. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. http://www.piyush.co.nf binary001  

int search(int in [] ,int a[],int i,int j,int x){

	while(i<j){
		int m=i+(j-i)/2;
		if(in[m]>x)
		j=m-1;
		else
		i=m+1;
	}
return i;

}

int lis(int in[],int n){
	
int ans=0;
int a[n];

	for(int i=0;i<n;i++){
		int temp=search( in, a, 0, n-1, in[i] );	
		if(temp==ans){
		a[temp]=in[i];
		ans++;
		}
		else
		a[temp]=in[i];



	}

return ans;
}


 abhishek08aug Trying out something. Shall update later how it performs.  
Given an array of integers: array[n]

1) Create array greatest[n][n]

where,

greatest[i][j]=1, if there is no element in the array between index j+1 and n-1-i which is greater than array[j]
              =0, if there is atleast one element in the array between index j+1 and n-1-i which is greater than array[j]
              =-1, if j>n-1-i

2) k=n-1, l=0, last_added_element=Some number lower than all integers in the array

while(k>0 && l<=n-1)
  if greatest[k][l]==1
    if k-1>=0 && greatest[k-1][l]!=1
      add array[l] in LIS
      last_added_element=array[l]
      k=k-1
      l=l+1
    else if k-1>=0 && greatest[k-1][l]==1
      if array[l+1]>last_added_element
        k=k-2
        l=l+2
      else
        add array[l] in LIS
        last_added_element=array[l]
        k=k-1
        l=l+1
      end if
    else if k==0 
      add array[l] in LIS
      last_added_element=array[l]     
      k=k-1
      l=l+1
    end if
  end if
end for
 abhishek08aug Here is the implementation of above algo with some fixes:  
#include<stdio.h>
#include<stdlib.h>

int LongestIncreasingSubsequence(int array[], int n) {
  int ** greatest=(int **)malloc(sizeof(int *)*n);
  int i;

  for(i=0; i<n; i++) {
    *(greatest+i)=(int *)malloc(sizeof(int)*n);
  }

  int j, largest_on_right;
  for(i=0, largest_on_right=-9999; i<n; i++) {
    for(j=n-1; j>=0; j--) {
      if(j>n-1-i) {
        greatest[i][j]=-1;  
      } else if(array[j]>largest_on_right) {
        greatest[i][j]=1;
        largest_on_right=array[j];
      } else if(array[j]<=largest_on_right) {
        greatest[i][j]=0;
      }
    }
    largest_on_right=-9999;
  }

  /*
  printf("Greatest matrix\n");
  for(i=0; i<n; i++) {
    for(j=0; j<n; j++) {
      printf("%*d ", 2, greatest[i][j]);
    }
    printf("\n");
  }
  printf("\n");
  */

  int k=n-1, l=0, last_added_element=-9999, lis_size=0;
  while(k>=0 && l<=n-1) {
    if(greatest[k][l]==1) {
      if((k-1>=0 && greatest[k-1][l]!=1) || k==0) {
        if(array[l]>last_added_element) {
          printf("%d ", array[l]);
          last_added_element=array[l];
          k=k-1;
          l=l+1;
          lis_size++;
        } else {
          k=k-1;
          l=l+1;          
        }
      } else if(k-1>=0 && greatest[k-1][l]==1) {
        if(array[l+1]>last_added_element) {
          k=k-1;
          l=l+1;
        } else {
          printf("%d ", array[l]);
          last_added_element=array[l];
          k=k-1;
          l=l+1;
          lis_size++;
        }
      }
    }
  }
  return lis_size;
}

int main() {
   int array[] = {2, 5, 3, 7, 11, 8, 10, 13, 6};
   int n = sizeof(array)/sizeof(array[0]);
 
   printf("\nLIS size %d\n", LongestIncreasingSubsequence(array, n));
 
   return 0;
}
 2 3 7 8 10 13 LIS size 6 anirudh beria won’t the run time be n^2 because of search for min and max elements ?? I think a maximum finding segment tree will give nlogn sol ( possible if numbers are less than 10^6). http://www.linkedin.com/in/ramanawithu Venki @Anirudh, please be more specific. Where are we searching for min and max? ashish #include void longest(int *,int); void main() { int n,i,ary[50]; printf(“enter the no of term:- “); scanf(“%d”,&n); for(i=0;i<n;i++) scanf("%d",&ary[i]); longest(ary,n); } void longest(int ary[],int n) { int i,j,l=0,maxlen=0; int start=0,s; for(i=0;i=ary[i+1]) { start=i+1; l=0; } else l++; if(maxlen<l){ maxlen=l; s=start;} } int m=s+maxlen; for(i=s;i<=m;i++) printf("%d ",ary[i]); } suresh Why we need array prevIndices when tailIndices stores the Indices coresponding to the elements of the LIS??  
/* Paste your code here (You may delete these lines if not writing code) */
 vivek How to do the fibbonaci question here ?  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.google.com/profiles/ramanawithu Venki It is easy and can be done in O(1) time. Here is hint, at what rate Fibonacci numbers increase? What is the relation between their growth rate and decimal numbers? Hope you will get the answer easily. vivek I m still not able to figure out the soln. I was thinking to find the nearest fibonacci # to A. And then use those 2 fib nos. to find other fibs in the range A to B. How is O(1) achieved ? Using some Fib nos. related formula ?  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.google.com/profiles/ramanawithu Venki Okay, here it is. What do we need? Number of fibonacci numbers in between A and B. If we can figure out which position does A and B occupies in the Fibonacci sequence, we can easily find the required result. Fibonacci numbers grow at the rate approximated by golden ration, i.e. F(n) = Phi^n, where Phi = 1.618. It means, to calculate (n+1) Fibonacci number in same time of n-th number on the same environment, we need 61.8% faster machine. Here, A and B corresponds to F(n1) and F(n2). We can easily find n1 and n2 value, and followed by difference. Here is my code,  
int FibonacciInBetween(long unsigned a, long unsigned b) {
    int x = (int)(4.785 * log10((double)a));
    int y = (int)(4.785 * log10((double)b));

    return abs(y-x);
}
 sachin How did you get 4.785?I am not getting how you are getting the formula? http://www.linkedin.com/in/ramanawithu Venki log 10 to the base 1.618 = 4.785. Easy one, I expected the reader to know this. Ronny @venki @geeksforgeeks Should not the returned value be abs(y-x)-1 since the question asks for number of fibonacci numbers BETWEEN a and b For a fibonacci series starting with 0, 0 1 1 2 3 5 8 13 21 34 55 …. pos of 5 is 6 pos of 8 is 7 the above method returns difference in position of a and b. for the above case it will return 1, but there are no fibonacci numbers BETWEEN 5 and 8. So the return value should be abs(y-x)-1. Kindly update the comment to avoid confusion. vivek What is the solution to problem: >> Find number of Fibonacci numbers existing in between these two numbers (including A and B). >> asked above.  
/* Paste your code here (You may delete these lines if not writing code) */
 nomind memset(tailIndices, 0, sizeof(tailIndices[0])*size); memset(prevIndices, 0, sizeof(prevIndices[0])*size); replace these two lines with memset(tailIndices, -2, sizeof(tailIndices[0])*size); memset(prevIndices, -2, sizeof(prevIndices[0])*size); then it will work fine http://www.linkedin.com/in/ramanawithu Venki Thanks. In my code I have initialized it to 0xFF (effectively -1). Missed here. Updated code, it will work fine. nomind input int A[] = { 2, 5,1, 3, 7, 11, 8, 10, 13, 6 } output LIS of given input 13 10 8 7 3 1 2 LIS size 6 output is wrong. rafi But just try this input :  
int A[] = { 26, 13, 24, 25, 28, 10, 15, 4, 7, 21, 20, 23, 19, 22, 30, 29, 8, 27, 11, 1, 6, 3, 14, 16, 17, 5, 18, 2, 9, 12 };
 And you have this: LIS of given input 18 17 16 14 11 8 7 4 26 LIS size 8 So you have to set the sentinel each time you renew tailIndices[0]. Venki @Rafi, we need a delimiter to recognize end of trace back. I have used -1 in location 0 as sentinel. I got the following output on my machine.  
Input:
26  13  24  25  28  10  15   4   7  21  20  23  19  22  30  29   8  27  11   1   6   3  14  16  17   5  18   2   9  12

Output:
Length of Longest Increasing Subsequence is 8, and it is
4   7   8  11  14  16  17  18
 Note that there is possibility of many such LIS of same length. Venki An email comment to author: Comment by Rafi: You forget to reset prevIndices here : if( A[i] < A[tailIndices[0]] ) { // new smallest value tailIndices[0] = i; There should be a : prevIndices[i] = -1; BTW thank for your 2 posts about LIS they're just amazing. Venki @Rafi, this is not required. If you observe, the location prevIndices[0] acts as sentinel to stop trace back. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
