Find the smallest positive number missing from an unsorted array - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find the smallest positive number missing from an unsorted array You are given an unsorted array with both positive and negative elements. You have to find the smallest positive number missing from the array in O(n) time using constant extra space. You can modify the original array. Examples 
 Input:  {2, 3, 7, 6, 8, -1, -10, 15}
 Output: 1

 Input:  { 2, 3, -7, 6, 8, 1, -10, 15 }
 Output: 4

 Input: {1, 1, 0, -1, -2}
 Output: 2 
 Source: To find the smallest positive no missing from an unsorted array A naive method to solve this problem is to search all positive integers, starting from 1 in the given array. We may have to search at most n+1 numbers in the given array. So this solution takes O(n^2) in worst case. We can use sorting to solve it in lesser time complexity. We can sort the array in O(nLogn) time. Once the array is sorted, then all we need to do is a linear scan of the array. So this approach takes O(nLogn + n) time which is O(nLogn). We can also use hashing. We can build a hash table of all positive elements in the given array. Once the hash table is built. We can look in the hash table for all positive integers, starting from 1. As soon as we find a number which is not there in hash table, we return it. This approach may take O(n) time on average, but it requires O(n) extra space. A O(n) time and O(1) extra space solution: The idea is similar to this post. We use array elements as index. To mark presence of an element x, we change the value at the index x to negative. But this approach doesn’t work if there are non-positive (-ve and 0) numbers. So we segregate positive from negative numbers as first step and then apply the approach. Following is the two step algorithm. 1) Segregate positive numbers from others i.e., move all non-positive numbers to left side. In the following code, segregate() function does this part. 2) Now we can ignore non-positive elements and consider only the part of array which contains all positive elements. We traverse the array containing all positive numbers and to mark presence of an element x, we change the sign of value at index x to negative. We traverse the array again and print the first index which has positive value. In the following code, findMissingPositive() function does this part. Note that in findMissingPositive, we have subtracted 1 from the values as indexes start from 0 in C. 
/* Program to find the smallest positive missing number */
#include <stdio.h>
#include <stdlib.h>

/* Utility to swap to integers */
void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a   = *b;
    *b   = temp;
}

/* Utility function that puts all non-positive (0 and negative) numbers on left 
  side of arr[] and return count of such numbers */
int segregate (int arr[], int size)
{
    int j = 0, i;
    for(i = 0; i < size; i++)
    {
       if (arr[i] <= 0)  
       {
           swap(&arr[i], &arr[j]);
           j++;  // increment count of non-positive integers
       }
    }

    return j;
}

/* Find the smallest positive missing number in an array that contains
  all positive integers */
int findMissingPositive(int arr[], int size)
{
  int i;

  // Mark arr[i] as visited by making arr[arr[i] - 1] negative. Note that 
  // 1 is subtracted because index start from 0 and positive numbers start from 1
  for(i = 0; i < size; i++)
  {
    if(abs(arr[i]) - 1 < size && arr[abs(arr[i]) - 1] > 0)
      arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1];
  }

  // Return the first index value at which is positive
  for(i = 0; i < size; i++)
    if (arr[i] > 0)
      return i+1;  // 1 is added becuase indexes start from 0

  return size+1;
}

/* Find the smallest positive missing number in an array that contains
  both positive and negative integers */
int findMissing(int arr[], int size)
{
   // First separate positive and negative numbers
   int shift = segregate (arr, size);

   // Shift the array and call findMissingPositive for
   // positive part
   return findMissingPositive(arr+shift, size-shift);
}

int main()
{
  int arr[] = {0, 10, 2, -10, -20};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  int missing = findMissing(arr, arr_size);
  printf("The smallest positive missing number is %d ", missing);
  getchar();
  return 0;
}
 Output: 
The smallest positive missing number is 1 Note that this method modifies the original array. We can change the sign of elements in the segregated array to get the same set of elements back. But we still loose the order of elements. If we want to keep the original array as it was, then we can create a copy of the array and run this approach on the temp array. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Sumit Monga Another solution : //this calculates maximum value in the array int max(int arr[],int n) { int max = arr[0]; for(int i = 1; i max) max = arr[i]; return max; } //this function returns the minimum missing positive integer int min_positive_missing(int arr[],int n) { //if all positive occur between 1 to n then ans will be n+1 int max_val = max(arr,n)+ 1; int i; for(i = 0; i 0 && (arr[i]%max_val) > 0 && (arr[i]%max_val) <= n) { if(arr[(arr[i]%max_val)-1] < 0) arr[(arr[i]%max_val)-1] = 0; arr[(arr[i]%max_val)-1] += max_val; } } for(i = 0; i < n; i++) if(arr[i] < max_val) return (i+1); //control reaches here meaning every number between 1 and n is present return (n+1); } devilsDen My O(n) time solution with O(1) space with very simple logic. #include int smallestMissing(int arr[], int size){ int min= 1; int probableMin= 2; int i; for(i=0;i0){ if(arr[i]<min && arr[i]!=1){ min = arr[i]-1; probableMin = arr[i]+1; } else if(arr[i]==min) min = probableMin; else if(arr[i]==probableMin) probableMin= arr[i]+1; } } return min; } int main() { int arr[] = {2,3,7,6,8,-1,-10,15}; int arr_size = sizeof(arr)/sizeof(arr[0]); int missing = smallestMissing(arr, arr_size); printf("The smallest positive missing number is %d ", missing); getchar(); return 0; } vinod95300 This question cannot be solved in O(n) Space if range of integers is not given vamshi Why are we seperating negative and possitive…instead of that we can choose one number like 99999…. …for (i=0;i<n;i++) { if(a[i]=n) continue; a[a[i]] =99999 } In the next scan…find smallest index in which a[index] != 99999…..Please correct me if iam missing anything… me.abhinav Incomplete information: There is no comment about the range of elements in the array. Suppose if the range is -100 to +100 and the size of array is 10 then this method won’t work! me.abhinav Sorry my bad….got it…. abhishek08aug Intelligent  
/* Paste your code here (You may delete these lines if not writing code) */
 ravisingh3531 correct me if i am wrong…but it can be solve by creating a BST. create BST and takeout number in in order as the first number which is not consecutive in inorder traversal ..print that no..  
/* Paste your code here (You may delete these lines if not writing code) */
 Aditya J That is O(nlogn) time and O(n) space BidhanPal To find the smallest positive number, run a loop from o to n-1, every time try to place the element at the index same of its value. exclude the elements which are already equal to index value or out of the range of array index ( less than 1 or greater than n-1). After placing all the element in its proper position run a loop to check which is the first position where value is not equal to the index. If none of elements are missing then n is the first element which is missing.  
int findSmallestMissingNumber(int a[], const int n)
{
    int i = 0;

    //Place all element at the position same as its value
    while (i<n)
    {
        //Skip the element if its already in correct position 
        //Or its value is out of array index range
        //Consider zero is not the positive value
        if (a[i] < 1 || a[i] > n-1 || a[i] == i)
            i++;
        //Swap the element with it's proper position
        else
            swap(&a[i],&a[a[i]]);
    }
    
    for (i=1; i<n; i++)
    {
        if (a[i] != i)
            return i;
    }

    return n;
}
 anonymous Super Ganesh You can find java code here: import java.util.Arrays; /** * You are given an unsorted array with both positive and negative elements. You have to find the smallest positive number missing from the array in O(n) time using constant extra space. You can modify the original array. * Example * Input: { 2, 3, -7, 6, 8, 1, -10, 15 } * Output: 4 * @author GAPIITD * */ public class SmallestPositiveNumberMissingFromAnUnsortedArray { public static void main(String[] args) { int arr[] = {1, 1, 0, -1, -2}; int shiftPos = shiftNegativeNos(arr); System.out.println(findMissingPositiveNo(Arrays.copyOfRange(arr, shiftPos, arr.length))); } // puts all non-positive (0 and negative) numbers on left side of arr[] // and return count of such numbers private static int shiftNegativeNos(int[] arr) { int i = 0; while (arr[i] <= 0) i++; for (int j = i+1; j < arr.length; j++) { if (arr[j] <= 0) { int temp = arr[j]; arr[j] = arr[i]; arr[i] = temp; i++; } } return i; } // Find the smallest positive missing number in an array that contains all positive integers private static int findMissingPositiveNo(int[] arr) { // Mark arr[i] as visited by making arr[arr[i] – 1] negative. Note that // 1 is subtracted because index start from 0 and positive numbers start from 1 for (int i = 0; i < arr.length; i++) { if ((Math.abs(arr[i]) – 1) < arr.length && arr[Math.abs(arr[i]) – 1] > 0) { arr[Math.abs(arr[i])-1] = -arr[Math.abs(arr[i])-1]; } } // Return the first index value at which number is positive for (int i = 0; i < arr.length; i++) { if (arr[i] > 0) return i+1; } return -1; } } arnavawasthi Your solution return -1 for { 2, 0, 1, -1, -2 }; Ashwin what about this case? {-11,-10,-15,12,13,14}. The smallest positive number here missing is 1 right? If we apply your solution, we will get 4 which is incorrect? Can you explain if I am missing anything here? coderAce Would like to point out an optimisation. Right now even if A[i] and A[j] are the same, they get swapped. So please include an if statement before the swap method call inside the for loop of segregate. Basically the for loop in segregate should like the following: int j = 0, i; for(i = 0; i < N; i++) { if (A[i] <= 0) { if(i!=j)//To avoid swapping the same elements { swap_ele(&A[i], &A[j]); } j++; // increment count of non-positive integers } } You can argue that at every step it performs a check, hence O(n) checks reqd. But its way lighter than O(n) swaps which involves 3 assignments, 3*N in total coderAce Anyways, nice soln..the first time I was asked this problem in an interview(by Samsung, 2 years back I guess) I gave the exact solution except that my implementation of the Segregate method was O(n^2) and I claimed my main algo is O(n). Unfortunately my interviewer caught me and after some head cracking I could come up with an O(n) algo. This was the O(n^2) one I wrote int j=N-1; for(int i=0;i<j;i++) { if(A[i]<=0) { while(A[j]<=0){j–;} swap_ele(&A[i],&A[j–]); } } return j+1; sreeram   int i=0; for(i=0;i<n ;i++) { if(i< n && a[i] != i) swap(&a[i],&a[a[i]]) } for(i=0;i<n;i++) if(a[i] != i ) return i nitin gupta there is serious mistake in your code .. here [if(abs(arr[i]) – 1 0) arr[abs(arr[i]) – 1] = -arr[abs(arr[i]) – 1];] index 0 in your ex. is 0 so first condition arr[abs(arr[i])-1]>0 => arr[0-1]=>arr[-1] core dump Kartik There is no problem in the code. Please take a closer look, the function findMissingPositive() is called only for an array with positive values. 0 cannot be there in array. See the following two calls. // First separate positive and negative numbers int shift = segregate (arr, size); // Shift the array and call findMissingPositive for // positive part return findMissingPositive(arr+shift, size-shift); lohith public class SmallestPositiveMissingNumber { public static void main(String str[]){ int array[] = { 2, 3, -7, 6, 8, 1, -10, 15 }; int i=0; int answer=0; while(array[i]<0)i++; int minumum = array[i]; int maximum = array[i]; for(int j=i;j<array.length;j++){ if(array[j]>0 && minumum>array[j]) minumum = array[j]; if(array[j]>0 && maximum<array[j]) maximum=array[j]; } boolean Array[] = new boolean[maximum]; if(minumum!=1) answer=1; else{ for(int k=0;k<array.length;k++){ if(array[k] >= 0) Array[array[k]-1]=true; } for(int k=minumum;k<maximum;k++){ if(Array[k]==false){ answer=k+1; break; } } } System.out.println(answer); } } NIpun #include #include #include main() { int a[]={-1,0, 1, 1, 2, 3,4}; int n = 7 , i; for(i=0;i=0 &&a[i]<=n) a[a[i]] = INT_MIN; } for(i=1;i<=n;i++) if(a[i]!=INT_MIN) { printf("%d\n",i); break; } return 0; } NIpun Works great for repeated nos. #include<stdio.h> main() { int a[]={-1, 1, 1, 2, 3}; const int n = 5; int b[n+1]={0}; int i; for(i=0;i<=n;i++) { if(a[i]>=0 &&a[i]<=n) b[a[i]]++; } for(i=1;i<=n;i++) if(b[i]==0) { printf("%d\n",i); break; } return 0; } cs But I think this will work only if numbers are in range 1-n.  
/* Paste your code here (You may delete these lines if not writing code) */
 Game Guys, I am sorry to point you “again”, that “modifying” the array is equivalent to O(n) space usage. It would *really* make more sense if you guys use C++ as the coding language. With that said, the signature of the function would be int findMissingPositive(const vector& numbers); and the function not using any memory of order n. The approach you have can be scrutinized heavily in any standard programming interview. pkm do you have a better approach for this question? dees what happens in the program if i/p is {50,-10,20,-20,70} kartik The program will print 1. AnnabellChan why 1? I think it should be 21 prakash #include #include #define max 100 int array[max]; int min=INT_MAX; main() { int n,data,i=1; scanf(“%d”,&n); //total no of terms while(n–) { scanf(“%d”,&data); if(data>0) array[data]=data; } while(array[i]!=0) i++; printf(“%d\n”,i); return 0; } plz any one tell me what would be the time complexit of this code…. tutum both time and space complexity is O(n) ..same code as i mentioned below roshu  
public static int getlowest(int[] arr){
            int counter=1;
            for(int i=0;i<arr.length;i++){
                if(arr[i] < counter)
                        continue;
                if(arr[i]==counter) counter++;
                else
                    return counter;
                        
            }
            return 0;
        }
 tutum think if the array is sorted . tutum i think its better than other in terms of space complexity… if you find anything incorrect in this code . tell me  
/* #include<stdio.h>

int main()
{
    int i=0,size;
    //int A[]={2, 3, 7, 6, 8, -1, -10, 15};
    int A[]={2, 3, 7, 6, 8, -1, -10, 15};
    size=8;
    int B[8]={};
    for(i=0;i<size;i++){
                     if(A[i]<8 && A[i]>0){
                                B[ A[i]-1 ]=1;
                     }
    }
    for(i=0;i<size;i++){
                     if(B[i]==0){
                                 printf("%d",i+1);
                                 i=size;
                     }
    }
    return 0;
}
 */
 hem agnihotri make a complete scan of array and find minimum and second minimum element (only both positive) of array and then if minimum-1>second minimum then minimum-1 is acceptable  
/* Paste your code here (You may delete these lines if not writing code) */
 rathi how can u say this . think before write something as a comment as solution. what will be the answer in case 1 2 3 4 6 7 m=1 sm=2 0>2 so ans is 0 but ans is 5  
/* Paste your code here (You may delete these lines if not writing code) */
 nijju #include #include int small_positive(int A[16],int n) // Time= O(n) Space=O(1) { int i; for(i=0;i<n;i++) if( A[i]n ) A[i]=n; A[n]=n; for(i=0;i 0 && abs(A[i]) <n) A[abs(A[i])] = -A[abs(A[i])]; for(i=1;i0 || A[i] == n) { printf(“\n\nOutput : %d”,i); return 0; } printf(“\n\nOutput : %d”,n); return 0; } int main() { int A[16],n,x,i; printf(“\nEnter Size of Array :”); scanf(“%d”,&n); printf(“\nEnter unsorted array(space saperated) : \n”); for(i=0;i<n;i++) scanf("%d",&A[i]); small_positive(A,n); return 0; } nijju #include #include int small_positive(int A[16],int n) // Time= O(n) Space=O(1) { int i; for(i=0;i<n;i++) if( A[i]n ) A[i]=n; A[n]=n; for(i=0;i 0 && abs(A[i]) <n) A[abs(A[i])] = -A[abs(A[i])]; for(i=1;i0 || A[i] == n) { printf(“\n\nOutput : %d”,i); return 0; } printf(“\n\nOutput : %d”,n); return 0; } int main() { int A[16],n,x,i; printf(“\nEnter Size of Array :”); scanf(“%d”,&n); printf(“\nEnter unsorted array(space saperated) : \n”); for(i=0;i<n;i++) scanf("%d",&A[i]); small_positive(A,n); return 0; } chandan prakash Hi, this is another approach taking O(n) time complexity with no extra space .  
package pack;

public class SmalstPositivNoMissin {

	/**
	 *You are given an unsorted array with both positive and negative elements. You have to find the smallest positive number missing from the array in O(n) time using constant extra space.
Eg:
Input = {2, 3, 7, 6, 8, -1, -10, 15}
Output = 1

Input = { 2, 3, -7, 6, 8, 1, -10, 15 }
Output = 4
	 */
	
	public static void main(String[] args) {


		int[] arr={2, 3, 7, 6, 8, -1, -10, 15};  //{ 2, 3, -7, 6, 8, 1, -10, 15 };		
		System.out.println("smallest +ve No:  "+getSmallestNo(arr));
	}
	public static int getSmallestNo(int[] a)
	{		if(a==null)
			return(-1);
		
		int i=0;
		int n=a.length;
		
		while(i<n)
		{
			if(a[i]==i+1)
				i++;
			else if(a[n-1]==n)
				n--;
			else if(a[i]<=0 || a[i]>n)
			{
				a[i]=a[n-1];
				n--;
			}
			else
			{
				int tmp=a[a[i]-1];
				System.out.println("tmp=="+tmp);
				for(int j=0;j<n;j++)
					System.out.print(a[j]+"   ");
				a[a[i]-1]=a[i];
				a[i]=tmp;
			}
			System.out.println("length=="+n);
		}
		
		return i+1;
	}
	
}

 Duke /* Paste your code here (You may delete these lines if not writing code) */ #include using namespace std; int misNum(int *arr) { int num=10000000; int len=sizeof(arr)/sizeof(int); for(int i=0;i0)&&(arr[i]!=arr[i+1])&&(arr[i+1]!=arr[i]+1)) { int small=arr[i]+1; cout<<"i= "<<i<<" small= "<<small<<endl; if(small<num) num=small; cout<<"i= "<<i<<" num= "<<num; } } return num; } int main() { int arr[]={ 2, 3, -7, 6, 8, 1, -10, 15}; int x= misNum(arr); cout<<"\n"<<x; return 0; } Laddoo To make this fast..We can add one extra step before applying any other method.. As, We can search for 1 with Binary Search in log(N) Time..Then, any other method..It would cause same complexity as O(N) in Worst Case..but will improve the average case.. GeeksforGeeks @Laddoo: Binary Search can not be applied here as the input array is not sorted. Vivek Prakash We can actually apply binary search after segregation. We know that all negative numbers are at the beginning and all positive numbers are at the end. This makes it perfect enough for binary search. If you search for 0 (or 1) in this array, you will end up either at the first positive number or last negative number, based on how you implement it. For details you can read this tutorial at top coder: http://community.topcoder.com/tc?module=Static&d1=tutorials&d2=binarySearch This is better than the given alogorithm, even though it is still O(n), because it is O(n + log n) where-as the one given is O(2n).  
/* Paste your code here (You may delete these lines if not writing code) */
 Venki @Vivek, We can apply binary search, but that would need another array with same values i.e. O(n) auxiliary space, right? I duplicated original array, and applied binary search, its working. kartik @Vivek & @Venki I still don’t get it. How can we apply binary search. Could you share the code or algo, please. rashmi what if we have repeated nos i.e -1 1 1 2 3 GeeksforGeeks @rashmi: The approach works for repeated numbers as well. Take a closer look at the following condition.  
if(abs(arr[i]) - 1 < size && arr[abs(arr[i]) - 1] > 0)
  arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1];
 We change the sign of a number only if it is positive. So we make sure that the value at index arr[i] will not become positive if arr[i] is present. Please let us know if it clarifies your doubt. satya avv At First in the explanation , you said the first negative number, now in the code you have written for first Positive. The thing is this algo gives the maximum missing positive number which is min in the list – 1. Basically this algo computes the minimum of the list.  
/* Paste your code here (You may delete these lines if not writing code) */
 GeeksforGeeks @satya avv: Please take a closer look, both code and algo say that the first index at which the value is positive should be looked for. The algo computes the smallest positive number as we ignore the negative numbers by segregating the positive and negative numbers as a preprocessing step. Please let us know if you still have doubts. If you feel something is incorrect, you can quote it in your comment. satya avv Hi I am sorry for the comment. Yes it works the same.  
/* Paste your code here (You may delete these lines if not writing code) */
 Keshav This is a cool method. But I think it will work only if 1. All +ve numbers (non zero) are in the range of 0 to n-1 where n is the number of +ve integers. Otherwise, arr[abs(arr[i]) – 1] may be out of bounds! You might want to call this out. GeeksforGeeks @Keshav: This should work for all cases. We can easily see that the smallest positive number will always be in range {1, 2, … n+1}. The maximum possible value that we can get is n+1. For example, for an array of size 4, the maximum possible value of the smallest positive missing number will be 5. We will get 5 for array {1, 2, 3, 4} or {4, 2, 3, 1}. In the above code, we are checking for 1 to n by marking the value at their index negative. Finally, we return n+1 if we don’t find a positive value. So we have considered all possible values. Please let us know if it makes sense now.  
/* Paste your code here (You may delete these lines if not writing code) */
 Ashwin what about this case? {-11,-10,-15,12,13,14}. The smallest positive number here missing is 1 right? If we apply your solution, we will get 3 which is incorrect? Can you explain if I am missing anything here? kumar It seems that following statement is wrong “print the first index which has negative value.” it should be print the first index which has value. GeeksforGeeks @Kumar: Thanks for pointing this out. We have corrected it. kumar Thanks value*=positive value  
/* Paste your code here (You may delete these lines if not writing code) */
 kumar It seems that following statement is wrong “print the first index which has negative value.” it should be print the first index which has value.  
/* Paste your code here (You may delete these lines if not writing code) */
 jogi good work. rock on! GreatIndianAss The solution below is obviously O(1) in space complexity. To prove that it is O(n) in time complexity, it can be seen easily that I never visit an element more than twice, so it would traverse the array twice before all required elements are at their required location. Then, one more traverse is required to find the answer. Hence, O(n) GreatIndianAss I am basically use the array itself as the hash-table. Since, solution would be in the range [0,sizeOfArray-1], the array itself would suffice to find the solution. Basically, while going through the array, I am moving the element to its correct location in array based on the value as the hash-key itself. So, 2 -> index 2, 5 -> index 5, and so on. For elements, which are not in range [0,sizeOfArray-1], I do not care, as they cannot be the answer.  
#include <stdio.h>

int main()
{
int A[] = {2, 3, 7, -6, 0, 1, 4, 5};
int size = 8;
int previousValue = -1;
int currentIndex = 0;
int currentValue = A[currentIndex];
int nextIndex = currentIndex + 1;
bool isChaining = false;

while (nextIndex <= size)
{
if (currentValue != currentIndex &&
currentValue > -1 &&
currentValue < size)
{
isChaining = true;
A[currentIndex] = previousValue;
previousValue = currentValue;
currentIndex = currentValue;
currentValue = A[currentIndex];
}
else
{
if (isChaining)
{
A[currentIndex] = previousValue;
isChaining = false;
}

currentIndex = nextIndex++;
previousValue = -1;
currentValue = A[currentIndex];
}
}

int x;
for (x = 0 ; x < size; x++)
{
if (A[x] != x)
{
printf ("%d\n", x);
break;
}
}
if (x == size)
{
printf ("%d\n", x);
}

return 0;


}
 dheeraj Super like! Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
