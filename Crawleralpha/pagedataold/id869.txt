Find four elements that sum to a given value | Set 2 ( O(n^2Logn) Solution) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find four elements that sum to a given value | Set 2 ( O(n^2Logn) Solution) Given an array of integers, find all combination of four elements in the array whose sum is equal to a given value X. For example, if the given array is {10, 2, 3, 4, 5, 9, 7, 8} and X = 23, then your function should print “3 5 7 8″ (3 + 5 + 7 + 8 = 23). Sources: Find Specific Sum and Amazon Interview Question We have discussed a O(n^3) algorithm in the previous post on this topic. The problem can be solved in O(n^2Logn) time with the help of auxiliary space. Thanks to itsnimish for suggesting this method. Following is the detailed process. Let the input array be A[]. 1) Create an auxiliary array aux[] and store sum of all possible pairs in aux[]. The size of aux[] will be n*(n-1)/2 where n is the size of A[]. 2) Sort the auxiliary array aux[]. 3) Now the problem reduces to find two elements in aux[] with sum equal to X. We can use method 1 of this post to find the two elements efficiently. There is following important point to note though. An element of aux[] represents a pair from A[]. While picking two elements from aux[], we must check whether the two elements have an element of A[] in common. For example, if first element sum of A[1] and A[2], and second element is sum of A[2] and A[4], then these two elements of aux[] don’t represent four distinct elements of input array A[]. Following is C implementation of this method. 
#include <stdio.h>
#include <stdlib.h>

// The following structure is needed to store pair sums in aux[]
struct pairSum
{
    int first; // index (int A[]) of first element in pair
    int sec; // index of second element in pair
    int sum;  // sum of the pair
};

// Following function is needed for library function qsort()
int compare (const void *a, const void * b)
{
    return ( (*(pairSum *)a).sum - (*(pairSum*)b).sum );
}

// Function to check if two given pairs have any common element or not
bool noCommon(struct pairSum a, struct pairSum b)
{
    if (a.first == b.first || a.first == b.sec ||
            a.sec == b.first || a.sec == b.sec)
        return false;
    return true;
}


// The function finds four elements with given sum X
void findFourElements (int arr[], int n, int X)
{
    int i, j;

    // Create an auxiliary array to store all pair sums
    int size = (n*(n-1))/2;
    struct pairSum aux[size];

    /* Generate all possible pairs from A[] and store sums
       of all possible pairs in aux[] */
    int k = 0;
    for (i = 0; i < n-1; i++)
    {
        for (j = i+1; j < n; j++)
        {
            aux[k].sum = arr[i] + arr[j];
            aux[k].first = i;
            aux[k].sec = j;
            k++;
        }
    }

    // Sort the aux[] array using library function for sorting
    qsort (aux, size, sizeof(aux[0]), compare);

    // Now start two index variables from two corners of array
    // and move them toward each other.
    i = 0;
    j = size-1;
    while (i < size && j >=0 )
    {
        if ((aux[i].sum + aux[j].sum == X) && noCommon(aux[i], aux[j]))
        {
            printf ("%d, %d, %d, %d\n", arr[aux[i].first], arr[aux[i].sec],
                                     arr[aux[j].first], arr[aux[j].sec]);
            return;
        }
        else if (aux[i].sum + aux[j].sum < X)
            i++;
        else
            j--;
    }
}

// Driver program to test above function
int main()
{
    int arr[] = {10, 20, 30, 40, 1, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    int X = 91;
    findFourElements (arr, n, X);
    return 0;
}
 Output: 20, 1, 30, 40 Please note that the above code prints only one quadruple. If we remove the return statement and add statements “i++; j–;”, then it prints same quadruple five times. The code can modified to print all quadruples only once. It has been kept this way to keep it simple. Time complexity: The step 1 takes O(n^2) time. The second step is sorting an array of size O(n^2). Sorting can be done in O(n^2Logn) time using merge sort or heap sort or any other O(nLogn) algorithm. The third step takes O(n^2) time. So overall complexity is O(n^2Logn). Auxiliary Space: O(n^2). The big size of auxiliary array can be a concern in this method. Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. atul Should it be O(n^2 Log (n^2) ) not O(n^2 Log n) as size of array is n^2 not n The second step is sorting an array of size O(n^2). Sorting can be done in O(n^2Logn) time. bani log (n^2) => 2 log n => log n I think now its clear to you tczf1128 Time complexity should be O(n^2) akshat gupta @geeksforgeeks Another Solution: Constant Space Let the 4 index be i,j,k,l sort : T(n) =O(n lgn) for(i=0 to n-3)//Index of First Element T(n):O(n) …. j = i+1; //Choosing second …. k = n-1; //Choosing Last …. while(j ...... last=sum-arr[i]-arr[j]-arr[k] ...... if(last< arr[j]) //=>We Subtracted More …….. k–; …… else if(last>arr[k]) //=>We Need To Subtract More …….. j++; …… else //=>last Lies in Bracket [j+1,k-1] …….. l=BinarySearch(arr,j+1,k-1,last); T(n):O(lg n) ………. if(l!=-1) ……….. print(arr[i],arr[j],arr[k],arr[l]); ………. k–; Time Analysis: O(n^2.lg n) Space : O(1) AMIT the complexity can be reduced to o(n^2) if we use hashing instead of step 2 and 3 in the given algo AMIT i mean no need to sort the array and search for the element…hashmap will serve the purpose chkzz There is no need to find all the pairs. Just find all the pairs whose sum < x.(if a pair sum=x then anything added to this sum is obviously going to be greater than x.) this will reduce the size of aux array. /* Paste your code here (You may delete these lines if not writing code) */ abhishek08aug Intelligent Mohamed Gaber There is a problem in this solution in the last step (j–) it decrements j even if the sum was equal to X which produces this problem in the following test case : arr = [1,2,4,5,6] aux = [3,5,6,6,7,7,8,9,10] X = 14 assume that the first 6 came from summing 2+4 and the second 6 from summing 1+5. The correct answer should be 8 + 6(second one) in the iteration where i points to the first 6 and j points to 8 sum is 14 but condition noCommon will fail as 6 made of (2+4) and 8 made of (2+6) (the same 2). In this code , it decrements j to points to 7 that will produce no solution although there is a solution. I hope you got the case. GeeksforGeeks @Mohamed Gaber: We tried the code for your case and seems to be working fine. See this sample run. Aayush The code might have the problem he said. The link you gave showed correct results just because the first 6 came from 1+5 , in some particular sort the order might get changed. I cudn’t come up with an example to prove that because some other combination always seems to be forming the sum. eg – 7+7 in the above case Can you please provide an explanation why we can simply decrement j when the sum was equal to X but the elements were common to both the pairs , without any loss of generality? Peter I agree with Mohamed and Aayush — if there are multiple pairs in the input array having same sums as val1, and multiple pairs in the input array having same sums as val2, and val1 + val2 = target, then the O(n^2 log n) algorithm will not work. With the algorithm, we might miss some combinations. Here is a case: given array = [-3,-2,-1,0,0,1,2,3], target = 0.With the given O(n^2 log n) algorithm, the result might miss [-2, -1, 0, 3]. Peter Ok, I tried the code by removing return and changing else if to if. With the example above, it fortunately works. However, with the following example, it does not work: given array = [-4,-3,-2,-1,0,0,1,2,3,4], target = 0 the result will miss [-3, -2, 2, 3] http://friendmaybe.com pankaj problem can be solved in O(n^2) its standard knapsack problem using DP. just small modification is that include number of elements count in termination condition as follow;  
/* Paste your code here (You may delete these lines if not writing code) */
int N = number of elements in array;
bool funSum(int a[], int i, int c, int n){
 if(n == 4){
   return c == 0;
 }
 if(i >= n){
  return false;
 }
 bool flag = false;
 if(c-A[i] >=0){
  dp[n] = i;
  flag = funSum(a, i+1, c-A[i], n+1);
 }
 if(!flag){
  flag = fumSum(a, i, c, n);
 }
 return flag;
}
 http://www.google.com Nishant Mittal O(n^2logn) #define max 100 int32_t temp_array[100000]; void print ( int32_t c ) { int32_t i=0; for (i=0; i=max || sum<0 ) { return; } if (sum==0) { print ( count ); count–; sum=sum-array[number]; } find_result ( array , sum , count , number+1 ); temp_array[count++]=array[number]; sum=sum-array[number]; find_result ( array , sum , count , number+1 ); } int32_t main ( void ) { srand((unsigned)time(NULL)); int32_t array[max]={0}; int32_t i=0; for (i=0; i<max; i++) { array[i]=rand()%100; printf("%d\t",array[i]); } int32_t sum=0; printf("\n enter the sum to be made\t"); scanf("%d",&sum); find_result ( array , sum , 0 , 0 ); } http://www.google.com Nishant Mittal forgot to copy the check condition here!! which is if (count==4) http://www.google.com Nishant Mittal sorry some problem with paste /*ignore the above code*/ Teng I am wondering isn’t it going to be duplicate ? For example {10, 2, 3, 4, 5, 9, 7, 8} and X = 23, and some duplicates such as (2,3,8,10) is the same as (8,10,2,3) HLS  
/* Paste your code here (You may delete these lines if not writing code) */
class Solution
{
   public static void main(String[] args)
   {
      System.out.println("Thank you very much! Testing Java code!");
   }
}

 ashish why the condition: while (i =0 ) is used in the last step.. doesn’t it make unnecessary comparisons..?? can’t we use just: while(i<j) ashish typo: while(i=0) leet How it will print the quadruples 4 times if return statement is removed? It should print three times. if numbers are 1,2,3,4 then it will print 1,2 – 3,4 1,3 -2,4 1,4 – 2,3if we add condition i<j in while loop otherwise it will print 6 times GeeksforGeeks Thanks for pointing this out. We have added more explanation and corrected the statement. atul Here is another way of solving with space complexity O(n^2) time complexity O(n^2) generate all possible combination of 2 elements. store the sum of these 2 elements in hashTable. This will take O(n^2) time. now again generate combination of 2 elements say P. now if X-P(X = input sum) exists in hashtable , considering indexes are not same , then SUM exists.  
/* Paste your code here (You may delete these lines if not writing code) */
 Kartik Thanks for suggesting a new method. We will be adding it to the original post. anil_kumar88 qsort (aux, size, sizeof(aux[0]), compare); & int compare (const void *a, const void * b) { return ( (*(pairSum *)a).sum – (*(pairSum*)b).sum ); } i cnt understand how it is work. plz elaborate this function and how we sort structre array Chiranjeev Kumar One better O(n^2) solution is ::  
#include<stdio.h>

void findSum(int *a,int n,int sum)
{
	int in,fin,left,right,temp;
	in=0;
	fin=n-1;
	while(in<fin)
	{
		left=in+1;
		right=fin-1;
		temp=sum-(a[in]+a[fin]);	//we have to search for temp
		while(left<right)
		{
			if(a[left]+a[right]>temp)
				right--;
			else if(a[left]+a[right]<temp)
				left++;
			else
			{
				printf("\n%d  %d  %d  %d\n\n",a[in],a[left],a[right],a[fin]);
				//return;
				left++;
			}
		}
		if(sum>a[in]+a[in+1]+a[fin]+a[fin-1])
			in++;
		else
			fin--;
	}
	//printf("\nNot Found\n");
}
int main()
{
    int a[] = {-12 ,-12, -12 ,-12 ,-11, -9,-8,-7};
    int n = 8;
    findSum(a,n,-48);
}

 Chiranjeev Kumar One correction in above method: We have to sort the input array first. Kartik This method has already been suggested and does not work for all cases. See this Please correct me if I am wrong. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
