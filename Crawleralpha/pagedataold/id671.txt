Find all possible interpretations of an array of digits - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find all possible interpretations of an array of digits Consider a coding system for alphabets to integers where ‘a’ is represented as 1, ‘b’ as 2, .. ‘z’ as 26. Given an array of digits (1 to 9) as input, write a function that prints all valid interpretations of input array. Examples 
Input: {1, 1}
Output: ("aa", 'k") 
[2 interpretations: aa(1, 1), k(11)]

Input: {1, 2, 1}
Output: ("aba", "au", "la") 
[3 interpretations: aba(1,2,1), au(1,21), la(12,1)]

Input: {9, 1, 8}
Output: {"iah", "ir"} 
[2 interpretations: iah(9,1,8), ir(9,18)] Please note we cannot change order of array. That means {1,2,1} cannot become {2,1,1} On first look it looks like a problem of permutation/combination. But on closer look you will figure out that this is an interesting tree problem. The idea here is string can take at-most two paths: 1. Proces single digit 2. Process two digits That means we can use binary tree here. Processing with single digit will be left child and two digits will be right child. If value two digits is greater than 26 then our right child will be null as we don’t have alphabet for greater than 26. Let’s understand with an example .Array a = {1,2,1}. Below diagram shows that how our tree grows. 
                           “” {1,2,1}            Codes used in tree
                       /             \               "a" --> 1
                      /               \              "b" --> 2 
                  "a"{2,1}            "l"{1}         "l" --> 12
                 /        \          /     \
                /          \        /       \
            "ab"{1}        "au"    "la"      null
             /    \
            /      \
         "aba"      null Braces {} contain array still pending for processing. Note that with every level, our array size decreases. If you will see carefully, it is not hard to find that tree height is always n (array size) How to print all strings (interpretations)? Output strings are leaf node of tree. i.e for {1,2,1}, output is {aba au la}. We can conclude that there are mainly two steps to print all interpretations of given integer array. Step 1: Create a binary tree with all possible interpretations in leaf nodes. Step 2: Print all leaf nodes from the binary tree created in step 1. Following is Java implementation of above algorithm. 
// A Java program to print all interpretations of an integer array
import java.util.Arrays;

// A Binary Tree node
class Node {

    String dataString;
    Node left;
    Node right;

    Node(String dataString) {
        this.dataString = dataString;
        //Be default left and right child are null. 
    }

    public String getDataString() {
        return dataString;
    }
}

public class arrayToAllInterpretations {

    // Method to create a binary tree which stores all interpretations 
    // of arr[] in lead nodes
    public static Node createTree(int data, String pString, int[] arr) {

        // Invalid input as alphabets maps from 1 to 26
        if (data > 26) 
            return null;

        // Parent String + String for this node
        String dataToStr = pString + alphabet[data];

        Node root = new Node(dataToStr);

        // if arr.length is 0 means we are done
        if (arr.length != 0) {
            data = arr[0];

            // new array will be from index 1 to end as we are consuming 
            // first index with this node
            int newArr[] = Arrays.copyOfRange(arr, 1, arr.length);

            // left child
            root.left = createTree(data, dataToStr, newArr);

            // right child will be null if size of array is 0 or 1
            if (arr.length > 1) {

                data = arr[0] * 10 + arr[1];

                // new array will be from index 2 to end as we 
                // are consuming first two index with this node
                newArr = Arrays.copyOfRange(arr, 2, arr.length);

                root.right = createTree(data, dataToStr, newArr);
            }
        }
        return root;
    }

    // To print out leaf nodes
    public static void printleaf(Node root) {
        if (root == null) 
            return;

        if (root.left == null && root.right == null) 
            System.out.print(root.getDataString() + "  ");
        
        printleaf(root.left);
        printleaf(root.right);
    }

    // The main function that prints all interpretations of array
    static void printAllInterpretations(int[] arr) {

        // Step 1: Create Tree
        Node root = createTree(0, "", arr);

        // Step 2: Print Leaf nodes
        printleaf(root);

        System.out.println();  // Print new line
    }

    // For simplicity I am taking it as string array. Char Array will save space
    private static final String[] alphabet = {"", "a", "b", "c", "d", "e",
        "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
        "s", "t", "u", "v", "w", "x", "v", "z"};

    // Driver method to test above methods 
    public static void main(String args[]) {

        // aacd(1,1,3,4) amd(1,13,4) kcd(11,3,4)
        // Note : 1,1,34 is not valid as we don't have values corresponding
        // to 34 in alphabet
        int[] arr = {1, 1, 3, 4};
        printAllInterpretations(arr);

        // aaa(1,1,1) ak(1,11) ka(11,1)
        int[] arr2 = {1, 1, 1};
        printAllInterpretations(arr2);

        // bf(2,6) z(26)
        int[] arr3 = {2, 6};
        printAllInterpretations(arr3);

        // ab(1,2), l(12)  
        int[] arr4 = {1, 2};
        printAllInterpretations(arr4);

        // a(1,0} j(10)  
        int[] arr5 = {1, 0};
        printAllInterpretations(arr5);

        // "" empty string output as array is empty
        int[] arr6 = {};
        printAllInterpretations(arr6);

        // abba abu ava lba lu
        int[] arr7 = {1, 2, 2, 1};
        printAllInterpretations(arr7);
    }
}
 Output: aacd  amd  kcd  
aaa  ak  ka  
bf  z  
ab  l  
a  j  
  
abba  abu  ava  lba  lu  
 Exercise: 1. What is the time complexity of this solution? [Hint : size of tree + finding leaf nodes] 2. Can we store leaf nodes at the time of tree creation so that no need to run loop again for leaf node fetching? 3. How can we reduce extra space? This article is compiled by Varun Jain. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tags: Facebook Tweet Writing code in comment? Please use ideone.com and share the link here. naveenbobbili Below is my solution using only recursion. /* * patterns.cpp * * Created on: Feb 16, 2014 * Author: naveen1.b */ #include #include #include #include #include using namespace std; static string alphabets[] = { ” “, “a”, “b”, “c”, “d”, “e”, “f”, “g”, “h”, “i”, “j”, “k”, “l”, “m”, “n”, “o”, “p”, “q”, “r”, “s”, “t”, “u”, “v”, “w”, “x”, “y”, “z” }; list printAllInterpretationsUtil(int* a, int start, int size) { int noOfElementsToProcess = size – start; list combinations; if (noOfElementsToProcess == 1) { int elem = a[start]; if (elem <= 26) { string str = alphabets[elem]; //cout << "Pushing " << str << "n"; //cout << "===========================" < 1) { // Recursive call to same function. int elem = a[start]; list results = printAllInterpretationsUtil(a, start + 1, size); list::iterator it; // Perform permuations in a for loop. for (it = results.begin(); it != results.end(); ++it) { string result = *it; // simple append and push string pattern; pattern = alphabets[elem]; //cout << "Pushing " << pattern+result << "n"; combinations.push_back(pattern + result); // mix and check . for eg 1 and 1 as 11 etc int suffix = (result[0] – 'a') + 1; if (suffix < 10) { int patternInt = (elem * 10) + suffix; if (patternInt 1) { //cout << "Pushing " << pattern + result.substr(1, result.length() – 1) << "n"; combinations.push_back(pattern + result.substr(1, result.length() – 1)); } else { //cout << "Pushing " << pattern << "n"; combinations.push_back(pattern); } } } // cout << "===========================" << "n"; } } return combinations; } void printAllInterpretations(int* a, int size) { if (NULL == a) return; list result = printAllInterpretationsUtil(a, 0, size); list::iterator it; for (it = result.begin(); it != result.end(); ++it) { cout << *it << ","; } cout << "n"; } int main() { int a[] = {1,1,3,4}; printAllInterpretations(a, 4); int b[4] = {1,1,1}; printAllInterpretations(b, 3); int c[4] = {2,6}; printAllInterpretations(c, 2); return 0; } Shivam No need to make tree. void dfs(int a[],int i,int prev,int n,string s) { if(i==n) { s=s+char(prev+’a’-1); cout<<s<<endl; return; } dfs(a,i+1,a[i],n,s+char(prev+'a'-1)); if(prev*10+a[i]>t; while(t–) { int n; cin>>n; int a[n]; for(int i=0;i>a[i]; dfs(a,1,a[0],n,””); } return 0; } Vijay Apurva we can do simply with out any extra space …….. #include char arr[] = {‘ ‘,’a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘h’, ‘i’, ‘j’, ‘k’, ‘l’, ‘m’, ‘n’, ‘o’, ‘p’, ‘q’, ‘r’, ‘s’, ‘t’, ‘u’, ‘v’, ‘w’, ‘x’, ‘y’, ‘z’}; void printc(int x[] , int y , char c[],int n ,int check ){ if(n == y){ c[check]=” ; printf(“%s n”,c); return ; } if(y>n){ c[check] = arr[x[n]]; printc(x,y,c,n+1,check+1); } if(x[n]*10+x[n+1]n){ c[check] = arr[x[n]*10+x[n+1]]; printc(x,y,c,n+2,check+1); } } void main(){ int x[]={2, 6, 2, 6}; int y=sizeof(x)/sizeof(int) ; char c[y+1]; printc(x,y,c,0,0); } Amit Bgl wow code ankur jain  
#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<string>

#define input freopen("input.txt","r",stdin)
#define output freopen("out.txt","w",stdout)
//a=a+b-(b=a);


using namespace std;
/*
struct tree
{
	int data;
	string s;
	int arr[]
};*/

	string alpha[] = {"", "a", "b", "c", "d", "e",
        "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
        "s", "t", "u", "v", "w", "x", "v", "z"};



void create(int d,string s,int arr[],int n)
{
	//printf(" %d  %d  ",d,n);cout<<s<<endl;
	if (n==0)
	{
		cout<<s<<endl;
		return ;
	}
	d=arr[0];

	//printf(" 1() %d  %d  ",d,n-1);cout<<s+alpha[d]<<endl;
	create (d,s+alpha[d],arr+1,n-1);

	if (n > 1)
	{

		d=arr[0]*10+arr[1];
		//printf(" 2->  %d %d ",d,n);cout<<s<<endl;
		if (d < 27)
		{
			//s=s+alpha[d];
			//printf(" 2() %d  %d  ",d,n);cout<<s+alpha[d]<<endl;
			create (d,s+alpha[d],arr+2,n-2);
		}

	}
}


void printAllInterpretations(int arr[],int n)
{
   // printf(" -> %d  %d  ",0,n );cout<<" "<<endl;
	create(0,"",arr,n);

}

int main()
{
	int arr[] = {1, 2, 2, 1};
	int n=sizeof(arr)/sizeof(arr[0]);
    printAllInterpretations(arr,n);

}



 Umang Mahajan great!! Just one modification…do you really need to pass ‘d’ as a parameter? #include #include #include using namespace std; string alpha[] = {“”, “a”, “b”, “c”, “d”, “e”,”f”, “g”, “h”, “i”, “j”, “k”, “l”, “m”, “n”, “o”, “p”, “q”, “r”, “s”, “t”, “u”, “v”, “w”, “x”, “v”, “z”}; void create(int arr[],int n,string res) { if (n==0) { cout<<res<1) { d=arr[0]*10+arr[1]; if (d < 27) create (arr+2,n-2,res+alpha[d]); } } void printAllInterpretations(int arr[],int n) { create(arr,n,""); } int main() { int arr[] = {1, 2, 1}; int n=sizeof(arr)/sizeof(arr[0]); printAllInterpretations(arr,n); return 0; } This seems to work fine ankur jain i have done this only by recursion doesnot make any tree then why their is need to build tree ? please correct me..if am wrong (or if by taking tree is better apporach then mine )  
#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<string>

#define input freopen("input.txt","r",stdin)
#define output freopen("out.txt","w",stdout)
//a=a+b-(b=a);


using namespace std;
/*
struct tree
{
	int data;
	string s;
	int arr[]
};*/

	string alpha[] = {"", "a", "b", "c", "d", "e",
        "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
        "s", "t", "u", "v", "w", "x", "v", "z"};



void create(int d,string s,int arr[],int n)
{
	//printf(" %d  %d  ",d,n);cout<<s<<endl;
	if (n==0)
	{
		cout<<s<<endl;
		return ;
	}
	d=arr[0];

	//printf(" 1() %d  %d  ",d,n-1);cout<<s+alpha[d]<<endl;
	create (d,s+alpha[d],arr+1,n-1);

	if (n > 1)
	{

		d=arr[0]*10+arr[1];
		//printf(" 2->  %d %d ",d,n);cout<<s<<endl;
		if (d < 27)
		{
			//s=s+alpha[d];
			//printf(" 2() %d  %d  ",d,n);cout<<s+alpha[d]<<endl;
			create (d,s+alpha[d],arr+2,n-2);
		}

	}
}


void printAllInterpretations(int arr[],int n)
{
   // printf(" -> %d  %d  ",0,n );cout<<" "<<endl;
	create(0,"",arr,n);

}

int main()
{
	int arr[] = {1, 2, 2, 1};
	int n=sizeof(arr)/sizeof(arr[0]);
    printAllInterpretations(arr,n);

}




 bateesh A very simple solution which assumes that at a particular index we can put a alphabet which can be formed by max. 2 digits as 26 is max range of alphabets. Like for 1,2,1 for first index we can have 1 or 12 3 digits combination is not possible.Following is the implementation.  
#include<iostream.h>
#include<conio.h>
void permute(int *arr,int s,int e,int idx,char *str);
int main()
{
    int arr[20];
    char str[20];
    int n;
    printf("\n enter the total digits:");
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>arr[i];
     permute(arr,0,n,0,str);
     getchar();
     getchar();
}
void permute(int *arr,int s,int e,int idx,char *str)
{
        if(s==e)
        {
          printf("\n");
          str[idx]='\0';
          puts(str);
   return;
        }       

     
     int temp=0;
     for(int i=s;i<e&&i<s+2;i++)
{    
        temp=(temp*10)+arr[i];    
        if(temp<=26)
        {
        
        str[idx]=temp+64;
         permute(arr,i+1,e,idx+1,str);
         }    
     
}
     
}   
   

 xxmajia Shall we change “Given an array of digits (1 to 9) as input” to “Given an array of digits (0 to 9) as input”? if there is no 0, we can not interpret 10 and 20 Anyway, the solution is correct and considering 0 as part of the input /* Paste your code here (You may delete these lines if not writing code) */ public static ArrayList<ArrayList<Character>> findAll (int[] A) { ArrayList<ArrayList<Character>> results = new ArrayList<ArrayList<Character>>(); if (A == null || A.length == 0) { return results; } doFindAll(A, 0, results, new ArrayList<Character>()); return results; } public static void doFindAll (int[] A, int position, ArrayList<ArrayList<Character>> results, ArrayList<Character> result) { if (position == A.length) { results.add((ArrayList<Character>)result.clone()); return; } int sum = 0; for (int i = position; i < A.length; i++) { sum = sum*10 + A[position]; if (1 <= sum && sum <= 26) { result.add((char)(‘a’ + sum – 1)); doFindAll(A, i+1, results, result); result.remove(result.size()-1); } else { return; } } } xxmajia Shall we change “Given an array of digits (1 to 9) as input” to “Given an array of digits (0 to 9) as input”? if there is no 0, we can not interpret 10 and 20 Anyway, the solution is correct and considering 0 as part of the input  
/* Paste your code here (You may delete these lines if not writing code) */
 MVN Murthy //It can be easily solved by iteration. no need of recursion and no need of creating binary tree. //Space complexity (1) x = [int(i) for i in raw_input().split()] n = len(x) for i in x: print chr(96+i), print for i in range(n-1): a=int(str(x[i])+str(x[i+1])) if a>26: continue for j in range(i): print chr(x[j]+96), print chr(96+a), for j in range(i+2,n): print chr(x[j]+96) http://mytechdiet.com Rahul can you please explain your logic? bateesh This can be done easily with recursion and many people has already submitted this solution.Can anyone tell me the complexity for the recursive solution?I dnt think it will have overlapping subproblems. shek8034 Complexity is O(n) in worst case, if the tree formed is skewed. bateesh @shek8034. I think worst case for this would not be 0(n).The complexity for this according to me is 0(2^n).It can also be deduced from the tree shown in above diagram.plz comment if m getting it wrong. shek8034 @bateesh : Yes you are right. Complexity is O(2^n) since we are generating all permutations… My bad. Please ignore my previous comment. shek8034 No need to build Binary tree.Easily done Using recursion. Because recursion itself makes the binary tree. A very simple recursive code. Please comment if you find any problem Thanks  
#include<iostream>
#include<string>
#include<stdio.h>
using namespace std;

int arr[]={1,1,3,4};
int n = sizeof(arr)/sizeof(arr[0]);

void interpretation(string str,int idx)
{
	if(idx == n)
	{
		cout<<str<<endl;
		return;
	}
	// add character to string
	str.push_back(arr[idx]+64);
	// go to left subtree of recursion 
	interpretation(str,idx+1); 
	if(idx+1 <= n-1)
	{
		// char formed by 2 digits
		int num = arr[idx]*10 + arr[idx+1]; 
		if(num <= 26)
		{
			// remove previous element
			str.erase(str.size()-1,1);
			// add this 2 digit char 
			str.push_back(num+64); 
			// go to right subtree of recursion while incrementing the index by 2
			interpretation(str,idx+2); 
		}
	}
	else
		return;
}

int main()
{
	interpretation("",0);
	return 0;
}
 illuminati It can be done by recursion easily… Below is the source code for it.  
#include<iostream>
#include<cstring>
#include<sstream>
using namespace std;
int n;
void dig_combs(int arr[],int k,string ans)
{
     int r;
     if(k==n){
     cout<<ans<<endl;
     int temp;
     stringstream s (ans);
     while(s>> temp){
     char ch=(char)(temp-1)+'a';
     //cout<<"temp: "<<temp<<endl;
     cout<<ch<<" ";
     }
     cout<<endl;
     
     //cout<<ans<<endl;
     return;
     }     
     if(k<n-1)
     {
          string h,xx;
          r=arr[k]*10+arr[k+1];
          if(r>=1 && r<=26){
          h=ans;
          stringstream ss;
          ss << r;
          xx = ss.str();
          h+=xx;
          h+=" ";
          dig_combs(arr,k+2,h);
          }
     }
         string h,xx;
         r=arr[k];
         if(r>=1 && r<10){
          h=ans;
          stringstream ss;
          ss << r;
          xx = ss.str();
          h+=xx;
          h+=" ";
          dig_combs(arr,k+1,h); 
          }
}
int main()
{
    int arr[4]={1,1,3,4};
    n=4;
    dig_combs(arr,0,"");
    system("pause");
}

 Rahul  
/* #include <iostream>
#include <string>
#include <vector>

using namespace std;

char alphabet[] = {' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 
				   'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

typedef struct node
{
	string value;
	struct node *left;
	struct node *right;

	node()
	{
		value = " ";
		left = NULL;
		right = NULL;
	}
}node_t;

node_t* buildTree(vector<int> vArr, string parentValue, int data);
void printTree(node_t *root);

node_t* buildTree(vector<int> vArr, string parentValue, int data)
{
	if(data > 26)
		return NULL;

	string nodeValue = parentValue + alphabet[data];

	node_t *root = new node_t;
	root->value = nodeValue;
	root->left = NULL;
	root->right = NULL;

	if(vArr.size() > 0)
	{
		data = vArr[0];

		vector<int> vSubArrLeft(vArr.begin() + 1, vArr.end());
		root->left = buildTree(vSubArrLeft, nodeValue, vArr[0]);

		if(vArr.size() > 1)
		{
			data = vArr[0] * 10 + vArr[1];
			
			vector<int> vSubArrRight(vArr.begin() + 2, vArr.end());
			root->right = buildTree(vSubArrRight, nodeValue, data);
		}
	}

	return root;
}

void printTree(node_t *root)
{
	if(root == NULL)
		return;
	printTree(root->left);
	if(root->left == NULL && root->right == NULL)
		cout << root->value << endl;
	printTree(root->right);
}

int main()
{
	int arr[] = {1, 2, 1};
	vector<int> vArr(arr, arr + 3);

	node_t *root = buildTree(vArr, " ", 0);

	printTree(root);

	system("PAUSE");
} */
 EOF Another way of thinking: 1) Let toChar(i) denotes the character corresponding to digit i. 2) Let f(i,j) denotes all the interpretations of the array arr[i..j]. The problem can be recursively defined as:  
f(i,j) = toChar(arr[i]) UNION f(i+1,j);
	if(10*arr[i]+arr[i+1] <= 26)
		f(i,j) = f(i,j) UNION tochar(10*arr[i]+arr[i+1]) UNION f(i+2,j);
 For simplicity I didn’t do the bound checking for array indexes and base cases. Can be implemented with O(n) time complexity using Dynamic Programming. atul output for below test case is wrong :-  
int arr[]={1, 1, 3,0,0};
 output : aac aac am am kc kc expected output : aac am kc coder your input case is wrong since in the question it is clearly given that “array of digits (1 to 9) is taken as input”. If you find something unconvincing then do reply to this post.  
/* Paste your code here (You may delete these lines if not writing code) */
 atul given code itself have similar test case :- // a(1,0} j(10) int[] arr5 = {1, 0}; printAllInterpretations(arr5);  
/* Paste your code here (You may delete these lines if not writing code) */
 coder kk..actually my code is written as per the question given and I didn’t see the code that was there of java so consider the code only when the given array has digits(1 to 9)..although there won’t be much change in the code to make it valid for test cases involving zero. coder I think rather than representing the string as physical tree,it is better to use recursion. #include<iostream> using namespace std; #define MAX 100 char arr[27]; int input[MAX]; int n; void permut(char *a,int index,int,int); int main() { cout<<"enter no. of elements"<<endl; cin>>n; cout<<"enter the elements"<<endl; for(int i=0;i<n;i++) cin>>input[i]; for(int i=1;i<=26;i++) arr[i]=’a’+i-1; char a[MAX]; a[0]=’ ‘; permut(a,input[0],0,0); system("pause"); } void permut(char a[],int index,int j,int stin) { if(j>=n) { a[stin]=’\0'; cout<<a<<endl; return ; } a[stin]=arr[index]; permut(a,input[j+1],j+1,stin+1); if(j+1<=n-1) { int in=index*10+input[j+1]; if(in<=26) { a[stin]=arr[in]; permut(a,input[j+2],j+2,stin+1); } else return ; } } coder I think recursion will work just fine.No need to represent it as a tree physically.It will be a logical tree by recursion. kk.nitrkl #include <iostream> #include <string> using namespace std; bool is_valid(int a) { return a >= 65 && a <= 90; } void interpret(int arr[], string str, int curr, int len) { if(curr == len) { cout<<str<<endl; } else { for(int i = curr; i < len; ) { str.push_back(char(arr[i] + 64)); interpret(arr, str, i + 1, len); if(i < len – 1 && is_valid(10*arr[i] + arr[i + 1] + 64)) { str.erase(str.size() – 1, 1); str.push_back(char(arr[i]*10 + arr[i + 1] + 64)); interpret(arr, str, i + 2, len); i++; } i++; } } } int main() { int arr[] = {1, 2, 3, 4}; string str = ""; interpret(arr, str, 0, sizeof(arr)/sizeof(arr[0])); return 0; } http://nitish712.blogspot.com nitish712  
#include <stdio.h>
int vals[10];
int vcnt;
int n=8;
int arr[]={1,2,3,1,2,3,2,4};
void compute(int lev, int idx)
{
	if(lev==n)
	{
		check(idx);
		return;
	}
	vals[idx] = arr[lev];
	compute(lev+1, idx+1);
	if(lev>=n-1)
		return;	
	vals[idx] = vals[idx]*10 + arr[lev+1];
	if(vals[idx]>26)
		return;
	compute(lev+2, idx+1);
}
void check(int no)
{
	int i=0;
	for(; i<no; i++)
		printf("%c", vals[i]+'a');
	printf("\n");
}

int main()
{
	compute(0,0);
	return 0;
}
 AMIT print the output without building the tree  
#include<stdio.h>
#include<stdlib.h>
void print1(int a[],char b[],int i1,int n,int i2,int flag)
{
    if(i1==n && flag==1)
    return;
    if(i1==n)
    {
        b[i2]='\0';
        printf("%s\t",b);
    }
    if(flag==0 && a[i1]==0)
    return;
    if(flag==1 && (a[i1-1]>2 ||(a[i1-1]==2 && a[i1]>6)))
    return;
    if(flag==0)
    {
        b[i2]='a'+a[i1]-1;
        print1(a,b,i1+1,n,i2+1,0);
        print1(a,b,i1+1,n,i2,1);
    }
    else
    {
        b[i2]='a'+a[i1]+a[i1-1]*10-1;
        print1(a,b,i1+1,n,i2+1,0);
    }
}
void print(int a[],int n)
{
    char *b=(char *)malloc(sizeof(char)*n+1);
    print1(a,b,0,n,0,0);
    free(b);
}
int main()
{
        int n;
        int arr[] = {1, 1, 3, 4};
        n=sizeof(arr)/sizeof(arr[0]);
        print(arr,n);
        printf("\n");
        // aaa(1,1,1) ak(1,11) ka(11,1)
      int arr2[] = {1, 1, 1};

        n=sizeof(arr2)/sizeof(arr2[0]);
        print(arr2,n);

        printf("\n");
       // bf(2,6) z(26)
       int arr3[] = {2 ,6};
        n=sizeof(arr3)/sizeof(arr3[0]);
        print(arr3,n);
        printf("     \n");

      // ab(1,2), l(12)
        int arr4[] = {1, 2};
        n=sizeof(arr4)/sizeof(arr4[0]);
        print(arr4,n);

        printf("\n");
        // a(1,0} j(10)
        int arr5[] = {1, 0};
        n=sizeof(arr5)/sizeof(arr5[0]);
        print(arr5,n);

        printf("\n");
       // "" empty string output as array is empty
   /*     int arr6 = {};

        n=sizeof(arr)/sizeof(arr[0]);
        print(arr6);
 */
        // abba abu ava lba lu
        int arr7[] = {1, 2, 2, 1};

        n=sizeof(arr7)/sizeof(arr7[0]);
        print(arr7,n);
        printf("\n");
    return 0;
}

 ankitjaingc What is the best case complexity ?? I could come up with O(n2)=O(n square). Please suggest better method. ankitjaingc #include int Possible(int *A,int n) { int i=0,j=0; for(i=0;i printf(“%c”,A[i]+96); printf(“\n”); for(i=0;i { if(A[i]*10+A[i+1]<=26) { for(j=0;j printf(“%c”,A[j]+96); printf(“%c”,A[i]*10+A[i+1]+96); for(j=i+2;j printf(“%c”,A[j]+96); printf(“\n”); } } } main() { int A[]= {9,1,8}; int n=3; Possible(A,n); return 0; } Lam I think we can use recursion, the pros is that it does not require to store the leaves of the tree. Cons of the recursion is many function calls which maybe inefficient. However, there will be no algorithm that is better than O(2^n) in the worst case since the output in the worst case will be that number.  
#include <stdio.h>
#include <string>
#include <iostream>
using namespace std;

/**
* return a character corresponding to the digit, e.g. 1->a, 2->b, ..., 26 ->z
*/
char digitToChar(int d){
	const string s="abcdefghijklmnopqrstuvwxyz";
	if(d>=27||d<=0)
		return '#';
	return s[d-1];
}

/**
* recursion solution
*/
void interpretation(string prefix, string s){
	if(s.empty()){
		if(prefix.find('#')==string::npos)
			cout<<prefix<<endl;
		return;
	}else{
		interpretation(prefix+" "+digitToChar(atoi(s.substr(0,1).c_str())),s.substr(1,s.length()-1));
		if(s.length()>=2){
			char c=digitToChar(atoi(s.substr(0,2).c_str()));
			if(c!='#'){
				interpretation(prefix+" "+c,s.substr(2,s.length()-2));				
			}
		}
	}
}

void main(int argc, char* argv[]){
	interpretation("","121");
	cout<<"**************"<<endl;
	interpretation("","1134");
	cout<<"**************"<<endl;
	interpretation("","111");
	cout<<"**************"<<endl;
	interpretation("","26");
	cout<<"**************"<<endl;
	interpretation("","10");
}
 nitin35 creating a complete tree is not necessary following should work just fine i think /* Paste your code here (You may delete these lines if not writing code) */ #include<iostream> #include<vector> using namespace std; string alpha[27]={" ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}; void process(string s,vector<int> rem) { int a,b,c; if(rem.empty()) cout<<s<<endl; else { //process one length a=rem[0]; rem.erase(rem.begin()); process(s+alpha[a],rem); //process two length if(!rem.empty()) { b=rem[0]; rem.erase(rem.begin()); c=a*10+b; process(s+alpha,rem); } } } int main() { vector<int>a; a.push_back(1); a.push_back(2); a.push_back(2); a.push_back(1); process("",a); return 0; } GeeksforGeeks @nitin35: Could you please post your code again between sourcecode tags? nitin35  
#include<iostream>
#include<vector>
using namespace std;
string alpha[27]={" ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};


void process(string s,vector<int> rem)
{
    int a,b,c;
    if(rem.empty())
        cout<<s<<endl;

    else
    {
        //process one length
            a=rem[0];
            rem.erase(rem.begin());
            process(s+alpha[a],rem);
        //process two length
            if(!rem.empty())
            {
                b=rem[0];
                rem.erase(rem.begin());
                c=a*10+b;
                process(s+alpha,rem);
            }
    }
}

int main()
{
    vector<int>a;
    a.push_back(1);
    a.push_back(2);
    a.push_back(2);
    a.push_back(1);
    process("",a);
    return 0;
}

 Dheeraj Total count of interpretations can be written as following: count(arr, n) = n if n = 1 or n = 0 count(arr, n) = count(arr+1, n-1) + count(arr+2, n-2) if n > 2 and arr[0]*10 + arr[1] > 26 count(arr, n) = count(arr+1, n-1) otherwise In ur solution, u have used a Binary Tree to store results of sub-problems because there are overlapping subproblems, let me know if my understanding is correct. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
