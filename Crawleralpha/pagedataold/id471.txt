Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Travelling Salesman Problem (TSP): Given a set of cities and distance between every pair of cities, the problem is to find the shortest possible route that visits every city exactly once and returns to the starting point. Note the difference between Hamiltonian Cycle and TSP. The Hamiltoninan cycle problem is to find if there exist a tour that visits every city exactly once. Here we know that Hamiltonian Tour exists (because the graph is complete) and in fact many such tours exist, the problem is to find a minimum weight Hamiltonian Cycle. For example, consider the graph shown in figure on right side. A TSP tour in the graph is 1-2-4-3-1. The cost of the tour is 10+25+30+15 which is 80. The problem is a famous NP hard problem. There is no polynomial time know solution for this problem. Following are different solutions for the traveling salesman problem. Naive Solution: 1) Consider city 1 as the starting and ending point. 2) Generate all (n-1)! Permutations of cities. 3) Calculate cost of every permutation and keep track of minimum cost permutation. 4) Return the permutation with minimum cost. Time Complexity: (n!) Dynamic Programming: Let the given set of vertices be {1, 2, 3, 4,….n}. Let us consider 1 as starting and ending point of output. For every other vertex i (other than 1), we find the minimum cost path with 1 as the starting point, i as the ending point and all vertices appearing exactly once. Let the cost of this path be cost(i), the cost of corresponding Cycle would be cost(i) + dist(i, 1) where dist(i, 1) is the distance from i to 1. Finally, we return the minimum of all [cost(i) + dist(i, 1)] values. This looks simple so far. Now the question is how to get cost(i)? To calculate cost(i) using Dynamic Programming, we need to have some recursive relation in terms of sub-problems. Let us define a term C(S, i) be the cost of the minimum cost path visiting each vertex in set S exactly once, starting at 1 and ending at i. We start with all subsets of size 2 and calculate C(S, i) for all subsets where S is the subset, then we calculate C(S, i) for all subsets S of size 3 and so on. Note that 1 must be present in every subset. 
If size of S is 2, then S must be {1, i},
 C(S, i) = dist(1, i) 
Else if size of S is greater than 2.
 C(S, i) = min { C(S-{i}, j) + dis(j, i)} where j belongs to S, j != i and j != 1.
 For a set of size n, we consider n-2 subsets each of size n-1 such that all subsets don’t have nth in them. Using the above recurrence relation, we can write dynamic programming based solution. There are at most O(n*2n) subproblems, and each one takes linear time to solve. The total running time is therefore O(n2*2n). The time complexity is much less than O(n!), but still exponential. Space required is also exponential. So this approach is also infeasible even for slightly higher number of vertices. We will soon be discussing approximate algorithms for travelling salesman problem. References: http://www.lsi.upc.edu/~mjserna/docencia/algofib/P07/dynprog.pdf http://www.cs.berkeley.edu/~vazirani/algorithms/chap6.pdf Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm) Snake and Ladder Problem Tarjan’s Algorithm to find Strongly Connected Components Shortest path with exactly k edges in a directed and weighted graph Count all possible walks from a source to a destination with exactly k edges Euler Circuit in a Directed Graph Given an array of strings, find if the strings can be chained to form a circle Given a sorted dictionary of an alien language, find order of characters Tags: Dynamic Programming, Graph Tweet Writing code in comment? Please use ideone.com and share the link here. rohan http://ideone.com/tYdrK8 It is well commented and contains the recursion tree for an example input graph enjoy Using the DP equation- g(i,S)= min(Cij + g( j, S-{ j }) where j belongs to S. where g(i,S) is length of a shortest path starting at vertex i, going through all vertices in S and terminating at vertex 1. NB Why is the Time Complexity: big omega (n!) ? This should be an upper bound, not lower bound right john and that dp-derived path (preferably, as it pertains to the top-down sol’n)? Lohith Ravi Hi Moderators, I really like geeks for geeks for the service it renders by spreading so much of knowledge. I also want you guys to make a point some where that, Dynamic programming is just a method where we cache the result so that it need not be computer once more and a HashMap could be of great help as a simple cache. // for the above problem, I have a DP code writtern in Java, I wish you use it in the above post so that it helps people import java.util.ArrayList; import java.util.HashMap; public class TravelingSalesManProblem { public static HashMap DynamicProgrammingCache = new HashMap(); public static void main(String[] args) { int source = 0; int matrix[][] = { { 0, 10, 15, 20 }, { 10, 0, 35, 25 }, { 15, 35, 0, 30 }, { 20, 25, 30, 0 } }; ArrayList visitedNodes = new ArrayList(); visitedNodes.add(source); int minDistance = findMinimumDistance(matrix, source, visitedNodes); System.out.println(minDistance); } private static int findMinimumDistance(int[][] matrix, int source, ArrayList visitedNodes) { if(DynamicProgrammingCache.containsKey(visitedNodes+”,(“+source+”)”)) { return DynamicProgrammingCache.get(visitedNodes+”,(“+source+”)”); } if(visitedNodes.size() == 4){ int temp = matrix[visitedNodes.get(visitedNodes.size()-1)][visitedNodes.get(0)]; if(temp !=0) return temp; else return -1; } int min = -1; for (int i = 0; i < matrix.length; i++) { if (matrix[i] != 0 && notInVisitedNodes(visitedNodes, i)) { ArrayList tempVisitedNodes = copyOf(visitedNodes); tempVisitedNodes.add(i); int val = findMinimumDistance(matrix, i, tempVisitedNodes) ; if (val != -1) { val = val + matrix[i]; if (min == -1) { min = val ; } else { if (min > val) { min = val; } } } } } DynamicProgrammingCache.put(visitedNodes+”,(“+source+”)”, min); return min; } private static ArrayList copyOf(ArrayList visitedNodes) { return new ArrayList(visitedNodes); } private static boolean notInVisitedNodes(ArrayList visitedNodes, int i) { return !visitedNodes.contains(i); } } Guest import java.util.ArrayList; public class TravelingSalesManProblem { public static void main(String[] args) { int source = 0; int matrix[][] = { { 0, 10, 15, 20 }, { 10, 0, 35, 25 }, { 15, 35, 0, 30 }, { 20, 25, 30, 0 } }; ArrayList visitedNodes = new ArrayList(); visitedNodes.add(source); int minDistance = findMinimumDistance(matrix, source, visitedNodes); System.out.println(minDistance); } private static int findMinimumDistance(int[][] matrix, int source, ArrayList visitedNodes) { int min = -1; for (int i = 0; i < matrix.length; i++) { ArrayList visitedNodes = copyOf(visitedNodes); visitedNodes.add(i); if (i != source && matrix[i] != 0 && notInVisitedNodes(visitedNodes)) { int val = findMinimumDistance(matrix, i, visitedNodes) ; if (val != -1) { if (min == -1) { min = val + matrix[i]; } else { if (min > val + matrix[i]) { min = val + matrix[i]; } } } } } return min; } } Sriharsha g.r.v hello sir, i am naive to this concept, but i would like to know if disktras or bellmann algo could be applied to very vertex one after th other and discard that vertex from graph..in that way dont we get the shortest tour possible? mysticPrince Look at this recurrence: C(S, i) = min { C(S-{i}, j) + dis(j, i)} Doesn’t it look similar to relaxation property in Bellman ford’s? Why not the same complexity then? 1. Cause there are two constraints in particular: a)Each vertex must be visited, and only once (except 1 where tour starts and ends) b) For nth vertex, in tour (from 1st), we are looking for a n-length path subject to above two constraints. 2. Cause it NP Complete problem :p incorporating above two constraints Well, I’m not the author of the article. But maybe it helps. Kaushik Srinivasan Can someone please explain the 2nd recurrence relation? mysticPrince C(S, i) = min { C(S-{i}, j) + dis(j, i)} where j belongs to S, j != i and j != 1 This one I suppose. As the author has stated: C(S, i) be the cost of the minimum cost path visiting each vertex in set S exactly once, starting at 1 and ending at i. For each subset size>2, C(S,i) is given as minimum of all path lengths visiting every vertex in subset S exactly once, starting at 1, ending at i (i belongs to S) , with j as intermediate vertex, for all j in S (j!=i, j!=1), for all i in S (i!=1). So the expressions is of form: C(S-{i}, j) +dist (j,i) I hope it helps Bharathkumar Hegde I think if subset is greater than two, then loop for each j in S-{i}: required = min ( required , C (S-{i}, j) + dist ( i , j ) ); now ‘required’ has minimum cost of travelling through S – { i } considering some city ‘ j ‘ in S – { i } is last node plus the dist from ‘ j ‘ (possible last city ) to i. Shubham Mittal How is the time complexity when using DP is O(n^2*2^n)? Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
