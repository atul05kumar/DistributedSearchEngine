Print all combinations of points that can compose a given number - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print all combinations of points that can compose a given number You can win three kinds of basketball points, 1 point, 2 points, and 3 points. Given a total score n, print out all the combination to compose n. Examples: For n = 1, the program should print following: 1 For n = 2, the program should print following: 1 1 2 For n = 3, the program should print following: 1 1 1 1 2 2 1 3 For n = 4, the program should print following: 1 1 1 1 1 1 2 1 2 1 1 3 2 1 1 2 2 3 1 and so on … Algorithm: At first position we can have three numbers 1 or 2 or 3. First put 1 at first position and recursively call for n-1. Then put 2 at first position and recursively call for n-2. Then put 3 at first position and recursively call for n-3. If n becomes 0 then we have formed a combination that compose n, so print the current combination. Below is a generalized implementation. In the below implementation, we can change MAX_POINT if there are higher points (more than 3) in the basketball game. 
#define MAX_POINT 3
#define ARR_SIZE 100
#include<stdio.h>

/* Utility function to print array arr[] */
void printArray(int arr[], int arr_size);

/* The function prints all combinations of numbers 1, 2, ...MAX_POINT
   that sum up to n.
   i is used in recursion keep track of index in arr[] where next
   element is to be added. Initital value of i must be passed as 0 */
void printCompositions(int n, int i)
{

  /* array must be static as we want to keep track
   of values stored in arr[] using current calls of
   printCompositions() in function call stack*/
  static int arr[ARR_SIZE];

  if (n == 0)
  {
    printArray(arr, i);
  }
  else if(n > 0)
  {
    int k; 
    for (k = 1; k <= MAX_POINT; k++)
    {
      arr[i]= k;
      printCompositions(n-k, i+1);
    }
  }
}

/* UTILITY FUNCTIONS */
/* Utility function to print array arr[] */
void printArray(int arr[], int arr_size)
{
  int i;
  for (i = 0; i < arr_size; i++)
    printf("%d ", arr[i]);
  printf("\n");
}

/* Driver function to test above functions */
int main()
{
  int n = 5;
  printf("Differnt compositions formed by 1, 2 and 3 of %d are\n", n);
  printCompositions(n, 0);
  getchar();
  return 0;
}
 Asked by Aloe Please write comments if you find any bug in above code/algorithm, or find other ways to solve the same problem.           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. ashish Can someone please explain how recursion is working here or give a dry run of the program. I am not able to understand when k=2, printCompositions(-1,2) then how it is printing 1,2 . puneetbestpat I was wondering if this method can be applied if the MAX_POINT is 10^9. would’nt the stack overflow..??  
/* Paste your code here (You may delete these lines if not writing code) */
 puneetbestpat I was wondering if this method can be applied if the MAX_POINT is 10^9. would’nt the stack overflow..?? abhishek08aug Intelligent satya @all Can You Explain The Time Complexity of The Code.?? is it n*2^n or simply 2^n can some one prove it Reply ASAP. prakhar May be a loose upper bound is O(MAX_POINT^n). Can someone explain a tighter upper bound ? http://shashank7s.blogspot.com WgpShashank  
class PrintAllCombinations 
{
 
        public static void main(String[] args) 
        {
                int s = 9;
                //int[] a = new int[] {2,3,6,7,8};
                int[] a = new int[] {2,3,6,7,8,0,10,66,45,3,56,89};
                getCombinatsions(a, 0, s, 0, "");
        }
        
        static void getCombinatsions(int[] a, int j, int desiredSum, int currentSum, String st)         
        {
                if(desiredSum == currentSum) {
                        System.out.println(st);
                        return;
                }
 
 
               if(currentSum > desiredSum) 
                {
                        return;
                }
 
 
 
                for(int i = j; i < a.length; i++) 
                 {
                        if (a[i] <= desiredSum && a[i] != 0)
                         getCombinatsions(a, i, desiredSum, currentSum + a[i], st + "+" + a[i]);
                        else
                                break;
                }
        }
 
 
}
 Have a Look & let me know if it fail for any test case http://ashutosh7s.blogspot.com/ WgpShashank Hi Geeks, I Just Modified The Above Program to Printb Unique Combination that given number plz review it & let me know if anything wrong in this code  
 #define MAX_POINT 4
#define ARR_SIZE 100
#include <stdio.h>
 
/* Utility function to print array arr[] */
void printArray(int arr[], int arr_size);
 
/* The function prints all combinations of numbers 1, 2, ...MAX_POINT
   that sum up to n.
   i is used in recursion keep track of index in arr[] where next
   element is to be added. Initital value of i must be passed as 0 */
void printCompositions(int arr[ARR_SIZE],int n, int i)
{
 
  /* array must be static as we want to keep track
   of values stored in arr[] using current calls of
   printCompositions() in function call stack*/
 // static int arr[ARR_SIZE];
 
  if (n == 0)
  {
    printArray(arr, i);
  }
  else if(n > 0)
  {
    int k;
    for (k = 1; k <= MAX_POINT; k++)
    {
      arr[i]= k;
      printCompositions(arr,n-k, i+1);
    }
  }
}
 
/* UTILITY FUNCTIONS */
/* Utility function to print array arr[] */
void printArray(int arr[], int arr_size)
{
int i,flag=1;
 
for (i = 0; i arr[i+1]) flag=0;
if(flag)
for (i = 0; i < arr_size; i++)
printf("%d ", arr[i]);
printf("\n");
}
 
/* Driver function to test above functions */
int main()
{
  int n = 5;
  printf("Differnt compositions formed by 1, 2 and 3 of %d are\n", n);
  int arr[ARR_SIZE]={1,2,3,4};
  printCompositions(arr,n, 0);
  getchar();
  return 0;
}
 Comments Will Be Highly Appreciated coder for (i = 0; i arr[i+1]) flag=0; i guess u wrote in hurry..please update it http://ashutosh7s.blogspot.com/ WgpShashank for Explanation See here http://1.bp.blogspot.com/-CnDxofRYg6s/TZs69o2V8mI/AAAAAAAAADw/bYIVeOkbF3A/s1600/Combinations.GIF http://www.wgpshashank.co.cc Shashank Mani Narayan @geeksforGeeks this will print duplicate values as well we have to modify it.. like for 3 it will print 12 21 but we wants only one (unique) way ?? raman what modification we have to do in given program so that it can print the uniqe combination for given targat number….ltes wait for GeeksforGeeks How they approach for this question.. Aravind_Sen no. of calls to functions can be optimized and the size of array should be MAX_POINT  
void printCompositions(int n, int i)
{
 
  /* array must be static as we want to keep track
   of values stored in arr[] using current calls of
   printCompositions() in function call stack*/

    static int arr<strong>[MAX_POINT];
    int k;
    for (k = 1; k <= MAX_POINT; k++)
    {
      arr[i]= k;
      if(n-k >0 )
         printCompositions(n-k, i+1);
      else if(n-k==0)
         printArray(arr, i+1);
    }
}
 reg_frenzy Yes, true. We could check for the value of (n-k) to see if it is greater than 0, to call the function recursively. Will reduce the recursion overhead. sharat04 agreed. I had the same concern atul your optmized code wont works:- this will work;  
 for(k=1;k<=max;k++)
                {
                        if(num > 0)
                        {
                                arr[arrlen]=k;

                                if(num-k > 0)
                                {
                                  combination(num-k,max,arrlen+1);
                                }
                                else if(num-k == 0)
                                {
                                         for(p=0;p<arrlen+1;p++)
                                         {
                                                printf("%d ",arr[p]);

                                         }
                                         printf("\n");


                                }
                        }
                }


 atul ok sorry this will work, i skipped i+1 you were passing to printArray. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
