Next Greater Element - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Next Greater Element Given an array, print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the first greater element on the right side of x in array. Elements for which no greater element exist, consider next greater element as -1. Examples: a) For any array, rightmost element always has next greater element as -1. b) For an array which is sorted in decreasing order, all elements have next greater element as -1. c) For the input array [4, 5, 2, 25}, the next greater elements for each element are as follows. 
Element       NGE
   4      -->   5
   5      -->   25
   2      -->   25
   25     -->   -1
 d) For the input array [13, 7, 6, 12}, the next greater elements for each element are as follows. 
  Element        NGE
   13      -->    -1
   7       -->     12
   6       -->     12
   12     -->     -1
 Method 1 (Simple) Use two loops: The outer loop picks all the elements one by one. The inner loop looks for the first greater element for the element picked by outer loop. If a greater element is found then that element is printed as next, otherwise -1 is printed. Thanks to Sachin for providing following code.      
#include<stdio.h>
/* prints element and NGE pair for all elements of
arr[] of size n */
void printNGE(int arr[], int n)
{
    int next = -1;
    int i = 0;
    int j = 0;
    for (i=0; i<n; i++)
    {
        next = -1;
        for (j = i+1; j<n; j++)
        {
            if (arr[i] < arr[j])
            {
                next = arr[j];
                break;
            }
        }
        printf("%d -- %d\n", arr[i], next);
    }
}

int main()
{
    int arr[]= {11, 13, 21, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    printNGE(arr, n);
    getchar();
    return 0;
}
 Output: 
11 -- 13
13 -- 21
21 -- -1
3 -- -1 Time Complexity: O(n^2). The worst case occurs when all elements are sorted in decreasing order. Method 2 (Using Stack) Thanks to pchild for suggesting following approach. 1) Push the first element to stack. 2) Pick rest of the elements one by one and follow following steps in loop. ….a) Mark the current element as next. ….b) If stack is not empty, then pop an element from stack and compare it with next. ….c) If next is greater than the popped element, then next is the next greater element fot the popped element. ….d) Keep poppoing from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements ….g) If next is smaller than the popped element, then push the popped element back. 3) After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them. 
#include<stdio.h>
#include<stdlib.h>
#define STACKSIZE 100

// stack structure
struct stack
{
    int top;
    int items[STACKSIZE];
};

// Stack Functions to be used by printNGE()
void push(struct stack *ps, int x)
{
    if (ps->top == STACKSIZE-1)
    {
        printf("Error: stack overflow\n");
        getchar();
        exit(0);
    }
    else
    {
        ps->top += 1;
        int top = ps->top;
        ps->items [top] = x;
    }
}

bool isEmpty(struct stack *ps)
{
    return (ps->top == -1)? true : false;
}

int pop(struct stack *ps)
{
    int temp;
    if (ps->top == -1)
    {
        printf("Error: stack underflow \n");
        getchar();
        exit(0);
    }
    else
    {
        int top = ps->top;
        temp = ps->items [top];
        ps->top -= 1;
        return temp;
    }
}

/* prints element and NGE pair for all elements of
arr[] of size n */
void printNGE(int arr[], int n)
{
    int i = 0;
    struct stack s;
    s.top = -1;
    int element, next;

    /* push the first element to stack */
    push(&s, arr[0]);

    // iterate for rest of the elements
    for (i=1; i<n; i++)
    {
        next = arr[i];

        if (isEmpty(&s) == false)
        {
            // if stack is not empty, then pop an element from stack
            element = pop(&s);

            /* If the popped element is smaller than next, then
                a) print the pair
                b) keep popping while elements are smaller and
                stack is not empty */
            while (element < next)
            {
                printf("\n %d --> %d", element, next);
                if(isEmpty(&s) == true)
                   break;
                element = pop(&s);
            }

            /* If element is greater than next, then push
               the element back */
            if (element > next)
                push(&s, element);
        }

        /* push next to stack so that we can find
           next greater for it */
        push(&s, next);
    }

    /* After iterating over the loop, the remaining
       elements in stack do not have the next greater
       element, so print -1 for them */
    while (isEmpty(&s) == false)
    {
        element = pop(&s);
        next = -1;
        printf("\n %d -- %d", element, next);
    }
}

/* Driver program to test above functions */
int main()
{
    int arr[]= {11, 13, 21, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    printNGE(arr, n);
    getchar();
    return 0;
}
 Output: 
 11 -- 13
 13 -- 21
 3 -- -1
 21 -- -1
 Time Complexity: O(n). The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times. a) Initialy pushed to the stack. b) Popped from the stack when next element is being processed. c) Pushed back to the stack because next element is smaller. d) Popped from the stack in step 3 of algo. Source: http://geeksforgeeks.org/forum/topic/next-greater-element#post-60 Please write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tweet Writing code in comment? Please use ideone.com and share the link here. Saurabh Choudhary public static void FindNextGReatest(Integer a[]) { Stack temStack=new Stack(); if(a.length<0) { return; } else { temStack.push(a[0]); for(int i=1;i temStack.peek()) { do { System.out.println(temStack.pop()+”has leader “+next); } while ((!temStack.isEmpty()) && next>temStack.peek()); } temStack.push(next); } while(!temStack.isEmpty()) { System.out.println(temStack.pop()+”has leader -1″); } } } newCoder Java implementation for method 2 using stack: public static void printNextGreater(int[] a) { Stack stack = new Stack(); stack.push(a[0]); for (int i = 1; i < a.length; i++) { while (!stack.isEmpty() && stack.peek() < a[i]) { int element = stack.pop(); System.out.println("next greater of element " + element + " is " + a[i]); } stack.push(a[i]); } while (!stack.isEmpty()) { System.out.println("No next greater element found for " + stack.pop()); } } Krishna import java.util.Stack; public class ToLearn { public static void main(String[] args) { Stack greaterElements = new Stack(); int[] input = {4, 2, 3, 5 ,25};//{15,10,12,20};//{0,0,0,0,0,1,0,0,0,0};//{5, 4, 11 , 2 , 8, 10, 4, 12, 6, 2}; greaterElements.push(input[input.length – 1]); System.out.println(“-1″); for(int i = input.length – 2 ; i >= 0 ; i–) { while(!greaterElements.isEmpty() && input[i] >= greaterElements.peek()) { greaterElements.pop(); } if(greaterElements.isEmpty()) { System.out.println(“-1″); greaterElements.push(input[i]); continue; } else { System.out.println(greaterElements.peek()); greaterElements.push(input[i]); } } } } https://sites.google.com/site/nishantonl9/ Nishant Kumar In method 2, In the below line – /* If element is greater than next, then push the element back */ if (element > next) push(&s, element); There should be equality sign if (element >= next) try 2nd method with this test case: {0,0,0,0,0,1,0,0,0,0} gks :O kabhi :O anon How is the stack method O(n) if the first element in the array is the highest number? Or less trivial, it’s one less than the last element in the array/stack? Neha Garg there is an solution using stack in O(n) (!)start from right most element and store its nge as -1 and push this elemnt into stack (2) for(n-2 to 0)& !isempty() pop the element from stack until we get number greater then arr[i] , if the elemnt at top greater than arr[i] ,then store it as nge .. and push both nge and arr[i] element. if stack gets empty then store -1 as nge of that element and push arr[i] only Manoj Can anyone help me with the parallel version of the solution? Abhishek One another method to solve the problem : 1.) Keep a separate array to store the indices of the NGE(next greatest element). Update NGE of the right most element as -1. 2.) Iterate the given input array from right to left with i as a counter ( starting from high-1 to 0). Set current = Input[i]; j //j is the index of element we want to compare For each of the element, first compare it with adjacent element (j=i+1). Compare (input[i], input[j]). If it is greater, update the NGE for i as j; If this is the not the case, compare the element at NGE[j] index with Input[i]. Compare (input[NGE[j]], input[i]); If still we get the current value smaller, keep on traversing the NGE array by updating j = NGE[j] till we get value at NGE[j] = -1; If NGE[j] == -1, we reached the element which is greatest till now. Working code for above algorithm : static void Main(string[] args) { int[] input = { 13, 7 , 6 , 18, 5 }; //int[] input = { 1,2,3,4,5,6,7,8,9 }; //int[] input = { 9,8,7,6,5,4,3,2,1 }; int[] NGE = new int[ input.Length ]; for (int i = 0; i = 0; i–) { j = i + 1; //comparing with adjacent variable first if (input[i] < input[j]) { NGE[i] = j; continue; } //traversing the NGE array to verify if the elements greater than the neighbor element are also greater than the current element or not while (NGE[j] != -1 ) { if (input[i] < input[NGE[j]]) { NGE[i] = NGE[j]; break; } else j = NGE[j]; } if (NGE[j] == -1) { NGE[i] = -1; } } for (int i = 0; i < input.Length; i++) { Console.WriteLine(" For element {0}, the next big element will be {1}", input[i], NGE[i]==-1?-1:input[NGE[i]]); } } anshul.chauhan Instead of making it so complex…we can start scanning it from right and keep putting the elements in a BST. everytime just replace the number with inorder successor of current element. Pandian Yeah. You can do this way. But, this takes O(nlogn) time. reemachugani Using BST is more intuitive though. Initialise successor as -1. During insertion (starting from the last element) if we branch to a left subtree/node, then make current node as successor. After insertion, successor is the NGE. kesar No, I think you are traversing array elements exactly two times its linear time complexity(one is for loop one is stack). Jitendra.BITS O(n) time and O(1) space!!  
#include<stdio.h>

void printNGE(int a[], int n)
{
    int max = -1;
    int i = 0;
    int j = 1;
    for (i=0,j=1; i<n, j<n; i++)
    {
		while (a[i]>a[j]||i==j)
			j++;
		if (i==n-1)
		{
				printf ("%d  -1\n", a[i]);
				break;
		}
		if (a[i]<a[j]&&a[j]>=max)
		{
			max=a[j];
			printf("%d  %d\n", a[i], max);
		}
	}
}
 
int main()
{
    int a[]= {4,2,5,25};
    int n = sizeof(a)/sizeof(a[0]);
    printNGE(a, n);
    return 0;
}
 Pandian This is a wrong approach. Consider the input : 4 2 3 5 25 The output should be 4 5 2 3 3 5 5 25 25 -1 But you get 4 5 2 5 3 5 5 25 25 -1 Ankit Chaudhary I think ur approach is wrong.Check for this input : {15,10,12,20} Abhinav Aggarwal This can be done in O(n) time and O(1) space complexity.  
/* Paste your code here (You may delete these lines if not writing code) */
 Abhinav Aggarwal Oops! My mistake. It cannot be done in O(n). hunter //my prog with o(n)space complexity and o(n)t.c void greaterelement(int a[],int n) { int *b,i,max; b=(int *)calloc(n,sizeof(int)); i=n-1; b[i]=-1; for(i=n-2;i>=0;i–) { if(a[i]<a[i+1]) { b[i]=a[i+1]; if(max<b[i]) max=b[i]; } else if(a[i]<b[i+1]) { b[i]=b[i+1]; if(max<b[i]) max=b[i]; } else if(a[i]<max) b[i]=-1; } for(i=0;i<n;i++) printf("greater value of %d=%d\n",a[i],b[i]); } rohit a There were some bugs in the code  
/*
import java.util.Stack;
public class NextGreaterElement {
	public void nge(int [] array)
	{
		Stack<Integer>stack=new Stack<Integer>();
        stack.push(array[0]);
        for(int i=1;i<array.length;i++)
        {
            int next=array[i];
            int element = stack.peek();
            if(element < next)
            {
            	System.out.println(element + "  "+ next);
            	stack.pop();
            	while(!stack.isEmpty())
            	{
            		int temp=stack.peek();
            		if(temp < next)
            		{
            			System.out.println(temp+" "+next);
            			stack.pop();
            		}
            		else
            			break;
            	}
            
            }
        	stack.push(next);
            
        }
        for(int i: stack)
        	System.out.println(i+" -1");
	}

	public static void main(String [] args)
	{
		int [] array={11,13,21,3,19,37,6};
		NextGreaterElement nge=new NextGreaterElement();
		nge.nge(array);
		
	}

}
 
 */
 bhavneet 1) push -1 into stack 2) loop i= n-1 to 0 while ( (a=pop( stack , &top)) && a<arr[i] && a!=-1); push(stack, &top, a); push(stack, &top, arr[i]); arr[i]=a; #include<stdio.h> #define MAX 10 int push( int stack[], int *top, int n) { if (*top==MAX-1) printf("overflow"); else{ (*top)++; stack[*top]=n; return 0; } } int pop(int stack[], int *top) { if (*top==-1) { return -1; } (*top)–; return stack[*top+1]; } void nge( int arr[], int n) {int i, a; int stack[MAX+2]; int top=-1; push( stack, &top, -1); for (i=n-1; i>=0; i–) { a=pop(stack, &top); while ( a< arr[i] && a!= -1)a=pop(stack, &top); push(stack , &top, a); push(stack, &top, arr[i]); arr[i]=a; } } int main() { int i; int arr[]={4, 5, 2, 25, 20, 11, 13, 21, 3} ; nge( arr, 9); for (i=0; i<9; i++) printf("%d\t", arr[i]); } jai this problem can be easily solve by using BST. steps:-> 1)construct BST of the array starting from right to left. 2)for every value its next greater no is its inorder succsesor just populate that..simple  
/* Paste your code here (You may delete these lines if not writing code) */
 Tarun Gehlaut But your solution will have complexity nlogn as insertion in bst is logn per element. So nt the best solution Paparao Veeragandham {10,200,300,100} By using BST logic :10 -> 100 Correct value is : 10 ->200  
/* Paste your code here (You may delete these lines if not writing code) */
 HLS.Nirma Space complexity of the second algorithm in the article is O(n).  

 pr6989  
//next greater element
#include<iostream>
using namespace std;
int main()
{
int a[]={3,11,33,62};
int n=sizeof(a)/sizeof(a[0]);
int max_till_now=a[n-1];
int i;
cout<<"NGE for "<<a[n-1]<<" = -1"<<endl;
for(i=n-2;i>=0;i--)
{
    if(a[i+1]>a[i])
    {
        max_till_now=a[i+1];
        cout<<"NGE for "<<a[i]<<" = "<<max_till_now<<endl;
    }
    else if(a[i]>=max_till_now)
    {
        cout<<"NGE for "<<a[i]<<" = -1 "<<endl;
    }
    else
    {
        cout<<"NGE for "<<a[i]<<" = "<<max_till_now<<endl;
    }
}
return 0;
}

 abc check for this case 6,17,10,15,20,7 https://www.seas.upenn.edu/~adhruv Dhruv I think this method can work. 1. Start from the rightmost index. Set the next greater as -1. 2. Maintain the current maximum if the element is lower than the maximum set the next greater to this else set to -1. This method should work in O(n) time Palash You need, next greater, not the greatest element on the right. Your algorithm gives latter.  
/* Paste your code here (You may delete these lines if not writing code) */
 harit @jigg: consider 20, 5,7,10,11,6,23,19,15 your algo seems to be failing for 20. appy can we implement a sorting on the array first..if the input is the last element then result is -1..else find the element using a linear search, return the index of linear search plus next greater element..Complexity:O(nlgn) uzumaki_naruto  
public static int[] getNextGreaterElementArray(int arr[]){
		if(arr == null ) return null;
		int len = arr.length;
		int nge[] = new int[len];
		nge[len-1] = -1;
		int curr = 1;
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(0);
		while(curr < len){
			while( !stack.isEmpty() && arr[stack.peek()] < arr[curr] ){
					nge[stack.pop()] = arr[curr];  
				}
				stack.push(curr);
			curr++;
		}
		while(!stack.isEmpty()){
			nge[stack.pop()] = -1;
		}
		return nge;
	}
 km Shouldn’t the method 2 push be ps->item[top]=x; and not ps->item=x;? GeeksforGeeks There seems to be some bug in Syntax Highlighting tool. It removes a particular type of expression from code. For now, we have added an extra variable top in code so that the code is highlighted properly. We will look into the main issue of syntax highlighting. Bharti Hey algorithm is nice, but the complexity of the algorithm is not O(n) but O(n-square) which is quite visible while evaluating the worst case. In case of a oppositely sorted array we have, No. of comparisons for each ‘i’ of outer loop = i-1 thus, total cost = 1+2+…+n-1 = (n-1)(n)/2 which proves its n-square order. Kindly reply back if you find anything wrong. Bharti Okay I got it, kindly ignore the post. We will never have to traverse through the stack for nothing. if we traverse into it, it means we pop elements forever. And as because maximum number of popped elements bounded by ‘n’ hence it proves we will never have to compare more than ‘2n’ times during the whole outer loop. radhakrishna DPM solution Array A : 1 to n NGE(i) : -1 if i == n max(a[i+1], NGE(i+1)) if i<n NGE[n] = -1 for i = n-1 downto 1 NGE[i] = max (a[i+1], NGE[i+1]); Julian Please check the example [1,4,2,9,7,13,3,8], for 13, your code returns 8, yet, it is actually -1 radhakrishna Thanks for pointing out. The recurrence should be as follows. NGE(i) : -1 if i == n for condition i<n : let NEXT_MAX is max(a[i+1], NGE(i+1)) -1 if NEXT_MAX < a[i] NEXT_MAX otherwise Akshat Take this array for example [1,0,3,4,12,13,-1,14] Your code will return 14 whereas according to problem statement the code should return 13. Your code is actually working for finding next GREATEST (another problem). Kindly point out if I am wrong. http://effprog.blogspot.com Sambasiva http://effprog.blogspot.com/2011/10/to-print-immediate-higher-of-all.html Agniswar Hey please check my code once..and tell if the approach is wrong..actually i feel the time complexity is O(n) here.. http://ideone.com/FdCQi Agniswar Hi,i solved this problem this way- #include #include void find_NGE(int *a,int *b,int len) { int i,j=1,k=0; int max=a[0],pos=0; for(i=1;imax) { max=a[i]; pos=i; } } i=0; while(i<len-1 && ja[i]) { b[k++]=a[j]; i++; } else j++; } } b[k]=-1; } void print(int *b,int len) { int i; for(i=0;i<len;i++) printf("%d \n",b[i]); } int main() { int a[]={13,7,6,12}; int len=sizeof(a)/sizeof(a[0]); int b[len]; find_NGE(a,b,len); print(b,len); getch(); } Time Complexity-O(n+n)=O(n),Space Complexity-O(1). Pls revert back if my appraoch is wrong.. Prateek Caire Isnt this code better as it create 2nd array in same order as first array is  
MA()
	s.Push(a[n-1])
	b[n-1] = -1
	for each i from n-2 to 0
		while(a[i] > s.Top())
			s.Pop()
		if(s.IsNotEmpty())	
			b[i] = s.Top()
		else
			b[i] = -1
			s.Push(a[i])
 Abhinav Kumar could any one please review the second method as I think this is wrong. For ex. Sample input={4,7,5,8,9} Output shown:4–>7 5–>8 7–>8 8–>9 9–>-1 But the output should be: 4–>5 7–>8 5–>8 8–>9 9–>-1 AG Read the definition of NGE, “The Next greater Element for an element x is the first greater element on the right side of x in array” so first greater element of 4 is 7 ..hence the output is correct. Hope u got it. Akula Arjun Reddy This question can be solved using BST. 1. start from end of array. 2. we have to insert each element in to BST (which also stores output of element in the node). – insert the element in BST. – store the information of how you reach that element using left pointer of its parent (flag = 0) or right pointer of its parent (flag = 1). – if flag = 0, then just check value in its parent and right child. – if flag = 1, then check only its right child Arjun Time Complexity : O(nlogn) kartik @Arjun: BST has to be selfbalancing to make sure that the time complexity is O(nLogn). As per my understanding, your approach is following. Take elements from right to left and construct a self balancing BST. When inserting an element in BST, find the inorder successor of the newly inserted node. Let me know if my understanding is correct. Prashant In case of decreasing order, the number of comparisons would be 2n, which in asymptotic terms would be O(n). Note (in case of decreasing order) every new element needs to be compared to only the top of the stack. If “current” element is not greater than top of stack, it cannot be greater than elements deeper within the stack. 5->4->3->2->1 If 3 is not greater than 4, it cannot be greater than 5. Similarly, if 1 is not greater than 2, it cannot be greater than the rest of the elements in the stack. At any moment, there can not exist elements out of decreasing order in the stack since we POP those elements in case we ever see a “Next greater element” Munish Goyal Stack (or Queue for correct order) implementation will also have worst-case runtime O(n^2) for elements in decreasing order. Every new element of outer loop needs to compare with every element in Stack (or Queue). Julian I think the method runs o(n^2) in worse case, then what is the average case analysis? Also the output order is not the same as the input order because of the use of stack. Since the stack is only used for storing the elements that don’t find NGE at current pointer, can we use queue to implement such that the output order is as the same as input order Prashant Can you elaborate on how you think the method would run in O(n2) ? There is always O(n) comparisons made, the current element is ONLY compared to top of the stack (not the entire contents of the stack). Regarding the ordering, we could ensure that in other ways. I did not take that into account as the question did not mention any such requirements. Queue might not allow you to make the comparison between the current element and the previously inserted one because of FIFO. Prashant Stack implementation in Java import java.util.Stack; public class Node { Node next; int data; Node(int data) { this.data = data; } public void getNextGreaterElement(Node node) { if(node == null) throw new IllegalArgumentException("Null not allowed"); Stack<Integer> stack = new Stack<Integer>(); while( node.next != null ) { stack.push(node.data); Node current = node.next; while(!stack.empty() && current.data > stack.peek() ) { System.out.println(stack.pop() + "–>" + current.data ); } node = current; } if(node.next == null) stack.push(node.data); while(!stack.empty()) System.out.println(stack.pop() + "–> -1"); } public static void main(String[] args) { Node n = new Node(100); Node n1 = n.next = new Node(2); Node n2 = n1.next = new Node(300); Node n3 = n2.next = new Node(4); Node n4 = n3.next = new Node(5); n.getNextGreaterElement(n); } } !gk I think using stack to store the NGE is ok. eg. let input be input[n] and output be output[n] Process the input from the right to left, max=input[n-1]; for i=(n-1)-0 { if(input[i]<max) { if(input[i]<input[i+1]) output[i]=input[i+1]; else { val=pop(stack); while(pop(stack)<input[i]) { val=pop(stack); } } output[i]=val; push(stack, output[i]); } else { output[i]=-1; max=arr[i]; } } A*  
void NextHigher(int a[], int size)
{
	int i=size-2;
	int rightmax= a[size-1];
	while(i>0)
	{
		if(a[i]>a[i-1])
		{
			rightmax=a[i];
			printf("%d  ",a[i]);
		}
		else if(rightmax>a[i])
		{
			printf("%d  ",a[i]);
		}
		else
		{
			rightmax = a[i];
		}
		i--;
	}
}
 print Next Greater Element in revers order A* void NextHigher(int a[],int size) { int i=size-2; int rightmax= a[size-1]; while(i>=0) { if(a[i] %d”,a[i],a[i+1]); } else if(rightmax>a[i]) { printf(“\n %d -> %d”,a[i],rightmax); } else { rightmax = a[i]; } i–; } printf(“\n\n”); } please comment…. abhishek I think 2nd algo does not have O(n) but it would be o(n^2) as there is one more loop inside it for popping element from stack. Please suggest anonmous hi guys, i have tried this ques. without using stack. and i think worst time complexity will be for this O(N) and space complexity O(N), hav a look a my code.  
#include<iostream>
#define N 4

using namespace std;

int main()
{
  int a[N]={3, 11, 62, 33};
  int maxindex[N];
  maxindex[N-1]=-1;
  for(int i=N-2;i>=0;i--)
  {
    if(a[i]<a[i+1])
    {
        maxindex[i]=i+1;
        continue;
    }
    int j=i+1;
    while(1)
    {
      if(maxindex[j]!=-1)
      {
        if(a[i]<a[maxindex[j]])
        {
          maxindex[i]=maxindex[j];
          break;
        }
        else
           j=maxindex[j];
      }
      else
      {
        maxindex[i]=-1;
        break;
      }
    }
  }
  for(int i=0;i<N;i++)
    if(maxindex[i]==-1)
      cout<<a[i]<<" "<<-1<<"\n";
    else
      cout<<a[i]<<" "<<a[maxindex[i]]<<"\n";
  system("pause");
}
 Prozac Interesting question.. Very nice stack implementation Abhi Though the stack method used reduces the time complexity from O(n^2) to O(n), but is’t the space requirement for stack implementation an overhead??? kartik yes, there is a trade-off between space and time, but time complexity improvement from O(n^n) to O(n) is important for any problem. We use some auxiliary space to improve time complexity in many standard algos also. bhaskar Hi, I did not read through the whole post but it seems a simple right to left traversal keeping track of the prevNGE (max of all visited elements), prevElement and currElement will solve this problem. Please correct me if I am wrong.  
arr1 /* original array */
arr2 /* for each element contains the NGE */

prevNGE = -1;
arr2[n-1] = prevNGE;
prevElement = arr1[n-1];

for (idx = n-2; idx >=0; idx--)
{  curElement = arr1[idx];
   if (prevElement > curElement)
       arr2[idx] = prevElement;
   else if (prevNGE > curElement)
       arr2[idx] = prevNGE;
   else
       arr2[idx] = -1;

  if (prevElement > prevNGE)
    prevNGE = prevElement;

  prevElement = curElement;
}
 bhaskar ok this simple approach will not work.. Jing I did the same thing in my reply. Why doesn’t it work? slimshady this was a really good problem.. might look easy at first go.. but it is subtly difficult.. thanks for the stack solution.. btw why dont you guys use higher level prog lang like java/C# ? Kapil Bari Stack algorithm failing for [3, 11, 62, 33] Sandeep @Kapil Bari: Please take a closer look at the problem statement. It says “The Next greater Element for an element x is the first greater element on the right side of x in array” So following output is correct. 3 –> 11 11 –> 62 33 –> -1 62 –> -1 Kapil Bari Oh, I thought NGE as the first greater element in the counting sequence and not the first greater element in the right side array. The algorithm is correct for ‘first greater element in the right side array’ Kapil Bari For this input [3, 11, 62, 33] the output should be [11,33,-1,-1] but the stack algorithm giving it as 3 –> 11 11 –> 62 33 –> -1 62 –> -1 which is wrong. anonymous Why this thumbs down? It seems a correct input for which the output is WRONG! kartik See below comments Arunav I think rather than a stack if we put the numbers in a queue while traversing and pop from the front, we get the output in the correct order. slimshady that is correct.. i implemented using queue and it works just fine.. Sandeep @Arunav and @slimshady: Could you please provide code for the same. slimshady  
{
        private static int[] arr;
        private static int SIZE;

        public static void run()
        {
            arr = new[] {11, 3, 13, 21};
            SIZE = arr.Length;
            printNGE();
        }

        private static void printNGE()
        {
            var queue = new Queue();
            int element;
            int next;

            queue.Enqueue(arr[0]); // to start .. push first element into array

            //stack always holds element data.. the data which we compare with next element

            for (int i = 1; i  0)
                {
                    element = queue.Dequeue();

                    while (element  {1}", element, next));
                        if (queue.Count == 0)
                            break;
                        element = queue.Dequeue();
                    }

                    if (element > next)
                    {
                        queue.Enqueue(element); // since element was bigger push that into stack for future match
                    }
                }

                queue.Enqueue(next); //push next .. so that next becomes element for next round.
            }

            while (queue.Count > 0) // remaning non matched data elements
            {
                Console.WriteLine(string.Format("{0} --> {1}", queue.Dequeue(), -1));
            }
        }
    }
 http://www.yahoo.com/ Denisha Hey, good to find soenome who agrees with me. GMTA. kartik @Arunav and @slimshady: Please provide the code or algo to do same using queue. Jing I think there is another way to look at the stack approach, which may be more straightforward to some people (like me): Suppose A is the array, G[i] is the next greater element for A[i].  
G[n-1]=-1;
for i = n-2 to 0
    if(A[i]>A[i+1])
        if(G[i+1]==-1)
            G[i]=-1;
        else
            G[i]=G[i+1]>A[i]?G[i+1]:-1;
    else if(A[i]==A[i+1])
        G[i]=G[i+1];
    else
        G[i]=A[i+1]; slimboy Hey this is a nice solution. runs in O(n) It would be great if u wrote down what u did Vinod @Jing.. Check for the array set = {7,5,6,8}. According to your algo outcome would be G={-1,6,8,-1} and which is incorrect. ss hey ppl im facing problem understanding the question.According to the second example for the array [13,7,6,12], NGE of 7 and 6 is 12.That means we need to find the next greater element on the right side of an array.Going by this logic in example 1 for an array [4,5,2,25] NGE of 5 should be 25 which is given as -1.so what is the reason for discrepancies.plz help me out. GeeksforGeeks @ss: There was a typo in the post and it was corrected as pointed by Ravichandra . Looks like you have an old version of the post. sharat04 Hi Geeks, The stack algo is not clearly explained. For example there is no mention of pushing each new element to the stack after the loop in step 2 . Hard to understand. sharat04 comments in the code are much better. rajesh 11 –> 13 13 –> 21 3 –> -1 21 –> -1 Can any body Explain this case pls i cant get it Why 3 –> -1 while there is 21 which is the greater element Ravichandra because in the input array [11,13,21,3] 3 is right most element. >>For any array, rightmost element always has next greater element as -1. Ravichandra in the first example array [4,5,2,25] I think the next greater element (NGE) for 5 is 25. in the post it is mentioned -1. correct me if I am wrong. GeeksforGeeks @Ravichandra: Thanks for pointing this out. We have corrected it. masetup We could do this in O(n) time and O(1) space if we don’t care the output sequence, in fact the sequence of output is messed even for the stack implementation. public static void printNextGreater(int[] array) { if (array == null || array.length == 0) return; System.out.println(array[array.length-1] + " -> " + -1); int max = array[array.length – 1]; for (int i = array.length – 2; i >= 0; i–) { if (array[i] >= max) { max = array[i]; System.out.println(array[i] + " -> " + -1); } else System.out.println(array[i] + " -> " + max); } } Sandeep @masetup: I think, the approach suggested by you prints the maximum greater element on right side of an element, but the question asks for first greater element. For example, following program prints. 3 -> -1 21 -> -1 13 -> 21 11 -> 21 For 11, the next greater element should be 13  class Test {
public static void printNextGreater(int[] array) {
    if (array == null || array.length == 0) return;
    System.out.println(array[array.length-1] + " -> " + -1);
    int max = array[array.length - 1];
 
    for (int i = array.length - 2; i >= 0; i--) {
        if (array[i] >= max) {
            max = array[i];
            System.out.println(array[i] + " -> " + -1);
        } else
            System.out.println(array[i] + " -> " + max);
    }
}
 
public static void main(String args[]) {
  int arr[] ={11, 13, 21, 3};
  printNextGreater(arr);
}
} masetup Hi Sandeep, you are totally correct. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
