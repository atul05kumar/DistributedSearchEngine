Check whether a given Binary Tree is Complete or not - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Check whether a given Binary Tree is Complete or not Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. See following examples. 
The following trees are examples of Complete Binary Trees
    1
  /   \
 2     3
  
       1
    /    \
   2       3
  /
 4

       1
    /    \
   2      3
  /  \    /
 4    5  6
 
The following trees are examples of Non-Complete Binary Trees
    1
      \
       3
  
       1
    /    \
   2       3
    \     /  \   
     4   5    6

       1
    /    \
   2      3
         /  \
        4    5
 Source: Write an algorithm to check if a tree is complete binary tree or not The method 2 of level order traversal post can be easily modified to check whether a tree is Complete or not. To understand the approach, let us first define a term ‘Full Node’. A node is ‘Full Node’ if both left and right children are not empty (or not NULL). The approach is to do a level order traversal starting from root. In the traversal, once a node is found which is NOT a Full Node, all the following nodes must be leaf nodes. Also, one more thing needs to be checked to handle the below case: If a node has empty left child, then the right child must be empty. 
    1
  /   \
 2     3
  \
   4 Thanks to Guddu Sharma for suggesting this simple and efficient approach. 
// A program to check if a given binary tree is complete or not
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_Q_SIZE 500

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

/* frunction prototypes for functions needed for Queue data
   structure. A queue is needed for level order tarversal */
struct node** createQueue(int *, int *);
void enQueue(struct node **, int *, struct node *);
struct node *deQueue(struct node **, int *);
bool isQueueEmpty(int *front, int *rear);

/* Given a binary tree, return true if the tree is complete
   else false */
bool isCompleteBT(struct node* root)
{
  // Base Case: An empty tree is complete Binary Tree
  if (root == NULL)
    return true;

  // Create an empty queue
  int rear, front;
  struct node **queue = createQueue(&front, &rear);

  // Create a flag variable which will be set true
  // when a non full node is seen
  bool flag = false;

  // Do level order traversal using queue.
  enQueue(queue, &rear, root);
  while(!isQueueEmpty(&front, &rear))
  {
    struct node *temp_node = deQueue(queue, &front);

    /* Ceck if left child is present*/
    if(temp_node->left)
    {
       // If we have seen a non full node, and we see a node
       // with non-empty left child, then the given tree is not
       // a complete Binary Tree
       if (flag == true)
         return false;

       enQueue(queue, &rear, temp_node->left);  // Enqueue Left Child
    }
    else // If this a non-full node, set the flag as true
       flag = true;

    /* Ceck if right child is present*/
    if(temp_node->right)
    {
       // If we have seen a non full node, and we see a node
       // with non-empty left child, then the given tree is not
       // a complete Binary Tree
       if(flag == true)
         return false;

       enQueue(queue, &rear, temp_node->right);  // Enqueue Right Child
    }
    else // If this a non-full node, set the flag as true
       flag = true;
  }

  // If we reach here, then the tree is complete Bianry Tree
  return true;
}


/*UTILITY FUNCTIONS*/
struct node** createQueue(int *front, int *rear)
{
  struct node **queue =
   (struct node **)malloc(sizeof(struct node*)*MAX_Q_SIZE);

  *front = *rear = 0;
  return queue;
}

void enQueue(struct node **queue, int *rear, struct node *new_node)
{
  queue[*rear] = new_node;
  (*rear)++;
}

struct node *deQueue(struct node **queue, int *front)
{
  (*front)++;
  return queue[*front - 1];
}

bool isQueueEmpty(int *front, int *rear)
{
   return (*rear == *front);
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{
   /* Let us construct the following Binary Tree which
      is not a complete Binary Tree
            1
          /   \
         2     3
        / \     \
       4   5     6
    */

  struct node *root  = newNode(1);
  root->left         = newNode(2);
  root->right        = newNode(3);
  root->left->left   = newNode(4);
  root->left->right  = newNode(5);
  root->right->right = newNode(6);

  if ( isCompleteBT(root) == true )
      printf ("Complete Binary Tree");
  else
      printf ("NOT Complete Binary Tree");

  return 0;
}
 Output: NOT Complete Binary Tree Time Complexity: O(n) where n is the number of nodes in given Binary Tree Auxiliary Space: O(n) for queue. Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. AlienOnEarth @Geeksforgeeks: Easy and recursive solution. int isNotCompleteBT(struct node *root) { if(root == NULL) return 0; if((root->left == NULL && root->right != NULL) || isNotCompleteBT(root->left) || isNotCompleteBT(root->right)) { return 1; } return 0; } ISha Different approach: We count the number of nodes in the tree and then check if nodes lies in their respective index if they had to be put in an array, where if root has index i then index of its left child will be 2*i+1 and for its right child will be 2*i+2. Code: #include #include using namespace std; struct btree { int data; struct btree *left; struct btree *right; }; struct btree * newNode(int d) { struct btree *n=(struct btree *)malloc(sizeof(struct btree)); n->data=d; n->left=n->right=NULL; return n; } int getNodesSum(struct btree *r) { if(r==NULL) return 0; int lh=getNodesSum(r->left); int rh=getNodesSum(r->right); return lh+rh+1; } bool isCompleteTree(struct btree *r, int i, int n ) { if((r==NULL && i=n)) return false; if(r==NULL) return true; return isCompleteTree(r->left,2*i+1,n)&&isCompleteTree(r->right,2*i+2,n); } int main() { struct btree *r=newNode(1); r->left=newNode(2); r->right=newNode(3); r->left->left=newNode(4); r->left->right=newNode(5); r->right->left=newNode(6); r->right->right=newNode(7); r->left->left->left=newNode(8); r->left->left->right=newNode(9); // r->left->right->right=newNode(11); // r->left->right->left=newNode(11); // r->right->left->left=newNode(10); int n=getNodesSum(r); if(isCompleteTree(r,0,n)) cout<<"Complete tree"<<endl; else cout<<"Incomplete tree"<<endl; return 0; } Mohaan Raja #include #include /* A binary tree node has data, pointer to left child and a pointer to right child */ struct node { int data; struct node* left; struct node* right; }; /* Helper function that allocates a new node with the given data and NULL left and right pointers. */ struct node* newNode(int data) { struct node* node = (struct node*) malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } /* Given a binary tree, print its nodes in inorder*/ int printPreorder(struct node* node) { if (node == NULL) return 1; if(node->left != NULL && node ->right == NULL ) return 1; if(node ->left == NULL && node ->right == NULL) return 1; if(node ->left == NULL && node ->right != NULL) return 0; return (printPreorder(node->left) && printPreorder(node->right)); } int max(int a, int b) { return a>b?a:b; } int height(struct node *root) { if(root==NULL) return 0; else return 1+ max(height(root->left), height(root->right)); } /* Driver program to test above functions*/ int main() { printf(“Response Values : n0-Not a Complete Binary Tree.n1- Complete Binary Tree.”); struct node *root = newNode(1); root->right= newNode(2); int response =0; if(height(root->left)right)) { response = 0; } else { response = printPreorder(root); } printf(“n%d”,response); getchar(); return 0; } lokesh921 Another approach. Do a reverse in-order traversal. Note the height of the first leaf in this traversal as max_height. If ((the height of other leaves is more than the max_height) || (a node has only one child)), the tree is not complete. else the tree is complete Vivek im xiaoguangye I have one Time O(n), Space O(lgn) solution. Please double check for me. A: Get height of tree, can check if (!node->left && node->right) as well. B: Allocate int * level = malloc(height * sizeof(int)) to count nodes on each level. Only allow deepest level to have none 2^n number of nodes C: Use preorder traversal to check the second deepest level nodes. Every one of them after first none “full node” need to be leaf. If the tree passes above three tests, it is a complete tree. Vivek O(n) solution without using any extra space and without calculating height. please go throught this solution. int isComplete(struct node *root) { if(!root) return 1; if(!root->left) { if(root->right) return 0; else return 1; } if(root->left) { if(!root->right) { if(!root->left->left && !root->left->right) return 1; else return 0; } else return isComplete(root->left)&&isComplete(root->right); } } Jayanth 1 / 2 3 / 4 5 ur code returns true for above tree which isn’t a complete tree Edit : The tree is not clear in the diagram… the tree desc is root = 1 1->left = 2; 1->right = 3; 2->left = 2->right = NULL; 3->left = 4; 3->right = 5; Vivek my code does check this condition. if (height (root->left)right)) then its not a complete binary tree ISha It is giving incorrect results for this tree: struct node *root = newNode(1); root->left = newNode(2); root->right = newNode(3); root->left->left = newNode(4); root->left->right = newNode(5); root->left->left->left = newNode(6); root->left->left->right = newNode(7); root->right->left = newNode(8); digiter How about this one? #include #include #include #include #include #include #include #include #include #include #define OUT(x) cerr << #x << ": " << (x) << endl #define REP(i, n) for (int i = 0; i < (n); ++i) #define SZ(x) ((int)x.size()) using namespace std; typedef long long LL; struct TreeNode { int data; TreeNode* left; TreeNode* right; TreeNode(int _data): data(_data), left(NULL), right(NULL) {} }; bool is_complete(TreeNode* root) { vector v; v.push_back(root); for (int i = 0; i left) v.push_back(v[i]->left); if (v[i]->right) v.push_back(v[i]->right); } for (int i = 0; i left) { if (!(i * 2 + 1 left)) return false; } if (v[i]->right) { if (!(i * 2 + 2 right)) return false; } } return true; } int main() { TreeNode *root = new TreeNode(1); root->left = new TreeNode(2); root->right = new TreeNode(3); root->left->left = new TreeNode(4); root->left->right = new TreeNode(5); root->right->right = new TreeNode(6); OUT(is_complete(root)); return 0; } Olivier Hi, Just wondering if this code will work too.. I think it should: public boolean isComplete(Node node) { if (node == null) return true; if (node.left == null && node.right != null) return false; int leftHeight = 0; int rightHeight = 0; leftHeight = node.left != null ? tree.height(node.left) : 0; rightHeight = node.right != null ? tree.height(node.right) : 0; if( rightHeight > leftHeight)return false; //right height cannot be greater than left if( leftHeight > 0 && rightHeight > 0){ //leftheight and right height differ by at most one if( (leftHeight-rightHeight) > 1)return false; }else{ if( leftHeight>1 || rightHeight > 1 )return false; } return isComplete(node.left) && isComplete(node.right); } pavansrinivas code in java… boolean isComplete(){ Node temp = root; boolean isFirstLeaf = false; Queue Q = new LinkedList(); Q.add(root); while (!Q.isEmpty()) { temp = Q.remove(); if(temp.left==null&&temp.right!=null){ return false; } if(temp.left==null&&temp.right==null){ isFirstLeaf = true; } if(isFirstLeaf&&(temp.left!=null||temp.right!=null)){ return false; } if (temp.left!=null){ Q.add(temp.left); } if (temp.right!=null){ Q.add(temp.right); } } return true; } draganwarrior can we do as follows http://ideone.com/SNXRqe rajeevprasanna Why can’t we simply check if level before the last level is completely filled or not ? 1) Calculate height(h) of the tree 2) Count number of node at level h-1 3) Check if node count is equal to 2 power(h-1) if matches, it is complete tree otherwise not. Let me know if there are any flaws in this approach. Guest need to have a check for following cases.. 1 / 2 3 4 xiaoguangye this can be checked by if (!node->left && node->right). I think you mean: 1 / 2 3 / / 4 5 xiaoguangye add: 4). check every node on the second deepest level. every node after first none leaf node needs to be leaf. Sriharsha g.r.v u aproach fals for thiscase 1 / 2 3 / 4 i mean the child should be towards left..that criteria is missing in ur algo Trilok Sharma /* c++ version */ #include #include using namespace std; struct node { int data; struct node* left; struct node* right; }; struct node* newNode(int data) { struct node* node = new(struct node); node->data = data; node->left = NULL; node->right = NULL; return(node); } bool isCompleteBT(struct node* root) { if (root == NULL) return true; bool flag = false; queue myqueue; myqueue.push(root); while(!myqueue.empty()) { struct node *temp_node = myqueue.front(); myqueue.pop(); if(temp_node->left) { if (flag == true) return false; myqueue.push(temp_node->left); } else flag = true; if(temp_node->right) { if(flag == true) return false; myqueue.push(temp_node->right); } else flag = true; } return true; } int main () { /* Let us construct the following Binary Tree which is not a complete Binary Tree 1 / \ 2 3 / \ \ 4 5 6 */ struct node *root = newNode(1); root->left = newNode(2); root->right = newNode(3); root->left->left = newNode(4); root->left->right = newNode(5); root->right->left = newNode(6); if ( isCompleteBT(root) == true ) cout<<"Complete Binary Tree"<<endl; else cout<<"NOT Complete Binary Tree"<<endl; return 0; } abhishek08aug Intelligent FAISAL Time complexity :O(n) FAISAL /* #include<iostream> using namespace std; class Node { public: int data; Node* left; Node* right; Node(int d,Node* l = 0,Node* r = 0) { data = d; right = r; left = l; } }; bool check(Node* root1,Node* root2) { if(root1 == NULL && root2 == NULL) { return true; } if(root1!=NULL && root2==NULL) { return check(root1->left,root1->right); } if(root1 == NULL && root2!= NULL) { return false; } if(root1!= NULL && root2!= NULL) { return check(root1->left,root1->right) && check(root1->left,root2->right) && check(root1->left,root2->left) && check(root2->left,root2->right); } } bool iscomplete(Node* root) { if(root == NULL) { return true; } else { return check(root->left,root->right); } } int main() { Node* root = new Node(1); root->left = new Node(2); root->right = new Node(3); root->left->left = new Node(4); root->left->right = new Node(5); root->right->left = new Node(6); root->right->right = new Node(6); root->left->left->left = new Node(6); root->left->right->right = new Node(6); cout<<iscomplete(root); system("pause"); return 0; } */ atul007 Time complexity = O(n) space complexity = O(1) int flag=0; ht=height(root); call : CheckComplete(root,ht-1,&flag) if return 1 -> Complete Binary Tree if return 0 -> NOT Complete Binary Tree  
/* Paste your code here (You may delete these lines if not writing code) */

int height(node *root)
{
int l=0,r=0;

	if(!root)
		return 0;
	l=height(root->left);
	r=height(root->right);

	if(l >= r)
		return l+1;
	else
		return r+1;

}

int CheckComplete(node *root,int height,int *flag)
{
int l=0,r=0;
static int fail=0;
	if(!root)
		return 0;
	
	l=CheckComplete(root->left,height-1,flag);
	if(l==0 && fail)
	{
		return 0;
	}
	r=CheckComplete(root->right,height-1,flag);

	if(l==0 && r==0 && height==0)
	{
		return 1;
	}
	/*by setting flag we are setting boundary for adding nodes in the tree*/
	else if(l==0 && r==0 && height==1)
	{
		*flag=height;
		return 1;
	}
	/*here left nodes exists but right doesnt , so set new boundary = 1*/
	else if(l==1 && r==0 && height==1 && *flag < height)
	{
		*flag=height;
		 return 1;
	}
	/*left node doesnt exists but right node exists ..return false*/
	else if(l==0 && r==1)
	{
		fail=1;
		return 0;
	}
	else if(l==1 && r==1 && height >= 1 && *flag < height)
	{
		return 1;
	}		
	else
	{
		return 0;
	}
}
 mrn stack implicitly takes O(n) space .. White Tiger void checkCompleteTree(struct BSTnode* root) { int level=0,count=0,flag=0,temp_flag=0; struct BSTnode* temp; insert(root); while(!isQueueEmpty()) { temp=extract(); if(flag==0) { if(temp->left!=NULL && temp->right!=NULL) { insert(temp->left); insert(temp->right); } else if(temp->right==NULL) { if(temp->left!=NULL) insert(temp->left); flag=1; } // had missed this case else { temp_flag=1; break; } } else { if(temp->left!=NULL || temp->right!=NULL) { temp_flag=1; break; } } } if(temp_flag==1) { while(!isQueueEmpty()) extract(); cout<<"Not a Complete Binary Tree"<<endl; } else { cout<<"It's a Complete Binary Tree"<<endl; } } lohith #include<iostream> using namespace std; struct node { struct node * left; int value; struct node * right; }; typedef struct node * Node; Node newNode(int val) { Node temp = new node; temp->left = NULL; temp->right = NULL; temp->value = val; return temp; } int isComplete(Node temp) { if(!temp) return 0; int a=0,b=0; a = isComplete(temp->left); b = isComplete(temp->right); if( a == -1 || b ==-1) return -1; else if( a-b<2 && a-b>-1) return a+1; return -1; } int main() { Node head = newNode(1); head->left = newNode(2); head->right = newNode(3); head->left->right = newNode(5); if(isComplete(head) == -1) cout<<"No"<<endl; else cout<<"yes"<<endl; return 0; } lohith A simple check, (left sub-tree value – right sub-tree value) =0 at each node will be sufficient to decide if a tree is complete or not. lohith A simple check, (left sub-tree value – right sub-tree value) <2 && (left sub-tree value – right sub-tree value)>=0 at each node will be sufficient to decide if a tree is complete or not. http://www.geeksforgeeks.org/archives/23449 deep @lohith i tried for many tries ur program is running well  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.geeksforgeeks.org/archives/23449 deep @lohith i tried for many tries ur program is running well Lakshmanan This algorithm fails for the following case… Counting the balance between left and right isn’t sufficient both of them can’t be complete (either if then can be full / only one of them should be complete, matching the height criteria used in ur approach)… 1 / \ 2 3 / \ / 4 5 6 / 7  
thunder:7% g++ iscomplete.C
thunder:8% ./a.out
yes
thunder:9% cat iscomplete.C
#include<iostream>
using namespace std;

struct node
{
struct node * left;
int value;
struct node * right;
};

typedef struct node * Node;

Node newNode(int val)
{
Node temp = new node;
temp->left = NULL;
temp->right = NULL;
temp->value = val;
return temp;
}

int isComplete(Node temp)
{
if(!temp)
return 0;
int a=0,b=0;

a = isComplete(temp->left);
b = isComplete(temp->right);

if( a == -1 || b ==-1)
return -1;
else if( a-b<2 && a-b>-1)
return a+1;
return -1;
}

int main()
{

Node head = newNode(1);
head->left = newNode(2);
head->left->left = newNode(3);
head->left->left->left = newNode(4);
head->left->right = newNode(5);
head->right = newNode(6);
head->right->left = newNode(7);

if(isComplete(head) == -1)
cout<<"No"<<endl;
else
cout<<"yes"<<endl;
return 0;
}
 lohith Yeah. I dint notice. Thanks. BackBencher @Lakshmanan and lohit: Can u please expalain algo, i am bit confused in code logic. Please reply ASAP.. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
