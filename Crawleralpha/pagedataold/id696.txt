Print all nodes at distance k from a given node - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print all nodes at distance k from a given node Given a binary tree, a target node in the binary tree, and an integer value k, print all the nodes that are at distance k from the given target node. No parent pointers are available. 
Consider the tree shown in diagram

Input: target = pointer to node with data 8. 
       root = pointer to node with data 20.
       k = 2.
Output : 10 14 22

If target is 14 and k is 3, then output 
should be "4 20"


 We strongly recommend to minimize the browser and try this yourself first. There are two types of nodes to be considered. 1) Nodes in the subtree rooted with target node. For example if the target node is 8 and k is 2, then such nodes are 10 and 14. 2) Other nodes, may be an ancestor of target, or a node in some other subtree. For target node 8 and k is 2, the node 22 comes in this category. Finding the first type of nodes is easy to implement. Just traverse subtrees rooted with the target node and decrement k in recursive call. When the k becomes 0, print the node currently being traversed (See this for more details). Here we call the function as printkdistanceNodeDown(). How to find nodes of second type? For the output nodes not lying in the subtree with the target node as the root, we must go through all ancestors. For every ancestor, we find its distance from target node, let the distance be d, now we go to other subtree (if target was found in left subtree, then we go to right subtree and vice versa) of the ancestor and find all nodes at k-d distance from the ancestor. Following is C++ implementation of the above approach. 
#include <iostream>
using namespace std;

// A binary Tree node
struct node
{
    int data;
    struct node *left, *right;
};

/* Recursive function to print all the nodes at distance k in the
   tree (or subtree) rooted with given root. See  */
void printkdistanceNodeDown(node *root, int k)
{
    // Base Case
    if (root == NULL || k < 0)  return;

    // If we reach a k distant node, print it
    if (k==0)
    {
        cout << root->data << endl;
        return;
    }

    // Recur for left and right subtrees
    printkdistanceNodeDown(root->left, k-1);
    printkdistanceNodeDown(root->right, k-1);
}

// Prints all nodes at distance k from a given target node.
// The k distant nodes may be upward or downward.  This function
// Returns distance of root from target node, it returns -1 if target
// node is not present in tree rooted with root.
int printkdistanceNode(node* root, node* target , int k)
{
    // Base Case 1: If tree is empty, return -1
    if (root == NULL) return -1;

    // If target is same as root.  Use the downward function
    // to print all nodes at distance k in subtree rooted with
    // target or root
    if (root == target)
    {
        printkdistanceNodeDown(root, k);
        return 0;
    }

    // Recur for left subtree
    int dl = printkdistanceNode(root->left, target, k);

    // Check if target node was found in left subtree
    if (dl != -1)
    {
         // If root is at distance k from target, print root
         // Note that dl is Distance of root's left child from target
         if (dl + 1 == k)
            cout << root->data << endl;

         // Else go to right subtree and print all k-dl-2 distant nodes
         // Note that the right child is 2 edges away from left child
         else
            printkdistanceNodeDown(root->right, k-dl-2);

         // Add 1 to the distance and return value for parent calls
         return 1 + dl;
    }

    // MIRROR OF ABOVE CODE FOR RIGHT SUBTREE
    // Note that we reach here only when node was not found in left subtree
    int dr = printkdistanceNode(root->right, target, k);
    if (dr != -1)
    {
         if (dr + 1 == k)
            cout << root->data << endl;
         else
            printkdistanceNodeDown(root->left, k-dr-2);
         return 1 + dr;
    }

    // If target was neither present in left nor in right subtree
    return -1;
}

// A utility function to create a new binary tree node
node *newnode(int data)
{
    node *temp = new node;
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

// Driver program to test above functions
int main()
{
    /* Let us construct the tree shown in above diagram */
    node * root = newnode(20);
    root->left = newnode(8);
    root->right = newnode(22);
    root->left->left = newnode(4);
    root->left->right = newnode(12);
    root->left->right->left = newnode(10);
    root->left->right->right = newnode(14);
    node * target = root->left->right;
    printkdistanceNode(root, target, 2);
    return 0;
} Output: 
4
20 Time Complexity: At first look the time complexity looks more than O(n), but if we take a closer look, we can observe that no node is traversed more than twice. Therefore the time complexity is O(n). This article is contributed by Prasant Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. Ankit Jain /*Print vertical tree*/ #include #include struct BTree { int data; struct BTree *left; struct BTree *right; int flag; }; struct BTree* insert(struct BTree *root,int data) { struct BTree *temp=root; if(temp==NULL) { temp=(struct BTree*)malloc(sizeof(struct BTree)); temp->data=data; temp->left=temp->right=NULL; } else if(temp->data>data) { temp->left=insert(temp->left,data); } else { temp->right=insert(temp->right,data); } return temp; } void firstType(struct BTree *root,int k,int h) { if((root==NULL)||(h>k)) return; else { if(h==k) printf(“%d “,root->data); firstType(root->left,k,h+1); firstType(root->right,k,h+1); } } int flag; int check(struct BTree *root,int target,int h) { if(root) { if(root->data==target) { flag=h; } else { check(root->left,target,h+1); check(root->right,target,h+1); } } } void secondType(struct BTree *root,int target,int k) { int h; if(root==NULL) return; else { flag=-1; if(root->data>target) { check(root,target,0); if(flag==-1) return; else if(flag==k) printf(“%d “,root->data); else { firstType(root->right,k-flag,1); } } else { check(root,target,0); if(flag==-1) return; else if(flag==k) printf(“%d “,root->data); else { firstType(root->left,k-flag,1); } } } secondType(root->left,target,k); secondType(root->right,target,k); } void callFirstType(struct BTree *root,int target,int k) { if(root==NULL) return; else { if(root->data==target) { firstType(root,k,0); } callFirstType(root->left,target,k); callFirstType(root->right,target,k); } } main() { struct BTree *root=NULL; //int i,a[]={10,5,20,3,7,15,25,18,30}; int i,a[]={20,8,22,4,12,10,14}; for(i=0;i<7;i++) { root=insert(root,a[i]); } callFirstType(root,14,3); secondType(root,14,3) ; //inorder(root); //printf("n"); } algo1 Someone please help me understand this Ravi Kiran ->find the height of given node ->height of given node -/+ height of other node = distance then print node void printNodeatDistanceK(bnode* root,int givenNodesHeight,int level,int distance) { if(root== NULL) return; if((level-givenNodesHeight == distance) || (level+givenNodesHeight == distance)) { //print node } printNodeatDistanceK(root->left,givenNodesHeight,level+1,distance); printNodeatDistanceK(root->right,givenNodesHeight,level+1,distance); } void FindNodeHeight(bnode* root,bnode* givenNode,int level,int * height) { if(root== NULL) return; if(root==givenNode) { *height = level; } FindNodeHeight(root->left,givenNode,level+1,height); FindNodeHeight(root->right,givenNode,level+1,height); } main() { int a; FindNodeHeight(root,randomNode,0,&a); int distance = 2; printNodeatDistanceK(root,a,0,distance); } Hiccup ———- tree.h ———- #include #ifndef TREE_H #define TREE_H using namespace std; struct Node { int key; Node *left , *right; Node() : key(-1), left(NULL), right(NULL) { } ~Node() { } }; class Tree { Node *root; Node *targetNode; int k, found, exitFlag, left; public: Tree() : root(NULL), targetNode(NULL), k(-1), found(0), exitFlag(0), left(-1) {} ~Tree(); void insert(int key); void inorder(); void preorder(); void postorder(); void print(int key, int d); private: void insert(Node *root, int key); void inorder(Node *root); void preorder(Node *root); void postorder(Node *root); void freeTree(Node *root); void forwardPrint(Node *node, int d); void print(Node *root); int searchTarget(Node *root, int k); void reset_flags(); }; #endif ————– tree.cpp ————- #include “tree.h” using namespace std; const int SUCCESS = 1; void Tree::insert(int key) { if (root == NULL) { Node *newNode = new Node(); newNode->key = key; root = newNode; } else { insert(root, key); } } void Tree::insert(Node *node, int key) { Node *newNode = new Node(); newNode->key = key; if (key > node->key) { if (node->right) { insert(node->right, key); } else { node->right = newNode; } } else { if (node->left) { insert(node->left, key); } else { node->left = newNode; } } } void Tree::inorder() { inorder(root); } void Tree::inorder(Node *node) { if (node) { inorder(node->left); cout <key <right); } } void Tree::preorder() { preorder(root); } void Tree::preorder(Node *node) { if (node) { cout <key <left); preorder(node->right); } } void Tree::postorder() { postorder(root); } void Tree::postorder(Node *node) { if (node) { postorder(node->left); postorder(node->right); cout <key << " "; } } void Tree::forwardPrint(Node *node, int d) { if (node) { if (d == k) { cout <key <left, d + 1); forwardPrint(node->right, d + 1); } } void Tree::reset_flags() { found = 0; targetNode = NULL; k = -1; exitFlag = 0; left = -1; } void Tree::print(int key, int d) { reset_flags(); if (searchTarget(root, key) == SUCCESS) { k = d; if (key key) left = 1; else left = 0; print(root); } else { cout <key == k) { targetNode = node; return 1; } if (k key) searchTarget(node->left, k); else searchTarget(node->right, k); } else { return 0; } } void Tree::print(Node *node) { if (node && !exitFlag) { if (node == targetNode) { found = 1; forwardPrint(targetNode, 0); } else { print(node->left); print(node->right); } if (found) { if (node != targetNode) { if (k == 0 && node == root) { cout <key < 0 && node == root) { if (left) forwardPrint(node->right, 1); else forwardPrint(node->left, 1); exitFlag = 1; } else { k–; if (targetNode->key key) forwardPrint(node->right, 1); else forwardPrint(node->left, 1); } } } } } Tree::~Tree() { freeTree(root); } void Tree::freeTree(Node *node) { if (node) { freeTree(node->left); freeTree(node->right); delete node; } } —————– driver.cpp —————— #include #include “tree.h” using namespace std; int main() { Tree *tree = new Tree(); tree->insert(20); tree->insert(22); tree->insert(8); tree->insert(12); tree->insert(4); tree->insert(10); tree->insert(14); cout << "In-order :: " <inorder(); cout <print(14, 3); cout <print(8, 2); cout <print(8, 1); cout <print(20, 2); delete tree; return 0; } Siva Krishna We can do like this… Dist(a, b) = distance between two nodes a, b lca(a, b) = least common ancestor of a, b Dist(Node, target) = Dist(root, Node) + Dist(root, target) – 2 * Dist(root, lca(Node, target)); for every node if Dist(Node, target) == k then print Node Guest What is a and b here. How do you find it? Siva Krishna a and b can be any nodes. Dist(root, Node) can be find by traversing the given tree in level order and LCA of two nodes can be found using any standard approach. Jothi Thanks for posting this Solution! I have a question… int dl = printkdistanceNode(root->left, target, k); I dont understand this part. dl will be always (-1) or 0 in the recursive calls. So how is it storing the distance of the target from the node. For example, If k=2 and the target is two levels below root, then dl has to be 1, so that if(dl + 1 = k) would be true, right? Please correct be if I am wrong. GeeksforGeeks Please take a closer look, the function also returns dl+1 and dr+1 that means the return value would be more than 1, if the ancestor is higher than 1 edge. piyush.ag This one is iterative approach. #include #include #include using namespace std; struct node { int data; struct node* left; struct node* right; }; typedef struct node Node; Node *newNode(int data) { Node* temp = (Node *)malloc(sizeof(Node)); temp->data = data; temp->left = NULL; temp->right = NULL; return temp; } void kDistanceChildNode(Node *root , int k , bool left , bool right) { if (root==NULL || k < 0) return; if (k==0) { cout <data << " "<left , k-1 , true , true); if (right) kDistanceChildNode(root->right , k-1 , true , true); } void kDistanceNodes(Node *root , Node *node , int k) { if (root == NULL || k == 0) return; if (root == node) { kDistanceChildNode(node , k , true , true); return; } stack s; stack mainStack; s.push(root); while(s.empty() == false) { Node *current = s.top(); //cout <data ” <data<left == s.top() || mainStack.top()->right == s.top())) { //cout <left” <left->data <<" " <right” <right->data << " "<< "s.top()" <data << " " <left != NULL && current->right != NULL) mainStack.push(current); s.pop(); if (current->right) s.push(current->right); if (current->left) s.push(current->left); } mainStack.push(s.top()); Node *parent = mainStack.top(); while(mainStack.empty() == false && k >= 0) { if (mainStack.top()==node) kDistanceChildNode(mainStack.top(), k, true, true); else if(mainStack.top()->left == parent) kDistanceChildNode(mainStack.top(), k, false, true); else kDistanceChildNode(mainStack.top(), k, true, false); k–; parent = mainStack.top(); mainStack.pop(); } /*while(mainStack.empty()==false) { cout <data <left = newNode(10); root->right = newNode(25); root->left->left = newNode(6); root->left->right = newNode(12); root->right->left = newNode(16); root->right->right = newNode(28);*/ node * root = newNode(20); root->left = newNode(8); root->right = newNode(22); root->left->left = newNode(4); root->left->right = newNode(12); root->left->right->left = newNode(10); root->left->right->right = newNode(14); node * target = root->left->right; Node *node = root->left->right; kDistanceNodes(root , node , 2); } int main() { mainFunction(); return 0; } Kiran Good one, thanks raja good one Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
