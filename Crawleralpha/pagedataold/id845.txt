Find the maximum element in an array which is first increasing and then decreasing - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find the maximum element in an array which is first increasing and then decreasing Given an array of integers which is initially increasing and then decreasing, find the maximum value in the array. 
Input: arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1}
Output: 500

Input: arr[] = {1, 3, 50, 10, 9, 7, 6}
Output: 50

Corner case (No decreasing part)
Input: arr[] = {10, 20, 30, 40, 50}
Output: 50

Corner case (No increasing part)
Input: arr[] = {120, 100, 80, 20, 0}
Output: 120
 Method 1 (Linear Search) We can traverse the array and keep track of maximum and element. And finally return the maximum element. 
#include <stdio.h>

int findMaximum(int arr[], int low, int high)
{
   int max = arr[low];
   int i;
   for (i = low; i <= high; i++)
   {
       if (arr[i] > max)
          max = arr[i];
   }
   return max;
}

/* Driver program to check above functions */
int main()
{
   int arr[] = {1, 30, 40, 50, 60, 70, 23, 20};
   int n = sizeof(arr)/sizeof(arr[0]);
   printf("The maximum element is %d", findMaximum(arr, 0, n-1));
   getchar();
   return 0;
}
 Time Complexity: O(n) Method 2 (Binary Search) We can modify the standard Binary Search algorithm for the given type of arrays. i) If the mid element is greater than both of its adjacent elements, then mid is the maximum. ii) If mid element is greater than its next element and smaller than the previous element then maximum lies on left side of mid. Example array: {3, 50, 10, 9, 7, 6} iii) If mid element is smaller than its next element and greater than the previous element then maximum lies on right side of mid. Example array: {2, 4, 6, 8, 10, 3, 1} 
#include <stdio.h>

int findMaximum(int arr[], int low, int high)
{

   /* Base Case: Only one element is present in arr[low..high]*/
   if (low == high)
     return arr[low];

   /* If there are two elements and first is greater then
      the first element is maximum */
   if ((high == low + 1) && arr[low] >= arr[high])
      return arr[low];

   /* If there are two elements and second is greater then
      the second element is maximum */
   if ((high == low + 1) && arr[low] < arr[high])
      return arr[high];

   int mid = (low + high)/2;   /*low + (high - low)/2;*/

   /* If we reach a point where arr[mid] is greater than both of
     its adjacent elements arr[mid-1] and arr[mid+1], then arr[mid]
     is the maximum element*/
   if ( arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1])
      return arr[mid];

   /* If arr[mid] is greater than the next element and smaller than the previous 
    element then maximum lies on left side of mid */
   if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1])
     return findMaximum(arr, low, mid-1);
   else // when arr[mid] is greater than arr[mid-1] and smaller than arr[mid+1]
     return findMaximum(arr, mid + 1, high);
}

/* Driver program to check above functions */
int main()
{
   int arr[] = {1, 3, 50, 10, 9, 7, 6};
   int n = sizeof(arr)/sizeof(arr[0]);
   printf("The maximum element is %d", findMaximum(arr, 0, n-1));
   getchar();
   return 0;
}
 Time Complexity: O(Logn) This method works only for distinct numbers. For example, it will not work for an array like {0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 3, 3, 2, 2, 1, 1}. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 1 Time complexity of insertion sort when there are O(n) inversions? How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Find the closest pair from two sorted arrays Print all elements in sorted order from row and column wise sorted matrix Length of the largest subarray with contiguous elements | Set 1 Tags: Divide and Conquer Tweet Writing code in comment? Please use ideone.com and share the link here. meh I believe this doesn’t handle the case when array has duplicated elements, right? For example: { 4, 4, 4, 4, 5 } or { 5, 4, 4, 4, 4 } There’s no way to know which side to choose when splitting the problem based on mid index. pd60193 Why cant we just do this and reduce the number of if’s everytime we recurse. Another argument n is passed which is nothing but size of the array.  


int BinSearch(int *a,int low,int high,int n)
{
	int mid;
	mid=(low+high)/2;
	if(mid==n-1||mid==0)
		return mid;
	if(a[mid-1]<a[mid]&&a[mid]>a[mid+1])
		return mid;
	else
	if(a[mid-1]<a[mid]&&a[mid]<a[mid+1])
		return BinSearch(a,mid+1,high,n);
	else
	if(a[mid-1]>a[mid]&&a[mid]>a[mid+1])
		return BinSearch(a,low,mid-1,n);
}
 Ravisoni1776 for arr[] = {1, 3, 50, 10, 12, 7, 6} program will give output 12 instead of 50, right code is:(a small change in GFG program) #include int findMaximum(int arr[], int low, int high) { int a,b; /* Base Case: Only one element is present in arr[low..high]*/ if (low == high) return arr[low]; /* If there are two elements and first is greater then the first element is maximum */ if ((high == low + 1) && arr[low] >= arr[high]) return arr[low]; /* If there are two elements and second is greater then the second element is maximum */ if ((high == low + 1) && arr[low] < arr[high]) return arr[high]; int mid = (low + high)/2; /*low + (high - low)/2;*/ /* If we reach a point where arr[mid] is greater than both of its adjacent elements arr[mid-1] and arr[mid+1], then arr[mid] is the maximum element*/ if ( arr[mid] > arr[mid + 1] && arr[mid] > arr[mid – 1]) return arr[mid]; /* If arr[mid] is greater than the next element and smaller than the previous element then maximum lies on left side of mid */ if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1]) return findMaximum(arr, low, mid-1); // **if arr[mid] is less than both previous and next element in array if (arr[mid] < arr[mid + 1] && arr[mid] < arr[mid - 1]) { a = findMaximum(arr,low,mid-1); b = findMaximum(arr,mid+1,high); if(a>b) return a; else return b; } else // when arr[mid] is greater than arr[mid-1] and smaller than arr[mid+1] return findMaximum(arr, mid + 1, high); } /* Driver program to check above functions */ int main() { int arr[] = {1, 3, 50, 10, 12, 7, 6}; int n = sizeof(arr)/sizeof(arr[0]); printf(“The maximum element is %d”, findMaximum(arr, 0, n-1)); getchar(); return 0; } Ravisoni1776 take the array {1, 3, 50, 10, 12, 7, 6} instead of {1, 3, 50, 10, 9, 7, 6} will give the output 12 which is wrong!!! program will give right solution if there is a small manipulation: #include int findMaximum(int arr[], int low, int high) { int a,b; /* Base Case: Only one element is present in arr[low..high]*/ if (low == high) return arr[low]; /* If there are two elements and first is greater then the first element is maximum */ if ((high == low + 1) && arr[low] >= arr[high]) return arr[low]; /* If there are two elements and second is greater then the second element is maximum */ if ((high == low + 1) && arr[low] < arr[high]) return arr[high]; int mid = (low + high)/2; /*low + (high - low)/2;*/ /* If we reach a point where arr[mid] is greater than both of its adjacent elements arr[mid-1] and arr[mid+1], then arr[mid] is the maximum element*/ if ( arr[mid] > arr[mid + 1] && arr[mid] > arr[mid – 1]) return arr[mid]; /* If arr[mid] is greater than the next element and smaller than the previous element then maximum lies on left side of mid */ if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1]) return findMaximum(arr, low, mid-1); // **if arr[mid] is less than both previous and next element in array if (arr[mid] < arr[mid + 1] && arr[mid] < arr[mid - 1]) { a = findMaximum(arr,low,mid-1); b = findMaximum(arr,mid+1,high); if(a>b) return a; else return b; } else // when arr[mid] is greater than arr[mid-1] and smaller than arr[mid+1] return findMaximum(arr, mid + 1, high); } /* Driver program to check above functions */ int main() { int arr[] = {1, 3, 50, 10, 12, 7, 6}; int n = sizeof(arr)/sizeof(arr[0]); printf(“The maximum element is %d”, findMaximum(arr, 0, n-1)); getchar(); return 0; } skulldude The following is the iterative version of the above provided recursive solution. It has some improvements. 1) Two elements case need not be handled separately( makes for cleaner code ) 2) Number of condition checks is reduced. On the downside, its complexity is Theta(log n) and not O(log n) Code:  
int findMaxElement(int a[],int len){
	int low=0,high=len-1;
	
	while(low<high){
		int mid=(low+high)/2;
		if(a[mid]>a[mid+1])
			// the maximum element can either be a[mid] or before it
			high=mid;
		else
			// the maximum element should be present on the right half
			low=mid+1;
	}
	
	return a[low];
}

 Please comment if you find bugs in it. -Balasubramanian.N srb if (arr[mid] > arr[mid + 1] && arr[mid] arr[mid + 1]) return findMaximum(arr, low, mid-1); as this is giving correct answer…plz correct me if i m wrong and some test cases… as Please check the output for the following input 1,3,5,7,7,7,7,7,9,9,9,9,5,2,1 Its giving wrong answer.:( GeeksforGeeks Please see the note “This method works only for distinct numbers. For example, it will not work for an array like {0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 3, 3, 2, 2, 1, 1}.” Anurag #include int findmax(int a[],int low, int up) { int mid; if(low==up) return a[low]; mid=(low+up)/2; if(a[mid+1]>=a[mid]) findmax(a,mid+1,up); else if(a[mid-1]>=a[mid]) findmax(a,low,mid-1); else return a[mid]; } int main() { int a[100],i,n; scanf(“%d”,&n); for(i=0;i<n;i++) scanf("%d",&a[i]); printf("%d\n",findmax(a,0,n-1)); } abhishek08aug  
#include<stdio.h>
 
int find_maximum(int array[], int start, int end) {
  if(start<end) {
    int mid=(start+end)/2;
    if((mid-1<start || array[mid-1]<array[mid]) && (mid+1>end || array[mid]>array[mid+1])) {
      return array[mid];
    } else if(mid-1>=start && array[mid-1]>array[mid]) {
      return find_maximum(array, start, mid-1);
    } else if(mid+1<=end && array[mid+1]>array[mid]) {
      return find_maximum(array, mid+1, end);
    } 
  } else if(start==end) {
    return array[start];
  } else if(start>end) {
    return -99999;
  }
}
 
int main(){
  int array[]={8, 10, 20, 80, 100, 200, 600, 500, 3, 2, 1};
  int n=sizeof(array)/sizeof(array[0]);
  printf("Maximum element is %d", find_maximum(array, 0, n-1));
  return 0;
}
 Maximum element is 600 Ganesh You can find java code here: /** * Given an array of integers which is initially increasing and then decreasing, * find the maximum value in the array. * Input: arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1} * Output: 500 * * @author GAPIITD * */ public class MaxElementInArrayWhichIsFirstIncreasingAndThenDecreasing { public static void main(String[] args) { int arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1}; System.out.println(findMaxElement(arr)); } private static int findMaxElement(int[] arr) { int start = 0, end = arr.length – 1; while (start != end) { if (start + 1 == end) return (arr[start] > arr[end] ? arr[start] : arr[end]); int mid = (start + end) / 2; if (arr[mid-1] < arr[mid] && arr[mid] > arr[mid+1]) return arr[mid]; if (arr[mid-1] < arr[mid] && arr[mid] < arr[mid+1]) start = mid + 1; if (arr[mid-1] > arr[mid] && arr[mid] > arr[mid+1]) end = mid – 1; } return arr[start]; } } mrn  
/* Paste your code here (You may delete these lines if not writing code) */
int max=0,mid=0;
	int l=0,r=n-1;
	while(l<=r)
	{
		mid=(l+r)/2;
		if(max < a[mid])
			max=a[mid];
		if(a[mid] < a[mid+1])
			l=mid+1;
		else
			r=mid-1;
	}
 kkkmaurya what about if middle element is smaller than both left & right element, in this situation compare left & right element based on max value decide either left or right, you should add this condition in your binary search algorithm. i.e. A[]={3,500,10,800,9} max should be 800. but your algo doesn’t say about this condition.  
/* Paste your code here (You may delete these lines if not writing code) */
 kkkmaurya ohh got the question, that input is not valid. g33k I think the if and else condition for checking the left and right side is not correct. For a case like 7 8 1 2 3 4 5 6, the mid element is 3rd index hence element 2. Now, 2 1, which as per your logic falls in case iii) of method 2. It says it should lie at right, which is clearly not right. Instead of checking [mid+1] and [mid-1] element, we should compare [mid] with [low] and then take the left or right side.  
/* Paste your code here (You may delete these lines if not writing code) */
 hmmmm @g33k the question statement says that the array is initially increasing and then decreasing, so { 7 8 1 2 3 4 5 6 } is not a valid test case. http://www.geeksforgeeks.org/archives/17028 vivek int findMax(int *A, int beg, int end){ if(beg > end) return -999999999;//redundant if(beg == end) return A[beg]; int mid = (beg + end)/2; if(A[mid] <= A[mid+1])//Still Increasing return findMax(A, mid+1, end); else return findMax(A, beg, mid); } Yogesh Mani  
#include <iostream>
#include <conio.h>
#include<stdio.h>
using namespace std;
/*
  Name: Decrease Search Space
  Copyright: 
  Author: Yogesh Mani Tripathi
  Date: 03-06-12 12:21
*/

struct Index{
 int val;
 int index;
 Index(){
   val = 0;
   index = 0;
 }
} retVal;

Index getMaxElem(int* arr, int leftIndex, int rightIndex) {
  if(0 == rightIndex){
       //to prevent arraybound access when array is having only one element
      retVal.val   = arr[0];
      retVal.index = 0;
      return retVal;   
  }
  int mid  = (leftIndex+rightIndex)/2;
  if(mid == rightIndex){  
    //to take care of only increasing sequence
    if(arr[mid] >arr[mid-1]) {
      retVal.val = arr[mid];
      retVal.index = mid;
      return retVal;    
    }
  }
  
  if(mid == leftIndex){        
    //to take care of only decreasing sequence
    if(arr[mid] > arr[mid+1]) {
      retVal.val = arr[mid];
      retVal.index = mid;
      return retVal;      
    }
  }

  if((arr[mid-1] < arr[mid]) && (arr[mid] > arr[mid + 1])) {
    retVal.val = arr[mid];
    retVal.index = mid;
    return retVal;
  }

  if(leftIndex == rightIndex) {
    return retVal;           
  }    
  
  if(arr[mid] < arr[mid+1]){
    getMaxElem(arr,mid+1,rightIndex);
  }else /*if (arr[mid] > arr[mid+1])*/{
    getMaxElem(arr,leftIndex, mid-1);      
  }
}
int main(void) {
  //case 1: int arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1};  
  //case 2: int arr[] =  {1, 3, 50, 10, 9, 7, 6};
  //case 3: int arr[] = {10, 20, 30, 40, 50};
  //case 4: int arr[] = {120, 100, 80, 20, 0};
  //cannot handle int arr[] = 
  //{8,8,8,8,10,10,10,10 ,20,20,20, 80,80,80,
  //100, 100,100, 200,200,200, 400, 400,400,
  //500, 500,500, 3, 3, 3,3, 2,2,2,2, 1,1,1,
  //1};  
  int arr[] = {8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1};  
  int size = sizeof(arr)/sizeof(arr[0]);
  (getMaxElem(arr,0,size-1));
  cout<<"\nreturned Index:"<<retVal.index <<" Value"<<retVal.val;
  getch();
  return 0;    
}


 jk  
int max(int a, int b){return (a > b) ? a : b;}

int maxElementRec(int* array, int startIndex, int endIndex)
{
	if(startIndex == endIndex) return array[startIndex];
	if(array[startIndex] > array[startIndex + 1]) return array[startIndex];
	if(array[endIndex] > array[endIndex - 1]) return array[endIndex];
	int midIndex = (startIndex + endIndex)/2;
	if(array[midIndex] > array[midIndex - 1] && array[midIndex] > array[midIndex + 1]) return array[midIndex];
	if(array[midIndex] > array[midIndex - 1] || array[midIndex] < array[midIndex + 1]) return maxElementRec(array, midIndex + 1, endIndex);
	if(array[midIndex] < array[midIndex - 1] || array[midIndex] > array[midIndex + 1]) return maxElementRec(array, startIndex, midIndex - 1);
	return max(maxElementRec(array, startIndex, midIndex - 1), maxElementRec(array, midIndex + 1, endIndex));
}

int maxElement(int* array, int size)
{
	return maxElementRec(array, 0, size - 1);
}

int main()
{
	int arr[] = {0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 3, 3, 2, 2, 1, 1};
	printf("%d\n", maxElement(arr, 19));
}
 kartikaditya  
public class MaxInIncAndDec {
    private static int getMaxInIncAndDec(int a[], int start, int end) {
        if (start > end) {
            return Integer.MIN_VALUE;
        }

        int mid = (start + end) >> 1;
        while (start < end) {
            if (a[mid] > a[mid + 1]) {
                end = mid;
            } else if (a[mid] < a[mid + 1]) {
                start = mid + 1;
            } else {
                int leftMax = getMaxInIncAndDec(a, start, mid - 1);
                int rightMax = getMaxInIncAndDec(a, mid + 1, end);
                if (leftMax == Integer.MIN_VALUE) {
                    return rightMax;
                }
                if (rightMax == Integer.MIN_VALUE) {
                    return leftMax;
                }
                return (leftMax > rightMax) ? leftMax : rightMax;
            }
            mid = (start + end) >> 1;
        }
        return a[mid];
    }

    public static int getMaxInIncAndDec(int a[]) {
        return getMaxInIncAndDec(a, 0, a.length - 1);
    }

    public static void main(String args[]) {
        System.out.println(getMaxInIncAndDec(new int[]{8, 10, 20, 80, 100, 200, 400, 500, 3, 2, 1}));
        System.out.println(getMaxInIncAndDec(new int[]{1, 3, 50, 10, 9, 7, 6}));
        System.out.println(getMaxInIncAndDec(new int[]{10, 20, 30, 40, 50}));
        System.out.println(getMaxInIncAndDec(new int[]{120, 100, 80, 20, 0}));
        System.out.println(getMaxInIncAndDec(new int[]{0, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 5, 3, 3, 2, 2, 1, 1}));
    }
}
 Krishs Well simple enough …  
int max_ ( int arr[] , int len )
 { 
    int index = 0 ;
     for( index = 0; index < len ; index++ ) 
      { 
         if( index != (len -1) && arr[index] > arr[index+1] ) { return arr[index]; } 
      }
    return arr[len-1];
   }
 kartik This looks similar to method 1 (linear search). Time complexity of this would be O(n). Wayne If the array elements aren’t necessarily distinct, then in the extreme case, all elements are the same. Method 2 would degrade to O(N) solution since you have to scan both sides linearly until you meet anything breaking the even.  
/* Paste your code here (You may delete these lines if not writing code) */
 sandeep what if the numbers are repeated.like (0 1 1 2 2 2 2 2 3 4 4 5 3 3 2 2 1 1) and you find mid whose left and right both element are equal to mid how will you decide which part to check.. left or right? GeeksforGeeks @sandeep: Thanks for pointing out this case. The method 2 doesn’t always work if there are duplicates in array. We have added the same to the original post. Keep it up! Shreyas @Sandeep: they said increasing and then decreasing so no duplicates allowed. 1 2 3 0 -1 but can never be 1 2 2 3.  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.geeksforgeeks.org/archives/17028 vivek works for duplicates too also we need to check only two elems at each step  
int findMax(int *A, int beg, int end){
    if(beg > end)
       return -999999999;
    if(beg == end)
       return A[beg];
    
    int mid = (beg + end)/2;
    
    if(A[mid] <= A[mid+1])//Still Increasing
       return findMax(A, mid+1, end);
    else
       return findMax(A, beg, mid);
}    
 http://www.shantanutushar.com shaan7 Why not start from the beginning and when you find a number less than previous number, the previous number is max? Nithish @shaan: That would have a worst case complexity of o(N). Consider the example given in the problem itself – Input: arr[] = {10, 20, 30, 40, 50}. http://www.shantanutushar.com shaan7 Ah yes, my bad, actually I was suggesting an improvement for Method1. abbie @Nithish: since the array is first increasing and then decreasing so we need not to compare all the elements in Method 1, the moment we find any element greater than current max element we can stop the iteration in Method 1. It’ll reduce the no of comparisons though it’ll not improve the complexity that much. Correct me if I am wrong. Thanx Priyanka  
#include<stdio.h>
#define n 8
void main()
{
int a[n];
int l=0,i,h=n-1,m;
for(i=0;i<n;i++)
scanf("%d",&a[i]);
while(l<=h)
{
	m=(l+h)/2;
	if(m==n-1)
	break;
	else if(a[m]>a[m+1] && a[m]>a[m-1] && m<n-1 && m>0)
	break;
	else if(a[m]<a[m+1] && m<n-1)
	l=m+1;
	else if(a[m]>a[m+1] && m<n-1)
	h=m-1;
}
printf("%d",a[m]);
}
 gowtham  
i am new here so correct me if i am wrong. @priyanka you have used m<n-1 in every else if conditions. considering your first if statement there can be only two possibilities. m<n-1 or m==1. if the first if(m==n-1) fails then we will be left with only m<n-1,then whats the need of using it again. please clarify me.
 gowtham i am new here so correct me if i am wrong. @priyanka you have used m  
 
 Ankur Iterative code below which is easier to understand  
int findMaximum(int a[], int n){
    int low=0;
    int high=n-1;
    int mid;
    while(low<=high){
       mid=low+(high-low)/2;
       if((mid==0 || a[mid-1]<a[mid]) && (mid==n-1 || a[mid]>a[mid+1])){ //Point Found
           cout<<a[mid]<<" ";
	   return a[mid];
       }
/*Increasing Part of Array*/	   
       else if((mid==0 || a[mid-1]<a[mid]) && (mid==n-1 || a[mid]<a[mid+1])){
           cout<<a[mid]<<" ";
	   low=mid+1;       
       }	   
/*Decreasing Part of Array */
       else if((mid==0 || a[mid-1]>a[mid]) && (mid==n-1 || a[mid]>a[mid+1]))//Decreasing
           high=mid-1;       
    }    
}
 http://www.cppblog.com/flyinghearts flyinghearts  

int findMaximum(const int arr[], size_t len)
{
  assert(len > 0);
  size_t low = 0, high = len - 1;
  while (low != high) {
    size_t mid = low + (high - low) / 2;
    if (arr[mid] < arr[mid + 1]) low = mid + 1;
    else high = mid;
  }
  return arr[low];
}

 sachin This will not will for int[] a = {10,15,20,12,5,6,25}; It will return 20 instead of 25  
/* Paste your code here (You may delete these lines if not writing code) */
 Nithish @sachin: The question reads – “Given an array of integers which is initially increasing and then decreasing,…”. So your input is not for this question.  
/* Paste your code here (You may delete these lines if not writing code) */
 sachin Ohh I see ! thanks nitish  
/* Paste your code here (You may delete these lines if not writing code) */
 Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
