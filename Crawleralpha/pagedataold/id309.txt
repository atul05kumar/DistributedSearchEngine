Find day of the week for a given date - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Find day of the week for a given date Write a function that calculates the day of the week for any particular date in the past or future. A typical application is to calculate the day of the week on which someone was born or some other special event occurred. Following is a simple C function suggested by Sakamoto, Lachman, Keith and Craver to calculate day. The following function returns 0 for Sunday, 1 for Monday, etc. 
/* A program to find day of a given date */
#include<stdio.h>

int dayofweek(int d, int m, int y)
{
    static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
    y -= m < 3;
    return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
}

/* Driver function to test above function */
int main()
{
    int day = dayofweek(30, 8, 2010);
    printf ("%d", day);

    return 0;
}
 Output: 1 (Monday) See this for explanation of the above function. References: http://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week This article is compiled by Dheeraj Jain and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above           Related Topics: Job Sequencing Problem | Set 1 (Greedy Algorithm) Multiply two polynomials Algorithm Practice Question for Beginners | Set 1 Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Binomial Heap Print all increasing sequences of length k from first n natural numbers Find n’th number in a number system with only 3 and 4 Minimum Cost Polygon Triangulation Tags: MathematicalAlgo Tweet Writing code in comment? Please use ideone.com and share the link here. Rustam Hussain DAY OF WEEK FOR GIVEN DATE>>> #include #include #include using namespace std; int main() { int dd,mm,yy,odd_days=0,leap_yr=0,ordinary_yr=0,prev_year=0,new_year=0,days=0,i; char *day[]={“sun”,”mon”,”tues”,”wed”,”thu”,”fri”,”sat”}; int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; cout<>dd>>mm>>yy; if((yy%4==0) && (yy %100!=0) || (yy%400==0)) month[1]=29; prev_year=yy-1; prev_year=prev_year%400; new_year=prev_year/100; odd_days=new_year*5; new_year=prev_year%100; leap_yr=new_year/4; ordinary_yr=new_year-leap_yr; odd_days=odd_days+(leap_yr*2)+(ordinary_yr*1); for(i=0;i<mm-1;i++) { //cout<<month[i]<7) odd_days=odd_days%7; cout<<day[odd_days]; getch(); return 0; } Rustam Hussain int main() { int dd,mm,yy,odd_days=0,leap_yr=0,ordinary_yr=0,prev_year=0,new_year=0,days=0,i; char *day[]={“sun”,”mon”,”tues”,”wed”,”thu”,”fri”,”sat”}; int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; cout<>dd>>mm>>yy; if((yy%4==0) && (yy %100!=0) || (yy%400==0)) month[1]=29; prev_year=yy-1; prev_year=prev_year%400; new_year=prev_year/100; odd_days=new_year*5; new_year=prev_year%100; leap_yr=new_year/4; ordinary_yr=new_year-leap_yr; odd_days=odd_days+(leap_yr*2)+(ordinary_yr*1); for(i=0;i7) odd_days=odd_days%7; cout<<day[odd_days]; getch(); return 0; } a_b how to find out the array t[]? Saurabh Vats  
int DayOfWeek(day, month, year) 
{
    var a = Math.floor((14 - month) / 12);
    var y = year - a;
    var m = month + 12 * a - 2;
    var d = ( day + y + y/4 - y/100 + y/400 + (31 * m)/12 )%7;
    return d+1;
}
 The value of d is 0 for a Sunday, 1 for a Monday, 2 for a Tuesday, etc. Saurabh Vats var a = (14-month)/12; // no need of floor Praneeth Hi Saurabh, Can you please explain what is the purpose of (31*m)/12 kg1020 can anybody explain element of array t[]. what is the role of the virtual year. jack n jones @prashanth why have u subtracted 1900,is it the base year u taking?? then what abt the base day?? a littl explanation pls saideep excellent Abhinav Priyadarshi A very nice explanation of the algorithm is given here( http://stackoverflow.com/a/6385934/981787 ). GeeksforGeeks Thanks for providing the link. We have added it to the original post. Prashant /* Paste your code here (You may delete these lines if not writing code) */ using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace dayOfTheWeek { class Program { static void Main(string[] args) { int day, month, year,totalDays; Console.WriteLine(“Enter the day:”); day = Convert.ToInt32(Console.ReadLine()); Console.WriteLine(“Enter the month:”); month = Convert.ToInt32(Console.ReadLine()); Console.WriteLine(“Enter the year:”); year = Convert.ToInt32(Console.ReadLine()); totalDays = clacDays(day, month, year); Console.WriteLine(“The day on ” + day + “/” + month + “/” + year + ” :” + findDay(totalDays)); Console.ReadLine(); } static int clacDays(int day, int month, int year) { int totalYears = year – 1900,totalDays=0,totalLeapYear=0; totalLeapYear = totalYears/ 4; totalDays = (totalYears * 365) + totalLeapYear; if (isLeapYear(year)) if (month == 1 || month == 2) totalDays = totalDays – 1; totalDays = totalDays + daysInCurrentYear(month, day); return totalDays; } static bool isLeapYear(int year) { if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) return true; else return false; } static int daysInCurrentYear(int month,int day) { switch (month) { case 1: return day; case 2: return (31 + day); case 3: return (59 + day); case 4: return (90 + day); case 5: return (120 + day); case 6: return (151 + day); case 7: return (181 + day); case 8: return (212 + day); case 9: return (243 + day); case 10: return (273 + day); case 11: return (304 + day); case 12: return (334 + day); default: return 0; } } static String findDay(int days) { int dayRemainder = days % 7; switch (dayRemainder) { case 0: return “Sunday”; case 1: return “Monday”; case 2: return “Tuesday”; case 3: return “Wednesday”; case 4: return “Thursday”; case 5: return “Friday”; case 6: return “Saturday”; default: return “”; } } } } http://www.nikoo28.blogspot.com nikoo28 please exlain the concept behind this formula… (y + y/4 – y/100 + y/400 + t[m-1] + d) % 7 abc I can guess only following. y/100 is subtracted and y/400 is added to handle leap years. david can anyone explain the above concept  
/* Paste your code here (You may delete these lines if not writing code) */
 kprocks Well, you can tell just by looking at it that it is correct… Assuming that the t[] array is correct, which you can verify with just 12 spot checks (one for each month using any day/year). The y -= m < 3 is a nice trick. It creates a "virtual year" that starts on March 1 and ends on February 28 (or 29), putting the extra day (if any) at the end of the year; or rather, at the end of the previous year. So for example, virtual year 2011 began on Mar 1 and will end on February 29, while virtual year 2012 will begin on March 1 and end on the following February 28. By putting the added day for leap years at the end of the virtual year, the rest of the expression is massively simplified. Let's look at the sum: (y + y/4 – y/100 + y/400 + t[m-1] + d) % 7 There are 365 days in a normal year. That is 52 weeks plus 1 day. So the day of the week shifts by one day per year, in general. That is what the y term is contributing; it adds one to the day for each year. But every four years is a leap year. Those contribute an extra day every four years. Thanks to the use of virtual years, we can just add y/4 to the sum to count how many leap days happen in y years. (Note that this formula assumes integer division rounds down.) But that is not quite right, because every 100 years is not a leap year. So we have to subtract off y/100. Except that every 400 years is a leap year again. So we have to add y/400. Finally we just add the day of the month d and an offset from a table that depends on the month (because the month boundaries within the year are fairly arbitrary). Then take the whole thing mod 7 since that is how long a week is. (If weeks were eight days, for example, what would change in this formula? Well, it would be mod 8, obviously. Also the y would need to be 5*y, because 365 % 8 == 5. Also the month table t[] would need adjusting. That's it.) Incidentally, Wikipedia's statement that the calendar is "good until 9999" is totally arbitrary. This formula is good for however long we stick with the Gregorian calendar, whether that is 10 years, 100 years, 1000 years, or 1 million years. The above argument is essentially a proof by induction. That is, assuming that the formula works for a particular (y,m,d), you prove that it works for (y+1,m,d) and (y,m,d+1). (Where y is a "virtual year" starting March 1.) So the key question is, does the sum change by the correct amount as you move from one year to the next? With knowledge of the leap year rules, and with the "virtual year" having the extra day at year end, it trivially does. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
