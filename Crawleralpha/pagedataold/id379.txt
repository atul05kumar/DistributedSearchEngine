Compute the integer absolute value (abs) without branching  - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Compute the integer absolute value (abs) without branching We need not to do anything if a number is positive. We want to change only negative numbers. Since negative numbers are stored in 2’s complement form, to get the absolute value of a negative number we have to toggle bits of the number and add 1 to the result. For example -2 in a 8 bit system is stored as follows 1 1 1 1 1 1 1 0 where leftmost bit is the sign bit. To get the absolute value of a negative number, we have to toggle all bits and add 1 to the toggled number i.e, 0 0 0 0 0 0 0 1 + 1 will give the absolute value of 1 1 1 1 1 1 1 0. Also remember, we need to do these operations only if the number is negative (sign bit is set). Method 1 1) Set the mask as right shift of integer by 31 (assuming integers are stored using 32 bits).  mask = n>>31 2) For negative numbers, above step sets mask as 1 1 1 1 1 1 1 1 and 0 0 0 0 0 0 0 0 for positive numbers. Add the mask to the given number.  mask + n 3) XOR of mask +n and mask gives the absolute value.  (mask + n)^mask Implementation: 
#include <stdio.h>
#define CHAR_BIT 8

/* This function will return absoulte value of n*/
unsigned int getAbs(int n)
{
  int const mask = n >> (sizeof(int) * CHAR_BIT - 1);
  return ((n + mask) ^ mask);
}

/* Driver program to test above function */
int main()
{
  int n = -6;
  printf("Absoute value of %d is %u", n, getAbs(n));

  getchar();
  return 0;
}
 Method 2: 1) Set the mask as right shift of integer by 31 (assuming integers are stored using 32 bits).  mask = n>>31 2) XOR the mask with number  mask ^ n 3) Subtract mask from result of step 2 and return the result.  (mask^n) - mask Implementation: 
/* This function will return absoulte value of n*/
unsigned int getAbs(int n)
{
  int const mask = n >> (sizeof(int) * CHAR_BIT - 1);
  return ((n ^ mask) - mask);
}
 On machines where branching is expensive, the above expression can be faster than the obvious approach, r = (v < 0) ? -(unsigned)v : v, even though the number of operations is the same. Please see this for more details about the above two methods. Please write comments if you find any of the above explanations/algorithms incorrect, or a better ways to solve the same problem. References: http://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs           Related Topics: Check if binary representation of a number is palindrome Swap two nibbles in a byte How to turn off a particular bit in a number? Check if a number is multiple of 9 using bitwise operators How to swap two numbers without using a temporary variable? Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication) Find position of the only set bit Swap all odd and even bits Tags: Bit Magic Tweet Writing code in comment? Please use ideone.com and share the link here. Lohith Ravi return IntegerMax & n ; where n is an integer should also do rit ? Ashish Mishra int x=-2342; cout<<~x+1; is it wrong????? okay int k = n>>31; return (n – (k*2*n)); AMIT a smaller and much easier algo  
/* Paste your code here (You may delete these lines if not writing code) */
#include<stdio.h>
int abs(int x)
{
    return x*((x>>(sizeof(int)*8-1)) | 1);
}
int main()
{
    printf("abs value=%d\n",abs(5));
    printf("abs value=%d\n",abs(-5));
    return 0;
}

 anonymous int fun(int x) {//assuming int is 32 bit ((x>>(sizeof(int)*8-1))&&return (-x))||return (x) } i think it also work tell me if anythnik goes wrong cooldude //On 64 bit machine //first flip and then add 1 for negative to positive public int absVal(int a) { return (((a>>63)^a)+((a>>63)&1)); } itreallyismE How about return (-2*(x<0)+1)*x? srinivas good and simple thinking  
/* Paste your code here (You may delete these lines if not writing code) */
 Jagat To those looking for an intuitive explanation to why abs(-ve num) = (mask + n)^mask Recall that in twos complement notation, a negative number is represented by flipping the bits of it’s positive counterpart and adding 1 to it. Hence to get the positive counterpart of a negative number, subtract 1 and flip the bits. Observe that in case of negative numbers mask = 31 bits set; which is equivalent to 2^32 – 1. Adding 2^32 – 1 to num is equivalent to subtracting 1 from num, since adding 2^32 has no effect on the number considering the bits has just 32 bits while 2^32 has 33 bits with all 0s except the most significant bit. Hence (num + mask) == (num – 1) Doing an xor with the mask is equivalent to flipping the bits. I’m assuming that the positive scenario is obvious to everyone. But why go through all these pain? Simply because we want a unified way of handling both positive and negative numbers, since we’re not allowed to use an “if” condition. Admins, please add this explanation to the article. It’ll help those who didn’t really get the logic behind the solution. v4group Referred http://www.geeksforgeeks.org/add-1-to-a-given-number/ #include //#define CHAR_BIT 8 /* This function will return absoulte value of n*/ unsigned int getAbs(int n) { int a = n; if((n >> 31)& 1) { a = ~n; //toggle all bit of negative number. we will get +(n-1) a = -(~a); // add one to that so n-1 + 1 = n } return a; } /* Driver program to test above function */ int main() { int n = -14; printf(“Absoute value of %d is %u”, n, getAbs(n)); getchar(); return 0; } Arindam #include #include int abs(int); void main(){ clrscr(); int n; printf(“enter a number to get the absolute value\n”); scanf(“%d”,&n); printf(“%d”,abs(n)); getch(); } int abs(int n){ if(n<0) return (~n+1); else return n; } Pranshu n = (mask & -x ) | (~mask & x) Pranshu If mask = n>>31 then n = (mask & -n) | (~mask & n) Does it solves the problem ? http://geeksforgeeks.org/?p=2648 me # innclude int absvalue(int *n) { int **k; *n=~*n+1; if(*n<0) return(*n); else return(**k); } int main() { int num; absvalue(&num); printf("%d",absvalue(&num)); return 0; } PsychoCoder Don’t you see the question properly!!!!  
/* Paste your code here (You may delete these lines if not writing code) */
 rahul can any one explain me what its not working  
#include <stdio.h>
#define CHAR_BIT 8
 
/* This function will return absoulte value of n*/
unsigned int getAbs(int n)
{
  return ((n^1)+1);
}
 
/* Driver program to test above function */
int main()
{
  int n = -6;
  printf("Absoute value of %d is %u", n, getAbs(n));
 
  getchar();
  return 0;
}
 Manna try -14.. it would not work !! adityaork n=(n>>31)*(-n)+(!n>>31)*n anonmous how about this 1:  
int absvalue(int n)
{
int mask=n>>31;
if(mask) 
  return ~n+1;
else
  return n;
}
 alternateSoln How about:  
/* This function will return absoulte value of n*/
unsigned int getAbs(int n)
{
   int const mask = n &gt;&gt; (sizeof(int) * CHAR_BIT - 1);
   return (n^mask)+1;
}
 This also seems easier to derive from the explanation in the blog post Tejas I thought the same thing. I don’t know why they didn’t post this. sureshpaldia22 Since a negative number is always stored as 2’s compliment. And 2’s compliment is actually ((1’s compliment of number) + (1)) Say, number is 2; 1’s compliment of 2: 11111101 + 00000001 ———– 2’s compliement 11111110 ———– So, just do 1’s compliment and add 1 to it.  
void abs(int num)
{
     return (num<0) ? (~num+1) : num;
}
 http://math-puzzles-computing.blogspot.com/ Venki @Suresh, your code fails at one place. For example on 32 bit machine, your code generates wrong result,  
int absolute(int num)
{
     return (num < 0) ? (~num+1) : num;
}

int main()
{
    int i = 0x80000000;
    printf("%d\n", absolute(-i));
    return 0;
}
 Abhirup Ghosh  

int absolute (int x)
{
  return (-(x<0) & (-x)) | (-(x>0) & x);
}
 Vinay Kumar Mask = X >> 31 Result = (~Mask & X) | (Mask & (-X)) kiran Mask = -(X>>31) Mayank I think simple logic is to subtract number by its double if number is negative and by zero is positive so (n-((n<>31) )) ((n<>31)) this part is zero if n>0 and -2n is n<0 Himanshu Aggarwal Hi, There is no need to define CHAR_BIT explicitly in the code examples above. This is a #defined constant which is predefined in the limits.h header file. Thanks, Himanshu Himanshu Aggarwal Hi, I have found another method to calculate the absolute value, though I have not been able to find some mathematical derivation for that. The method calculates absolute value as: abs(x) = x – (2*x & mask); where mask= x >> 31; The following is a C program to get it.  
#include <stdio.h>
#include <limits.h>

/* This function will return absoulte value of n*/
unsigned int getAbs(int n)
{
   int const mask = n >> (sizeof(int) * CHAR_BIT – 1);

   return n – ((2 * n) & mask) ;
}

/* Driver program to test above function */
int main()
{
  int n = -9;
  printf(“Absoute value of %d is %u”, n, getAbs(n));

  getchar();
  return 0;
}

 Thanks and Regards Himanshu Aggarwal Himanshu Aggarwal Hi, Thanks for the solution. Can someone please explain, how this formula or solution has been derived? Thanks, Himanshu Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
