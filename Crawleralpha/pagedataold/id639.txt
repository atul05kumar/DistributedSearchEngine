Print Ancestors of a given node in Binary Tree - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Print Ancestors of a given node in Binary Tree Given a Binary Tree and a key, write a function that prints all the ancestors of the key in the given binary tree. For example, if the given tree is following Binary Tree and key is 7, then your function should print 4, 2 and 1. 

              1
            /   \
          2      3
        /  \
      4     5
     /
    7
 Thanks to Mike , Sambasiva and wgpshashank for their contribution. 
#include<iostream>
#include<stdio.h>
#include<stdlib.h>

using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
   int data;
   struct node* left;
   struct node* right;
};

/* If target is present in tree, then prints the ancestors
   and returns true, otherwise returns false. */
bool printAncestors(struct node *root, int target)
{
  /* base cases */
  if (root == NULL)
     return false;

  if (root->data == target)
     return true;

  /* If target is present in either left or right subtree of this node,
     then print this node */
  if ( printAncestors(root->left, target) ||
       printAncestors(root->right, target) )
  {
    cout << root->data << " ";
    return true;
  }

  /* Else return false */
  return false;
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newnode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{

  /* Construct the following binary tree
              1
            /   \
          2      3
        /  \
      4     5
     /
    7
  */
  struct node *root = newnode(1);
  root->left        = newnode(2);
  root->right       = newnode(3);
  root->left->left  = newnode(4);
  root->left->right = newnode(5);
  root->left->left->left  = newnode(7);

  printAncestors(root, 7);

  getchar();
  return 0;
}
 Output: 4 2 1 Time Complexity: O(n) where n is the number of nodes in the given Binary Tree. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. aMUchbetteraproach #include #include #include using namespace std; /* A binary tree node has data, pointer to left child and a pointer to right child */ struct node { int data; struct node* left; struct node* right; }; /* Helper function that allocates a new node with the given data and NULL left and right pointers. */ struct node* newnode(int data) { struct node* node = (struct node*) malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } void printAncestors(struct node *node,int data){ if(node == NULL){ printf(“tree is empty…n”); return; } if(node->data == data){ //printf(“%d “,node->data); return; } if(node->dataleft,data); else printAncestors(node->right,data); printf(“%d “,node->data); } /* Driver program to test above functions*/ int main() { /* Construct the following binary tree 1 / 2 3 / 4 5 / 7 */ struct node *root = newnode(1); root->left = newnode(2); root->right = newnode(3); root->left->left = newnode(4); root->left->right = newnode(5); root->left->left->left = newnode(7); printAncestors(root, 7); getchar(); return 0; } Nitin Sharma #include #include #include struct node { int data; struct node* left; struct node* right; }; struct node* newnode(int data) { struct node* node = (struct node*) malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } struct node* stack[10]; int stack_ptr=-1; void print(struct node *root) { if(root != NULL) { print(root->left); printf(“%d “,root->data); print(root->right); } } void print_ancestors(struct node *root , int key) { int static success = 0; if(root == NULL) { return ; } if(root->data == key) { success = 1; return; } if(success!=1) { print_ancestors(root->left,key); } if(success!=1) { print_ancestors(root->right,key); } if(success == 1) { printf(“%d “,root->data); } } void push(struct node *node_ptr) { if(stack_ptr == 9) { printf(“Stack is fulln”); exit(0); } stack_ptr++; stack[stack_ptr] = node_ptr; } struct node* pop() { if(stack_ptr == -1) { printf(“Stack is empty.n”); exit(0); } return stack[stack_ptr–]; } void iterative_ancestors(struct node* root , int key) { struct node* stack[6]; int stack_ptr, c=1, flag=0; push(NULL); while(stack[stack_ptr] != NULL || c==1) { c=0; if(root != NULL) { if(root->data == key) { flag = 1; break; } push(root); root = root->left; } else { root = pop()->right; if(root != NULL ) { push(root); } } } if(flag == 1) { while(stack[stack_ptr] != NULL) { printf(“%d “,pop()->data); } } } void main() { struct node *root = newnode(1); root->left = newnode(2); root->right = newnode(3); root->left->left = newnode(4); root->left->right = newnode(5); root->left->left->left = newnode(7); print(root); printf(“n”); print_ancestors(root,7); iterative_ancestors(root,5); } Nitin Sharma Both recursive and itrative. Jignesh  
public boolean ancestor(Node root, int value) {
         
         if (root == null)
             return false;
         if (root.key == value)
             return true;
         if(ancestor(root.leftChild, value) || ancestor(root.rightChild, value)) {
             System.out.println("Value is: "+ root.key);
             return true;
         }
         else
             return false;
         
         
     }
 vishal // Algorithm // Current stack Contains all the ancestors nodes  
void ancestors(node_t* root , int k)
{
	
	if( root)
	{
		push(root -> key); // or node itself can be 
                 // stored instead of values                     
		if( root -> key == k)
			display_stack(); // and exit
		else
		{
			ancestors( root -> left , k);
			ancestors( root -> right ,k);
			pop();
		}
	}
} 
 shek8034 Why u are using your own stack if you r doing it with recursion. ? Just use the recursion stack. Stack is needed if you do it iteratively vishal I am using stack to store all the ancestors . If I use the recursion stack to print all ancestors then after I come out of the function everything is lost.  

 Nikhil Agrawal Iterative version(running for all cases):  
public void printAncestorIterative(Node root,Node a) 
{
      System.out.println();
      
    int flag=0;
    if (root == null) 
    {
        return;
    }

    Queue<Object> q = new LinkedList<Object>();
    q.add(root);
    q.add(root.value + " ");

    while(!q.isEmpty()){

        Node head = (Node) q.remove();
        String headPath = (String) q.remove();

        if(head.value==a.value){
            System.out.println("Ancestors of Node= "+a.value+" "+headPath);
            flag=1;
            break;
        }
        
        if( head.left!=null && head.left.value==a.value)
        {
            System.out.println("Ancestors of Node= "+a.value+" "+headPath);
            flag=1;
            break;
        }
         
         if( head.right!=null && head.right.value==a.value)
        {
            System.out.println("Ancestors of Node= "+a.value+" "+headPath);
            flag=1;
            break;
        }
            
        if(head.left!=null ){            
            String leftStr =  headPath + " -> " + head.left.value;
            q.add(head.left);
            q.add(leftStr);
        }

        if(head.right!=null){               
            String rightStr =  headPath + " -> " + head.right.value;
            q.add(head.right);
            q.add(rightStr);
        }
    }
    
    if(flag==0)
     System.out.println("Ancestors of Node= "+a.value+" is NOT present.");

}
 abhishek08aug C++ code:  
#include <iostream>
#include <stdlib.h>
using namespace std;
  
class tree_node {
  private:
    int data;
    tree_node * left;
    tree_node * right;
  public:
    tree_node() {
      left=NULL;
      right=NULL;
    }
    void set_data(int data) {
      this->data=data;
    }
    int get_data() {
      return this->data;
    }
    void set_left(tree_node * left) {
      this->left=left;
    }
    tree_node * get_left() {
      return this->left;
    }
    void set_right(tree_node * right) {
      this->right=right;
    }
    tree_node * get_right() {
      return this->right;
    }
    tree_node ** get_left_ref() {
      return &(this->left);
    }
    tree_node ** get_right_ref() {
      return &(this->right);
    }
};
  
class tree {
  private:
    tree_node * root;
    int size;
    void _recursive_insert(tree_node ** root_ref, int value);
    void _print_preorder(tree_node * root);
    void _print_inorder(tree_node * root);
    void _print_postorder(tree_node * root);
    int _find_size(tree_node * root);
    int _are_identical(tree_node * tn1, tree_node * tn2);
    int _find_height(tree_node * root);
    void _delete_tree(tree_node ** root);
    void _mirror(tree_node * root);
    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);
    void _print_array(int * array, int len);
    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);
    tree_node * _find_node(tree_node * root, int value);
    tree_node * _min_node(tree_node * root);
    void _print_level_order(tree_node * root);
    int _count_leaf_nodes(tree_node * root);
    int _is_bst(tree_node * root);
    int _children_sum(tree_node * root);
    void _ensure_children_sum(tree_node * root);
    int _diameter(tree_node * root);
    int _is_height_balanced(tree_node * root);
    int _leaf_path_sum(tree_node * root, int num);
    void _double_tree(tree_node * root);
    int _width(tree_node * root, int height, int level, int initialize_width_array);
    int _maximum(int array[], int len);
    void _print_k_distance_nodes(tree_node * root, int k, int distance);
    tree_node * _kth_smallest_element(tree_node * root, int k);
    int _get_level(tree_node * root, int key, int level);
    int _print_ancestors(tree_node * root, int key);
  public:
    tree() {
      root=NULL;
      size=0;
    }
    void insert(int value);
    void recursive_insert(int value);
    void print_preorder();
    void print_inorder();
    void print_postorder();
    int find_size();
    int get_size() {
      return this->size;
    }
    int are_identical(tree t);
    int find_height();
    void delete_tree();
    void mirror();
    void print_paths();
    tree_node * lowest_common_ancestor(int a, int b);
    tree_node * find_node(int value);
    tree_node * min_node();
    void print_level_order();
    int count_leaf_nodes();
    int is_bst();
    int children_sum();
    void ensure_children_sum();
    int diameter();
    int is_height_balanced();
    int leaf_path_sum(int num);
    void double_tree();
    int width();
    void print_k_distance_nodes(int k);
    tree_node * kth_smallest_element(int k);
    int get_level(int key);
    void print_ancestors(int key);
};
  
void tree::insert(int value) {
  if(root==NULL) {
    root=new tree_node;
    root->set_data(value);
  } else {
    tree_node * parent=NULL;
    tree_node * current=root;
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    while(current!=NULL) {
      if(value<=current->get_data()) {
        parent=current;
        current=current->get_left();
      } else {
        parent=current;
        current=current->get_right();
      }
    }
    if(value<=parent->get_data() && parent->get_left()==NULL) {
      parent->set_left(new_node);
    } else if(value>parent->get_data() && parent->get_right()==NULL) {
      parent->set_right(new_node);
    }
  }
  size++;
}
  
void tree::recursive_insert(int value) {
  _recursive_insert(&root, value);
  size++;
}
  
void tree::_recursive_insert(tree_node ** root_ref, int value) {
  if(*root_ref==NULL) {
    tree_node * new_node=new tree_node;
    new_node->set_data(value);
    *root_ref=new_node;  
  } else {
    if(value<=(*root_ref)->get_data()) {
      _recursive_insert((*root_ref)->get_left_ref(), value);
    } else {
      _recursive_insert((*root_ref)->get_right_ref(), value);
    }
  }
}
  
void tree::print_preorder() {
  if(root==NULL) {
    return;
  }
  _print_preorder(root);
  cout<<endl;
}
  
void tree::_print_preorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  cout<<root->get_data()<<" ";
  if(root->get_left()!=NULL)
    _print_preorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_preorder(root->get_right());
}
  
void tree::print_inorder() {
  if(root==NULL) {
    return;
  }
  _print_inorder(root);
  cout<<endl;
}
  
void tree::_print_inorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_inorder(root->get_left());
  cout<<root->get_data()<<" ";
  if(root->get_right()!=NULL)
    _print_inorder(root->get_right());
}
  
void tree::print_postorder() {
  if(root==NULL) {
    return;
  }
  _print_postorder(root);
  cout<<endl;
}
  
void tree::_print_postorder(tree_node * root) {
  if(root==NULL) {
    return;
  }
  if(root->get_left()!=NULL)
    _print_postorder(root->get_left());
  if(root->get_right()!=NULL)
    _print_postorder(root->get_right());
  cout<<root->get_data()<<" ";
}
 
int tree::find_size() {
  return _find_size(root);
}
 
int tree::_find_size(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return 1+_find_size(root->get_left())+_find_size(root->get_right());
  }
}
 
int tree::are_identical(tree t) {
  return _are_identical(this->root, t.root);
}
 
int tree::_are_identical(tree_node * tn1, tree_node * tn2) {
  if(tn1==NULL && tn2==NULL) {
    return 1;
  } else if((tn1==NULL && tn2!=NULL) || (tn1!=NULL && tn2==NULL) || (tn1->get_data()!=tn2->get_data())) {
    return 0;
  } else {
    return _are_identical(tn1->get_left(), tn2->get_left()) && _are_identical(tn1->get_right(), tn2->get_right());
  }
}
 
int tree::find_height() {
  return _find_height(root);
}
 
int tree::_find_height(tree_node * root) {
  if(root==NULL) {
    return 0;
  }
  else {
    return 1+max(_find_height(root->get_left()), _find_height(root->get_right()));
  }
}
 
void tree::delete_tree() {
  _delete_tree(&root);
  size=0;
}
 
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      _delete_tree((*root)->get_left_ref());
    }
    if((*root)->get_right()!=NULL) {
      _delete_tree((*root)->get_right_ref());
    }
    delete(*root);
    *root=NULL;
  }
}
 
/* alternate _delete_tree */
/*
void tree::_delete_tree(tree_node ** root) {
  if(*root==NULL) {
    return;
  } else {
    if((*root)->get_left()!=NULL) {
      tree_node * left_ref=(*root)->get_left();
      _delete_tree(&left_ref);
    }
    if((*root)->get_right()!=NULL) {
      tree_node * right_ref=(*root)->get_right();
      _delete_tree(&right_ref);
    }
    delete(*root);
    *root=NULL;
  }
}
*/
 
void tree::mirror() {
  _mirror(root);
}
 
void tree::_mirror(tree_node * root) {
  if(root==NULL) {
    return;
  }
 
  tree_node * temp=root->get_left();
  root->set_left(root->get_right());
  root->set_right(temp);
  _mirror(root->get_left());
  _mirror(root->get_right());
}
 
void tree::print_paths(){
   int max_path_length=find_height();
   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);
  _print_paths(root, path_nodes, 0);
}
 
void tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){
  if(root==NULL) {
    return;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_array(path_nodes, next_vacant_position);
  } else {
    *(path_nodes+next_vacant_position)=root->get_data();
    _print_paths(root->get_left(), path_nodes, next_vacant_position+1);
    _print_paths(root->get_right(), path_nodes, next_vacant_position+1);
  }
}
 
void tree::_print_array(int * array, int len) {
  int i;
  for(i=0; i<=len; i++) {
    cout<<*(array+i)<<" ";
  }
  cout<<endl;
}
 
tree_node * tree::find_node(int value) {
  return _find_node(root, value);
}
 
tree_node * tree::_find_node(tree_node * root, int value) {
  if(root==NULL || root->get_data()==value) {
    return root;
  } else if(value<=root->get_data()) {
    return _find_node(root->get_left(), value);
  } else {
    return _find_node(root->get_right(), value);
  }
}
 
tree_node * tree::lowest_common_ancestor(int a, int b) {
  return _lowest_common_ancestor(NULL, root, a, b);
}
 
tree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {
  if(root==NULL) {
    return root;
  } else if((root->get_data()==a && (root->get_left()->get_data()==b || root->get_right()->get_data()==b))
             || (root->get_data()==b && (root->get_left()->get_data()==a || root->get_right()->get_data()==a))) {
    return parent;
  } else if((_find_node(root->get_left(), a)!=NULL && _find_node(root->get_right(), b)!=NULL)
        || (_find_node(root->get_left(), b)!=NULL && _find_node(root->get_right(), a)!=NULL)) {
    return root;
  } else if(_find_node(root->get_left(), a)!=NULL && _find_node(root->get_left(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_left(), a, b);
  } else if(_find_node(root->get_right(), a)!=NULL && _find_node(root->get_right(), b)!=NULL) {
    return _lowest_common_ancestor(root, root->get_right(), a, b);
  } else {
    return NULL;
  }
}
 
tree_node * tree::min_node() {
  return _min_node(root);
}
 
tree_node * tree::_min_node(tree_node * root) {
  if(root==NULL || root->get_left()==NULL) {
    return root;
  } else {
    return _min_node(root->get_left());
  }
}
 
int tree::count_leaf_nodes() {
  return _count_leaf_nodes(root);
}
 
int tree::_count_leaf_nodes(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _count_leaf_nodes(root->get_left())+_count_leaf_nodes(root->get_right());
  }
}
 
 
int tree::is_bst() {
  return _is_bst(root);
}
 
int tree::_is_bst(tree_node * root) {
  static tree_node * previous=NULL;
  if(root==NULL) {
    return 1;
  } else {
    if(!_is_bst(root->get_left())) {
      return 0;
    }
    if(previous!=NULL && (previous->get_data())>(root->get_data())) {
      return 0;
    }
    previous=root;
    if(!_is_bst(root->get_right())) {
      return 0;
    }   
  }
}
 
int tree::children_sum() {
  return _children_sum(root);
}
 
int tree::_children_sum(tree_node * root) {
  if(root==NULL) {
    return 1;
  }
  if(root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  }
  else if(_children_sum(root->get_left()) && _children_sum(root->get_right())){
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }
 
    if(left_data+right_data==root->get_data()) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}
 
void tree::ensure_children_sum() {
  _ensure_children_sum(root);
}
 
void tree::_ensure_children_sum(tree_node * root) {
  if(root==NULL || (root->get_left()==NULL && root->get_right()==NULL)) {
    return;
  } else {
    _ensure_children_sum(root->get_left());
    _ensure_children_sum(root->get_right());
    int left_data;
    int right_data;
    if(root->get_left()!=NULL) {
      left_data=root->get_left()->get_data();
    } else {
      left_data=0;
    }
    if(root->get_right()!=NULL) {
      right_data=root->get_right()->get_data();
    } else {
      right_data=0;
    }
    root->set_data(left_data+right_data);
  }
}
 
int tree::diameter() {
  return _diameter(root);
}
 
int tree::_diameter(tree_node * root) {
  if(root==NULL) {
    return 0;
  } else {
    return max(_find_height(root->get_left())+_find_height(root->get_right())+1, max(_diameter(root->get_left()), _diameter(root->get_left())));
  }
}
 
int tree::is_height_balanced() {
  return _is_height_balanced(root);
}
 
int tree::_is_height_balanced(tree_node * root) {
  if(root==NULL) {
    return 1;
  } else {
    int left_height=_find_height(root->get_left());
    int right_height=_find_height(root->get_right());
    if(abs(left_height-right_height)<=1 && _is_height_balanced(root->get_left()) && _is_height_balanced(root->get_left())) {
      return 1;
    } else {
      return 0;
    }
  }
}
 
int tree::leaf_path_sum(int sum) {
  return _leaf_path_sum(root, sum);
}
 
int tree::_leaf_path_sum(tree_node * root, int sum) {
  if(root==NULL) {
    return 0;
  } else if(root->get_data()==sum && root->get_left()==NULL && root->get_right()==NULL) {
    return 1;
  } else {
    return _leaf_path_sum(root->get_left(), sum-root->get_data()) || _leaf_path_sum(root->get_right(), sum-root->get_data());
  }
}
 
void tree::double_tree() {
  _double_tree(root);
}
 
void tree::_double_tree(tree_node * root) {
  if(root==NULL) {
    return;
  } else {
    tree_node * new_node=new tree_node;
    new_node->set_data(root->get_data());
    tree_node * root_left=root->get_left();
    root->set_left(new_node);
    new_node->set_left(root_left);
    _double_tree(root_left);
    _double_tree(root->get_right());
  }
}
 
int tree::width() {
  int height=find_height();
  return _width(root, height, 0, 1);
}
 
int tree::_width(tree_node * root, int height, int level, int initialize_width_array) {
  static int width[]={0};
  if(initialize_width_array==1) {
    int i;
    for(i=0; i<height; i++) {
      width[i]=0; 
    }
  }
  if(root==NULL) {
    width[level]=width[level]+0;
  } else {
    width[level]=width[level]+1;
    _width(root->get_left(), height, level+1, 0);
    _width(root->get_right(), height, level+1, 0);
  }
  return _maximum(width, height);
}
 
int tree::_maximum(int array[], int len) {
  int i;
  int max=array[0];
  for(i=1; i<len; i++) {
    if(array[i]>max) {
      max=array[i];
    }
  }
  return max;
}
 
void tree::print_k_distance_nodes(int k) {
  _print_k_distance_nodes(root, k, 0);
  cout<<endl;
}
 
void tree::_print_k_distance_nodes(tree_node * root, int k, int distance) {
  if(root==NULL) {
    return;
  } else if(distance==k) {
    cout<<root->get_data()<<" ";
  } else {
    _print_k_distance_nodes(root->get_left(), k, distance+1);
    _print_k_distance_nodes(root->get_right(), k, distance+1);
  }
}
 
tree_node * tree::kth_smallest_element(int k) {
  return _kth_smallest_element(root, k);
}
 
tree_node * tree::_kth_smallest_element(tree_node * root, int k) {
  if(root==NULL) {
    return root;
  } else {
    int left_size=_find_size(root->get_left());
    if(left_size==k-1) {
      return root;
    } else if(left_size>=k) {
      return _kth_smallest_element(root->get_left(), k);
    } else {
      return _kth_smallest_element(root->get_right(), k-left_size-1);
    }
  }
}

int tree::get_level(int key) {
  return _get_level(root, key, 1);
}

int tree::_get_level(tree_node * root, int key, int level) {
  if(root==NULL) {
      return 0;
  } else if(root->get_data()==key) {
      return level;
  }
  else {
          return _get_level(root->get_left(), key, level+1)+_get_level(root->get_right(), key, level+1);
  }
}

void tree::print_ancestors(int key){
    _print_ancestors(root, key);
    cout<<endl;
}
    
int tree::_print_ancestors(tree_node * root, int key) {
    if(root==NULL) {
        return 0;
    } else if(root->get_data()==key) {
      return 1;
    } else {
        if(_print_ancestors(root->get_left(), key) || _print_ancestors(root->get_right(), key)) {
            cout<<root->get_data()<<" ";
            return 1;
        }
    }
}

int main() {
  tree t1;
 
  t1.recursive_insert(20);
  t1.recursive_insert(10);
  t1.insert(30);
  t1.insert(8);
  t1.recursive_insert(12);
  t1.recursive_insert(28);
  t1.recursive_insert(32);
  t1.recursive_insert(6);
  t1.recursive_insert(9);
  t1.recursive_insert(50);
  t1.insert(14);
  t1.insert(26);
 
  t1.print_inorder();
 
  t1.print_ancestors(50);
 
  return 0;
}
 6 8 9 10 12 14 20 26 28 30 32 50 32 30 20 Anil arya  
#include<stdio.h>

#include<stdlib.h>
struct node 
{
        struct node *left;
        struct node *right;
        int data ;
};
int ance[122];
void print_arr(int ance[],int len)
{
    int i;
        for(i=0;i<len;i++)
        {
                printf("%d ",ance[i]);
        }
        
}
int find_level(struct node *root,int k, int len)
{
            if(root==NULL)
                return 0;
                
            ance[len++]=root->data;
            
            if(root->data==k)
            {
                    print_arr(ance,len);
                  // exit(0);
            }
            
            find_level(root->left,k, len);
            find_level(root->right,k, len);
            
}
            
              
struct node *newnode(int data)
{
        struct node *node=(struct node *)malloc(sizeof(struct node ));
        
        node->data=data;
        node->left=NULL;
        node->right=NULL;
        return node;
}
int main()
{
        struct node *root=newnode(4);
        root->left=newnode(2);
        root->right=newnode(1);
        root->left->left=newnode(5);
        root->left->right=newnode(23);
        root->right->right=newnode(12);
        root->right->left=newnode(56);
        
        
        
        find_level(root,23,0);
        getch();
        return 0;
    }
        
        

 rituraj My algo : 1. Find the level of the given node say k. 2. Now ,Do a level order traversal up to (k-1)th level and print all nodes encountered. PS:I might be wrong ,So plz comment on this post kg1020 suppose k= 3 then according to u. print all the nodes up to level 2. then all nodes of level 1 & level 2 will be printed whereas only one node from level 2 & level 1 should be printed. John private void ancestor(Node root,ref bool found,int data) { //bool found = false; if (root != null) { if (root.Data > data) { ancestor(root.Left,ref found,data); } else if (root.Data < data) { ancestor(root.Right,ref found,data); } if (found) { Console.WriteLine(root.Data); } if (root.Data == data) { found = true; } } } guest your code assumes this is BST manishj Iterative approach(as you do a pre-order tarversal ,stack itself always contains ancestors to element at top of stack):  
btree* rightvisited[100]= {NULL};
int searchinrightvisited(btree * ptr)
{
	for(int i = 0; i <100;i++)
	{
		if(ptr == rightvisited[i])
			return 1;
	}
	return 0;
}
void printpath(btree *root, int key)
{
	btree * current = root;
	stack<btree *> st;
	bool done = false;

	int index = 0;
	while(!done)
	{
		if(current != NULL )
		{
			if(current->data == key)
			{
				done = true;	
			}
			st.push(current);

			current = current->left;
		}
		else
		{
			if(!st.empty() )
			{
				current = st.top();
				if(!searchinrightvisited(current))
				{
				
				rightvisited[index++] = current;
				current = current->right;
				}
				else
				{
					printf("%d",current->data);
					st.pop();
					current = NULL;
				}
				//if(current->right != NULL)
				//{
					
				//}
			
			}
			else
			{
				done = true;
			}
		}
	}
    printf("printing path to %d\n",key);
	while(!st.empty())
	{
		printf("%d",st.top()->data);
		st.pop();
	}
}
 Ankit Gupta Nice. Pushing off the stack when its right branch has been examined for the key. Smart! KC 1. Do an iterative DFS with root of the tree as the starting vertex. 2. pass the value of the node along with root in each pass such as DFS(root, n). 3. When n == root->data, put n on the stack and print the stack. Sandeep @KC: This approach looks an iterative version of the approach given in post. A standard way to use stack to avoid recursion. aimless can you write the code? http://wgpshashank.co.cc wgpshashank @geeksfrogeek @Mike The Only extra asked in dat question that we have to print node value also e.g including itself ..although its serious because a node can’t b ancestor of itself so if u wants u can modify so that it can also print the node it self 2nd also pass the node instead of int value in printAncester() method e.g pass by pointer not by value will be better Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
