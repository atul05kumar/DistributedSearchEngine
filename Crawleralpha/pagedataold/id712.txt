Sorted order printing of a given array that represents a BST  - GeeksforGeeks GeeksforGeeks A computer science portal for geeks GeeksQuiz Login Home Algorithms DS GATE Interview Corner Q&A C C++ Java Books Contribute Ask a Q About Array Bit Magic C/C++ Articles GFacts Linked List MCQ Misc Output String Tree Graph Sorted order printing of a given array that represents a BST Given an array that stores a complete Binary Search Tree, write a function that efficiently prints the given array in ascending order. For example, given an array [4, 2, 5, 1, 3], the function should print 1, 2, 3, 4, 5 Solution: Inorder traversal of BST prints it in ascending order. The only trick is to modify recursion termination condition in standard Inorder Tree Traversal. Implementation: 
#include<stdio.h>

void printSorted(int arr[], int start, int end)
{     
  if(start > end)
    return;

  // print left subtree
  printSorted(arr, start*2 + 1, end);

  // print root
  printf("%d  ", arr[start]);

  // print right subtree
  printSorted(arr, start*2 + 2, end);  
}

int main()
{
  int arr[] = {4, 2, 5, 1, 3};
  int arr_size = sizeof(arr)/sizeof(int);
  printSorted(arr, 0, arr_size-1);
  getchar();
  return 0;
}
 Time Complexity: O(n) Please write comments if you find the above solution incorrect, or find better ways to solve the same problem.           Related Topics: Perfect Binary Tree Specific Level Order Traversal Print Nodes in Top View of Binary Tree K Dimensional Tree Convert a Binary Tree to Threaded binary tree Serialize and Deserialize an N-ary Tree Serialize and Deserialize a Binary Tree Print nodes between two given level numbers of a binary tree Find Height of Binary Tree represented by Parent array Tweet Writing code in comment? Please use ideone.com and share the link here. simple_mind The above solution doesn’t work for the input ={4, 2, 5, 3, 6} Babaji Cause an array can only represent a complete binary tree as most nodes would have a left (2i + 1) as well a right (2i + 2) child. sonali gupta #include #include void printSorted(int arr[],int root, int size) {if(root<=size) { printSorted(arr,2*root+1,size); printf(“%d “,arr[root]); printSorted(arr,2*root+2,size);} } int main() { int arr[] = {4, 2, 5, 1, 3}; int arr_size = sizeof(arr)/sizeof(int); printSorted(arr, 0, arr_size-1); getchar(); return 0; } abhishek08aug What if the tree is incomplete? Shouldn’t the array be storing some placeholder for NULL values? i.e. a \ b [a, NULL, b] Purushotham In the above code, it is implemented that children of the node ‘n’ will be stored at 2n+1 & 2n+2. I think this is not considering the case how to derive the parent when index of child is given. for (2n+1)/2 gives n but (2n+2)/2 gives n+1. Both the children nodes are giving different parent indices. Hence the correct approach is leave the ‘0’ index null. Put the root at 1. And children at 2n & 2n+1 index.  
/* Paste your code here (You may delete these lines if not writing code) */
 http://www.geeksforgeeks.org syang  
	static void inorder(int[] a, int idx) {
		
		if (idx >= a.length) return;
		
		inorder(a, 2*idx+1);
		System.out.print(a[idx] + " ");
		inorder(a, 2*idx+2);
	}
	
	public static void main(String[] args) {
		
		int[] a = {4, 2, 5, 1, 3};
		
		inorder(a, 0);
		System.out.println();
	}
 neelverma Can’t we directly sort this array by using merge sort or quick sort? I mean both inorder tranversal and sorting will do same thing kartik Direct sorting is definitely an option. The time complexity of sorting will be at least O(nLogn). The approach given above takes O(n) time. So the given solution is more efficient. shiv can anyone tell me wats d logic behind this implementation????? Ashu if we do inorder traversal of a binary search tree than we get the nodes of tree in a sorted order. The above implementation does the same. it is slightly modified version of the inorder traversal if the level order traversal is given. Hope you got it. rocky  
int n;
vector<int> arr;

void printSorted(int x) {
    if( x > n) return;
    printSorted(2*x);
    print arr[x];
    printSorted(2*x + 1); 
    return;
}

int main(void) {
    cin >> n;
    int tmp;
    arr.push_back(-1) ; // dummy value.
    for (int i = 0; i < n; i++) 
       cin >> tmp;
       arr.push_back(tmp);
    printSorted(1);
    return 0;
}

 Agniswar Then this is a great sorting algorithm..as far i am seeing we are sorting an array in O(n) time and O(1) space..even better than counting sort..Isnt it ?? bansal but cost of creating a BST is O(nlogn) and can be O(n^2) in worst case.  
/* Paste your code here (You may delete these lines if not writing code) */
 ashish I think output will be reversed printed.. GeeksforGeeks @ashish: The above program prints the output in ascending order only. anomynous i think in order traversal is the answer if we consider the node of tree to be int data; node *left,*right; bala What if the array of interest starts from index other than “0”(Zero) ? Something like {123,13434,345,36,4,2,5,1,3} and the array starts only from index 4. I am not sure if such a condition will arise. Will it ? Akp Is the array here zero based or 1 based array (index) ? GeeksforGeeks Array indexes start from 0. For array arr[] = {4, 2, 5, 1, 3}, arr[0] = 4, arr[1] = 2 …. gunjan Tree: 
  5
/   \
4   6
/
2
/
1
 Array:[5,4,6,2,1] But it is not giving correct result is input array represents BST? GeeksforGeeks @gunjan: The given solution works only for Complete Binary Search Tree. A complete BST is a BST in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Ref: http://en.wikipedia.org/wiki/Binary_tree Sandeep It would be good if we can add these kind of conditions in/after question. rahul So we can apply the same method for the question like “construct a complete BST from the given level order traversal”..correct me if i m wrong Nikhil that tree will be represented as: Array: [5 4 6 2 0 0 0 1] 0 is for nodes with no value. And u can make a check in algo to print only non-zero values.It will give correct answer then. Interview Experiences Advanced Data Structures Dynamic Programming Greedy Algorithms Backtracking Pattern Searching Divide & Conquer Mathematical Algorithms Recursion Geometric Algorithms Popular Posts All permutations of a given string Memory Layout of C Programs Understanding “extern” keyword in C Median of two sorted arrays Tree traversal without recursion and without stack! Structure Member Alignment, Padding and Data Packing Intersection point of two Linked Lists Lowest Common Ancestor in a BST. Check if a binary tree is BST or not Sorted Linked List to Balanced BST Follow @GeeksforGeeks Subscribe Recent Comments @geeksforgeeks, Some rights reserved        Contact Us! Powered by WordPress & MooTools, customized by geeksforgeeks team
